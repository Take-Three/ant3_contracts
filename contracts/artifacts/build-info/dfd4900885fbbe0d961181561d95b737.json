{
	"id": "dfd4900885fbbe0d961181561d95b737",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.11",
	"solcLongVersion": "0.8.11+commit.d7f03943",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/Detake3Token.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.4.22 <0.9.0;\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\n\r\ncontract Detake3Token is ERC20Upgradeable, OwnableUpgradeable {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n    uint256 public _taxFee;\r\n    address private _tokenOwnerAddress;\r\n    address[] private _signers;\r\n    mapping(address => bool) private _mapSigners;\r\n    mapping(uint256 => bool) public uniqueIdExists;\r\n\r\n    function initialize(\r\n        string memory name,\r\n        string memory symbol,\r\n        uint8 decimals,\r\n        uint256 totalSupply,\r\n        uint256 taxFee,\r\n        address tokenOwnerAddress\r\n    ) public initializer {\r\n        __Ownable_init();\r\n        __ERC20_init(name, symbol);\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n        _taxFee = taxFee;\r\n        _tokenOwnerAddress = tokenOwnerAddress;\r\n        // set tokenOwnerAddress as owner of all tokens\r\n        _mint(tokenOwnerAddress, totalSupply);\r\n    }\r\n\r\n    function getTokenOwnerAddress() public view returns (address) {\r\n        return _tokenOwnerAddress;\r\n    }\r\n\r\n    function _transferWithBurn(address to, uint256 amount) private {\r\n        uint256 burnAmt = amount / _taxFee;\r\n        _burn(msg.sender, burnAmt);\r\n        uint256 newAmt = amount - burnAmt;\r\n        super.transfer(to, newAmt);\r\n    }\r\n\r\n    function signers() external view returns (address[] memory) {\r\n        return _signers;\r\n    }\r\n\r\n    function setSigners(address[] memory signers_) external virtual onlyOwner {\r\n        _updateMap(_signers, false, _mapSigners);\r\n        delete _signers;\r\n        _signers = signers_;\r\n        _updateMap(signers_, true, _mapSigners);\r\n    }\r\n\r\n    function mapSigner(address signer) external view returns (bool) {\r\n        return _mapSigners[signer];\r\n    }\r\n\r\n    function _updateMap(\r\n        address[] memory arr,\r\n        bool status,\r\n        mapping(address => bool) storage map\r\n    ) internal {\r\n        for (uint64 i = 0; i < arr.length; i++) {\r\n            map[arr[i]] = status;\r\n        }\r\n    }\r\n\r\n    function _permitTransfer(\r\n        address recipient,\r\n        uint256 uniqueId,\r\n        uint256 amount,\r\n        uint256 deadline //, // uint8 v, // bytes32 r, // bytes32 s\r\n    ) public virtual {\r\n        //require(deadline >= block.timestamp, \"Expired deadline\");\r\n        require(!uniqueIdExists[uniqueId], \"Unique id exists\");\r\n\r\n        address sender = msg.sender;\r\n        address owner = super.owner();\r\n\r\n        // bytes32 permitTxHash = keccak256(\r\n        //     abi.encode(owner, sender, recipient, amount, uniqueId, deadline)\r\n        // );\r\n\r\n        // address lastAddr = address(0);\r\n        // uint8 verifiedSigners = 0;\r\n        // for (uint64 i = 0; i < v.length; i++) {\r\n        //     address recovered = ecrecover(permitTxHash, v[i], r[i], s[i]);\r\n        //     if (recovered > lastAddr && _mapSigners[recovered])\r\n        //         verifiedSigners++;\r\n        //     lastAddr = recovered;\r\n        // }\r\n\r\n        //require(verifiedSigners == 3, \"Invalid signers\");\r\n\r\n        uniqueIdExists[uniqueId] = true;\r\n        if (sender == owner) {\r\n            //no burn when transfer from owner\r\n            super.transfer(recipient, amount);\r\n        } else {\r\n            _transferWithBurn(recipient, amount);\r\n        }\r\n    }\r\n}\r\n"
			},
			"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"./extensions/IERC20MetadataUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[45] private __gap;\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
				"OwnableUpgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "version",
									"type": "uint8"
								}
							],
							"name": "Initialized",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"kind": "dev",
						"methods": {
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"stateVariables": {
							"__gap": {
								"details": "This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":\"OwnableUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d7fc8396619de513c96b6e00301b88dd790e83542aab918425633a5f7297a15a\",\"dweb:/ipfs/QmXbP4kiZyp7guuS7xe8KaybnwkRPGrBc2Kbi3vhcTfpxb\"]},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6eb2fd1e9894dbe778f4b8131adecebe570689e63cf892f4e21257bfe1252497\",\"dweb:/ipfs/QmXgUGNfZvrn6N2miv3nooSs7Jm34A41qz94fu2GtDFcx8\"]},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9b4b2110b7f2b3eb32951bc08046fa90feccffa594e1176cb91cdfb0e94726b4\",\"dweb:/ipfs/QmSxLwYjicf9zWFuieRc8WQwE4FisA1Um5jp1iSa731TGt\"]},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d6520943ea55fdf5f0bafb39ed909f64de17051bc954ff3e88c9e5621412c79c\",\"dweb:/ipfs/QmWZ4rAKTQbNG2HxGs46AcTXShsVytKeLs7CUCdCSv5N7a\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 138,
								"contract": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_uint8"
							},
							{
								"astId": 141,
								"contract": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 1280,
								"contract": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_uint256)50_storage"
							},
							{
								"astId": 10,
								"contract": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
								"label": "_owner",
								"offset": 0,
								"slot": "51",
								"type": "t_address"
							},
							{
								"astId": 130,
								"contract": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "52",
								"type": "t_array(t_uint256)49_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_array(t_uint256)49_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[49]",
								"numberOfBytes": "1568"
							},
							"t_array(t_uint256)50_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[50]",
								"numberOfBytes": "1600"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
				"Initializable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "version",
									"type": "uint8"
								}
							],
							"name": "Initialized",
							"type": "event"
						}
					],
					"devdoc": {
						"custom:oz-upgrades-unsafe-allow": "constructor constructor() {     _disableInitializers(); } ``` ====",
						"details": "This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ``` contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\"MyToken\", \"MTK\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\"MyToken\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```",
						"events": {
							"Initialized(uint8)": {
								"details": "Triggered when the contract has been initialized or reinitialized."
							}
						},
						"kind": "dev",
						"methods": {},
						"stateVariables": {
							"_initialized": {
								"custom:oz-retyped-from": "bool",
								"details": "Indicates that the contract has been initialized."
							},
							"_initializing": {
								"details": "Indicates that the contract is in the process of being initialized."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor constructor() {     _disableInitializers(); } ``` ====\",\"details\":\"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ``` contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\\\"MyToken\\\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_initialized\":{\"custom:oz-retyped-from\":\"bool\",\"details\":\"Indicates that the contract has been initialized.\"},\"_initializing\":{\"details\":\"Indicates that the contract is in the process of being initialized.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":\"Initializable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6eb2fd1e9894dbe778f4b8131adecebe570689e63cf892f4e21257bfe1252497\",\"dweb:/ipfs/QmXgUGNfZvrn6N2miv3nooSs7Jm34A41qz94fu2GtDFcx8\"]},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9b4b2110b7f2b3eb32951bc08046fa90feccffa594e1176cb91cdfb0e94726b4\",\"dweb:/ipfs/QmSxLwYjicf9zWFuieRc8WQwE4FisA1Um5jp1iSa731TGt\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 138,
								"contract": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_uint8"
							},
							{
								"astId": 141,
								"contract": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							}
						],
						"types": {
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
				"ERC20Upgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "version",
									"type": "uint8"
								}
							],
							"name": "Initialized",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "subtractedValue",
									"type": "uint256"
								}
							],
							"name": "decreaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "addedValue",
									"type": "uint256"
								}
							],
							"name": "increaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.",
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"decreaseAllowance(address,uint256)": {
								"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
							},
							"increaseAllowance(address,uint256)": {
								"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
							}
						},
						"stateVariables": {
							"__gap": {
								"details": "This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":1482:13245  contract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":1482:13245  contract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x39509351\n      gt\n      tag_14\n      jumpi\n      dup1\n      0x39509351\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x70a08231\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x95d89b41\n      eq\n      tag_10\n      jumpi\n      dup1\n      0xa457c2d7\n      eq\n      tag_11\n      jumpi\n      dup1\n      0xa9059cbb\n      eq\n      tag_12\n      jumpi\n      dup1\n      0xdd62ed3e\n      eq\n      tag_13\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_14:\n      dup1\n      0x06fdde03\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x095ea7b3\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x18160ddd\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x23b872dd\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x313ce567\n      eq\n      tag_7\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2493:2591  function name() public view virtual override returns (string memory) {... */\n    tag_3:\n      tag_15\n      tag_16\n      jump\t// in\n    tag_15:\n      mload(0x40)\n      tag_17\n      swap2\n      swap1\n      tag_18\n      jump\t// in\n    tag_17:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4770:4967  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n    tag_4:\n      tag_19\n      tag_20\n      calldatasize\n      0x04\n      tag_21\n      jump\t// in\n    tag_20:\n      tag_22\n      jump\t// in\n    tag_19:\n      mload(0x40)\n        /* \"#utility.yul\":1218:1232   */\n      swap1\n      iszero\n        /* \"#utility.yul\":1211:1233   */\n      iszero\n        /* \"#utility.yul\":1193:1234   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1181:1183   */\n      0x20\n        /* \"#utility.yul\":1166:1184   */\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4770:4967  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n      tag_17\n        /* \"#utility.yul\":1053:1240   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3581:3687  function totalSupply() public view virtual override returns (uint256) {... */\n    tag_5:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3668:3680  _totalSupply */\n      sload(0x35)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3581:3687  function totalSupply() public view virtual override returns (uint256) {... */\n    tag_25:\n      mload(0x40)\n        /* \"#utility.yul\":1391:1416   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":1379:1381   */\n      0x20\n        /* \"#utility.yul\":1364:1382   */\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3581:3687  function totalSupply() public view virtual override returns (uint256) {... */\n      tag_17\n        /* \"#utility.yul\":1245:1422   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5529:5815  function transferFrom(... */\n    tag_6:\n      tag_19\n      tag_30\n      calldatasize\n      0x04\n      tag_31\n      jump\t// in\n    tag_30:\n      tag_32\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3430:3521  function decimals() public view virtual override returns (uint8) {... */\n    tag_7:\n      mload(0x40)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3512:3514  18 */\n      0x12\n        /* \"#utility.yul\":1902:1938   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1890:1892   */\n      0x20\n        /* \"#utility.yul\":1875:1893   */\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3430:3521  function decimals() public view virtual override returns (uint8) {... */\n      tag_17\n        /* \"#utility.yul\":1760:1944   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6210:6444  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {... */\n    tag_8:\n      tag_19\n      tag_39\n      calldatasize\n      0x04\n      tag_21\n      jump\t// in\n    tag_39:\n      tag_40\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3745:3870  function balanceOf(address account) public view virtual override returns (uint256) {... */\n    tag_9:\n      tag_25\n      tag_43\n      calldatasize\n      0x04\n      tag_44\n      jump\t// in\n    tag_43:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3845:3863  _balances[account] */\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3819:3826  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3845:3863  _balances[account] */\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3845:3854  _balances */\n      0x33\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3845:3863  _balances[account] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3745:3870  function balanceOf(address account) public view virtual override returns (uint256) {... */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2704:2806  function symbol() public view virtual override returns (string memory) {... */\n    tag_10:\n      tag_15\n      tag_48\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6931:7358  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {... */\n    tag_11:\n      tag_19\n      tag_51\n      calldatasize\n      0x04\n      tag_21\n      jump\t// in\n    tag_51:\n      tag_52\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4066:4255  function transfer(address to, uint256 amount) public virtual override returns (bool) {... */\n    tag_12:\n      tag_19\n      tag_55\n      calldatasize\n      0x04\n      tag_21\n      jump\t// in\n    tag_55:\n      tag_56\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4313:4462  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n    tag_13:\n      tag_25\n      tag_59\n      calldatasize\n      0x04\n      tag_60\n      jump\t// in\n    tag_59:\n      tag_61\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2493:2591  function name() public view virtual override returns (string memory) {... */\n    tag_16:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2547:2560  string memory */\n      0x60\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2579:2584  _name */\n      0x36\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2572:2584  return _name */\n      dup1\n      sload\n      tag_64\n      swap1\n      tag_65\n      jump\t// in\n    tag_64:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_66\n      swap1\n      tag_65\n      jump\t// in\n    tag_66:\n      dup1\n      iszero\n      tag_67\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_68\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_67)\n    tag_68:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_69:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_69\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_67:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2493:2591  function name() public view virtual override returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4770:4967  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n    tag_22:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4853:4857  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4907:4939  _approve(owner, spender, amount) */\n      tag_73\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4923:4930  spender */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4932:4938  amount */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4907:4915  _approve */\n      tag_74\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4907:4939  _approve(owner, spender, amount) */\n      jump\t// in\n    tag_73:\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4956:4960  true */\n      0x01\n      swap4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4770:4967  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5529:5815  function transferFrom(... */\n    tag_32:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5656:5660  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5712:5750  _spendAllowance(from, spender, amount) */\n      tag_78\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5728:5732  from */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5743:5749  amount */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5712:5727  _spendAllowance */\n      tag_79\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5712:5750  _spendAllowance(from, spender, amount) */\n      jump\t// in\n    tag_78:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5760:5787  _transfer(from, to, amount) */\n      tag_80\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5770:5774  from */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5776:5778  to */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5780:5786  amount */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5760:5769  _transfer */\n      tag_81\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5760:5787  _transfer(from, to, amount) */\n      jump\t// in\n    tag_80:\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5804:5808  true */\n      0x01\n      swap5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5529:5815  function transferFrom(... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6210:6444  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {... */\n    tag_40:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6298:6302  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6352:6416  _approve(owner, spender, allowance(owner, spender) + addedValue) */\n      tag_73\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6368:6375  spender */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6405:6415  addedValue */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6377:6402  allowance(owner, spender) */\n      tag_86\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6368:6375  spender */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6377:6386  allowance */\n      tag_61\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6377:6402  allowance(owner, spender) */\n      jump\t// in\n    tag_86:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6377:6415  allowance(owner, spender) + addedValue */\n      tag_87\n      swap2\n      swap1\n      tag_88\n      jump\t// in\n    tag_87:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6352:6360  _approve */\n      tag_74\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6352:6416  _approve(owner, spender, allowance(owner, spender) + addedValue) */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2704:2806  function symbol() public view virtual override returns (string memory) {... */\n    tag_48:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2760:2773  string memory */\n      0x60\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2792:2799  _symbol */\n      0x37\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2785:2799  return _symbol */\n      dup1\n      sload\n      tag_64\n      swap1\n      tag_65\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6931:7358  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {... */\n    tag_52:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7024:7028  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7024:7028  bool */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7105:7130  allowance(owner, spender) */\n      tag_98\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7122:7129  spender */\n      dup7\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7105:7114  allowance */\n      tag_61\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7105:7130  allowance(owner, spender) */\n      jump\t// in\n    tag_98:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7078:7130  uint256 currentAllowance = allowance(owner, spender) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7168:7183  subtractedValue */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7148:7164  currentAllowance */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7148:7183  currentAllowance >= subtractedValue */\n      lt\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7140:7225  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n      tag_99\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3222:3224   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7140:7225  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3204:3225   */\n      mstore\n        /* \"#utility.yul\":3261:3263   */\n      0x25\n        /* \"#utility.yul\":3241:3259   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3234:3264   */\n      mstore\n        /* \"#utility.yul\":3300:3334   */\n      0x45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77\n        /* \"#utility.yul\":3280:3298   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3273:3335   */\n      mstore\n      shl(0xd8, 0x207a65726f)\n        /* \"#utility.yul\":3351:3369   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":3344:3379   */\n      mstore\n        /* \"#utility.yul\":3396:3415   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7140:7225  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n    tag_100:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_99:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7259:7319  _approve(owner, spender, currentAllowance - subtractedValue) */\n      tag_80\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7268:7273  owner */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7275:7282  spender */\n      dup7\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7303:7318  subtractedValue */\n      dup7\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7284:7300  currentAllowance */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7284:7318  currentAllowance - subtractedValue */\n      sub\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7259:7267  _approve */\n      tag_74\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7259:7319  _approve(owner, spender, currentAllowance - subtractedValue) */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4066:4255  function transfer(address to, uint256 amount) public virtual override returns (bool) {... */\n    tag_56:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4145:4149  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4199:4227  _transfer(owner, to, amount) */\n      tag_73\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4216:4218  to */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4220:4226  amount */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4199:4208  _transfer */\n      tag_81\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4199:4227  _transfer(owner, to, amount) */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4313:4462  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n    tag_61:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4428:4446  _allowances[owner] */\n      swap2\n      dup3\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4402:4409  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4428:4446  _allowances[owner] */\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4428:4439  _allowances */\n      0x34\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4428:4446  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4428:4455  _allowances[owner][spender] */\n      swap4\n      swap1\n      swap5\n      and\n      dup3\n      mstore\n      swap2\n      swap1\n      swap2\n      mstore\n      keccak256\n      sload\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4313:4462  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10447:10817  function _approve(... */\n    tag_74:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10578:10597  owner != address(0) */\n      dup4\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10570:10638  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      tag_109\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3628:3630   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10570:10638  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3610:3631   */\n      mstore\n        /* \"#utility.yul\":3667:3669   */\n      0x24\n        /* \"#utility.yul\":3647:3665   */\n      dup1\n      dup3\n      add\n        /* \"#utility.yul\":3640:3670   */\n      mstore\n        /* \"#utility.yul\":3706:3740   */\n      0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464\n        /* \"#utility.yul\":3686:3704   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3679:3741   */\n      mstore\n      shl(0xe0, 0x72657373)\n        /* \"#utility.yul\":3757:3775   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":3750:3784   */\n      mstore\n        /* \"#utility.yul\":3801:3820   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10570:10638  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      tag_100\n        /* \"#utility.yul\":3426:3826   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10570:10638  require(owner != address(0), \"ERC20: approve from the zero address\") */\n    tag_109:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10656:10677  spender != address(0) */\n      dup3\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10648:10716  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      tag_112\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":4033:4035   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10648:10716  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4015:4036   */\n      mstore\n        /* \"#utility.yul\":4072:4074   */\n      0x22\n        /* \"#utility.yul\":4052:4070   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":4045:4075   */\n      mstore\n        /* \"#utility.yul\":4111:4145   */\n      0x45524332303a20617070726f766520746f20746865207a65726f206164647265\n        /* \"#utility.yul\":4091:4109   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":4084:4146   */\n      mstore\n      shl(0xf0, 0x7373)\n        /* \"#utility.yul\":4162:4180   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":4155:4187   */\n      mstore\n        /* \"#utility.yul\":4204:4223   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10648:10716  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      tag_100\n        /* \"#utility.yul\":3831:4229   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10648:10716  require(spender != address(0), \"ERC20: approve to the zero address\") */\n    tag_112:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10727:10745  _allowances[owner] */\n      dup4\n      dup2\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10727:10738  _allowances */\n      0x34\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10727:10745  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10727:10754  _allowances[owner][spender] */\n      swap5\n      dup8\n      and\n      dup1\n      dup5\n      mstore\n      swap5\n      dup3\n      mstore\n      swap2\n      dup3\n      swap1\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10727:10763  _allowances[owner][spender] = amount */\n      dup6\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10778:10810  Approval(owner, spender, amount) */\n      swap1\n      mload\n        /* \"#utility.yul\":1391:1416   */\n      dup5\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10778:10810  Approval(owner, spender, amount) */\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n      swap2\n        /* \"#utility.yul\":1364:1382   */\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10778:10810  Approval(owner, spender, amount) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10447:10817  function _approve(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11098:11539  function _spendAllowance(... */\n    tag_79:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11228:11252  uint256 currentAllowance */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11255:11280  allowance(owner, spender) */\n      tag_117\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11265:11270  owner */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11272:11279  spender */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11255:11264  allowance */\n      tag_61\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11255:11280  allowance(owner, spender) */\n      jump\t// in\n    tag_117:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11228:11280  uint256 currentAllowance = allowance(owner, spender) */\n      swap1\n      pop\n      not(0x00)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11294:11310  currentAllowance */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11294:11331  currentAllowance != type(uint256).max */\n      eq\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11290:11533  if (currentAllowance != type(uint256).max) {... */\n      tag_122\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11375:11381  amount */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11355:11371  currentAllowance */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11355:11381  currentAllowance >= amount */\n      lt\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11347:11415  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      tag_119\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":4436:4438   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11347:11415  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4418:4439   */\n      mstore\n        /* \"#utility.yul\":4475:4477   */\n      0x1d\n        /* \"#utility.yul\":4455:4473   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":4448:4478   */\n      mstore\n        /* \"#utility.yul\":4514:4545   */\n      0x45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000\n        /* \"#utility.yul\":4494:4512   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":4487:4546   */\n      mstore\n        /* \"#utility.yul\":4563:4581   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11347:11415  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      tag_100\n        /* \"#utility.yul\":4234:4587   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11347:11415  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n    tag_119:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11457:11508  _approve(owner, spender, currentAllowance - amount) */\n      tag_122\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11466:11471  owner */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11473:11480  spender */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11501:11507  amount */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11482:11498  currentAllowance */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11482:11507  currentAllowance - amount */\n      sub\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11457:11465  _approve */\n      tag_74\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11457:11508  _approve(owner, spender, currentAllowance - amount) */\n      jump\t// in\n    tag_122:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11218:11539  {... */\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11098:11539  function _spendAllowance(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7812:8463  function _transfer(... */\n    tag_81:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7938:7956  from != address(0) */\n      dup4\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7930:7998  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      tag_124\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":4794:4796   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7930:7998  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4776:4797   */\n      mstore\n        /* \"#utility.yul\":4833:4835   */\n      0x25\n        /* \"#utility.yul\":4813:4831   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":4806:4836   */\n      mstore\n        /* \"#utility.yul\":4872:4906   */\n      0x45524332303a207472616e736665722066726f6d20746865207a65726f206164\n        /* \"#utility.yul\":4852:4870   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":4845:4907   */\n      mstore\n      shl(0xd8, 0x6472657373)\n        /* \"#utility.yul\":4923:4941   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":4916:4951   */\n      mstore\n        /* \"#utility.yul\":4968:4987   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7930:7998  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      tag_100\n        /* \"#utility.yul\":4592:4993   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7930:7998  require(from != address(0), \"ERC20: transfer from the zero address\") */\n    tag_124:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8016:8032  to != address(0) */\n      dup3\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8008:8072  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      tag_127\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":5200:5202   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8008:8072  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":5182:5203   */\n      mstore\n        /* \"#utility.yul\":5239:5241   */\n      0x23\n        /* \"#utility.yul\":5219:5237   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":5212:5242   */\n      mstore\n        /* \"#utility.yul\":5278:5312   */\n      0x45524332303a207472616e7366657220746f20746865207a65726f2061646472\n        /* \"#utility.yul\":5258:5276   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":5251:5313   */\n      mstore\n      shl(0xe8, 0x657373)\n        /* \"#utility.yul\":5329:5347   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":5322:5355   */\n      mstore\n        /* \"#utility.yul\":5372:5391   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8008:8072  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      tag_100\n        /* \"#utility.yul\":4998:5397   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8008:8072  require(to != address(0), \"ERC20: transfer to the zero address\") */\n    tag_127:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8154:8169  _balances[from] */\n      dup4\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8132:8151  uint256 fromBalance */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8154:8169  _balances[from] */\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8154:8163  _balances */\n      0x33\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8154:8169  _balances[from] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8187:8208  fromBalance >= amount */\n      dup2\n      dup2\n      lt\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8179:8251  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      tag_132\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":5604:5606   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8179:8251  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":5586:5607   */\n      mstore\n        /* \"#utility.yul\":5643:5645   */\n      0x26\n        /* \"#utility.yul\":5623:5641   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":5616:5646   */\n      mstore\n        /* \"#utility.yul\":5682:5716   */\n      0x45524332303a207472616e7366657220616d6f756e7420657863656564732062\n        /* \"#utility.yul\":5662:5680   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":5655:5717   */\n      mstore\n      shl(0xd0, 0x616c616e6365)\n        /* \"#utility.yul\":5733:5751   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":5726:5762   */\n      mstore\n        /* \"#utility.yul\":5779:5798   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8179:8251  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      tag_100\n        /* \"#utility.yul\":5402:5804   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8179:8251  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n    tag_132:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8285:8300  _balances[from] */\n      dup1\n      dup6\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8285:8294  _balances */\n      0x33\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8285:8300  _balances[from] */\n      0x20\n      mstore\n      0x40\n      dup1\n      dup3\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8303:8323  fromBalance - amount */\n      dup6\n      dup6\n      sub\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8285:8323  _balances[from] = fromBalance - amount */\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8343:8356  _balances[to] */\n      swap2\n      dup6\n      and\n      dup2\n      mstore\n      swap1\n      dup2\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8343:8366  _balances[to] += amount */\n      dup1\n      sload\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8317:8323  amount */\n      dup5\n      swap3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8285:8300  _balances[from] */\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8343:8366  _balances[to] += amount */\n      tag_135\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8317:8323  amount */\n      dup5\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8343:8366  _balances[to] += amount */\n      tag_88\n      jump\t// in\n    tag_135:\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8397:8399  to */\n      dup3\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8382:8408  Transfer(from, to, amount) */\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8391:8395  from */\n      dup5\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8382:8408  Transfer(from, to, amount) */\n      and\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8401:8407  amount */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8382:8408  Transfer(from, to, amount) */\n      mload(0x40)\n      tag_136\n      swap2\n        /* \"#utility.yul\":1391:1416   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1379:1381   */\n      0x20\n        /* \"#utility.yul\":1364:1382   */\n      add\n      swap1\n        /* \"#utility.yul\":1245:1422   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8382:8408  Transfer(from, to, amount) */\n    tag_136:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8419:8456  _afterTokenTransfer(from, to, amount) */\n      tag_122\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12123:12244  function _beforeTokenTransfer(... */\n      jump\n        /* \"#utility.yul\":14:611   */\n    tag_18:\n        /* \"#utility.yul\":126:130   */\n      0x00\n        /* \"#utility.yul\":155:157   */\n      0x20\n        /* \"#utility.yul\":184:186   */\n      dup1\n        /* \"#utility.yul\":173:182   */\n      dup4\n        /* \"#utility.yul\":166:187   */\n      mstore\n        /* \"#utility.yul\":216:222   */\n      dup4\n        /* \"#utility.yul\":210:223   */\n      mload\n        /* \"#utility.yul\":259:265   */\n      dup1\n        /* \"#utility.yul\":254:256   */\n      dup3\n        /* \"#utility.yul\":243:252   */\n      dup6\n        /* \"#utility.yul\":239:257   */\n      add\n        /* \"#utility.yul\":232:266   */\n      mstore\n        /* \"#utility.yul\":284:285   */\n      0x00\n        /* \"#utility.yul\":294:434   */\n    tag_144:\n        /* \"#utility.yul\":308:314   */\n      dup2\n        /* \"#utility.yul\":305:306   */\n      dup2\n        /* \"#utility.yul\":302:315   */\n      lt\n        /* \"#utility.yul\":294:434   */\n      iszero\n      tag_146\n      jumpi\n        /* \"#utility.yul\":403:417   */\n      dup6\n      dup2\n      add\n        /* \"#utility.yul\":399:422   */\n      dup4\n      add\n        /* \"#utility.yul\":393:423   */\n      mload\n        /* \"#utility.yul\":369:386   */\n      dup6\n      dup3\n      add\n        /* \"#utility.yul\":388:390   */\n      0x40\n        /* \"#utility.yul\":365:391   */\n      add\n        /* \"#utility.yul\":358:424   */\n      mstore\n        /* \"#utility.yul\":323:333   */\n      dup3\n      add\n        /* \"#utility.yul\":294:434   */\n      jump(tag_144)\n    tag_146:\n        /* \"#utility.yul\":452:458   */\n      dup2\n        /* \"#utility.yul\":449:450   */\n      dup2\n        /* \"#utility.yul\":446:459   */\n      gt\n        /* \"#utility.yul\":443:534   */\n      iszero\n      tag_147\n      jumpi\n        /* \"#utility.yul\":522:523   */\n      0x00\n        /* \"#utility.yul\":517:519   */\n      0x40\n        /* \"#utility.yul\":508:514   */\n      dup4\n        /* \"#utility.yul\":497:506   */\n      dup8\n        /* \"#utility.yul\":493:515   */\n      add\n        /* \"#utility.yul\":489:520   */\n      add\n        /* \"#utility.yul\":482:524   */\n      mstore\n        /* \"#utility.yul\":443:534   */\n    tag_147:\n      pop\n        /* \"#utility.yul\":595:597   */\n      0x1f\n        /* \"#utility.yul\":574:589   */\n      add\n      not(0x1f)\n        /* \"#utility.yul\":570:599   */\n      and\n        /* \"#utility.yul\":555:600   */\n      swap3\n      swap1\n      swap3\n      add\n        /* \"#utility.yul\":602:604   */\n      0x40\n        /* \"#utility.yul\":551:605   */\n      add\n      swap4\n        /* \"#utility.yul\":14:611   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":616:789   */\n    tag_141:\n        /* \"#utility.yul\":684:704   */\n      dup1\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":733:764   */\n      dup2\n      and\n        /* \"#utility.yul\":723:765   */\n      dup2\n      eq\n        /* \"#utility.yul\":713:783   */\n      tag_149\n      jumpi\n        /* \"#utility.yul\":779:780   */\n      0x00\n        /* \"#utility.yul\":776:777   */\n      dup1\n        /* \"#utility.yul\":769:781   */\n      revert\n        /* \"#utility.yul\":713:783   */\n    tag_149:\n        /* \"#utility.yul\":616:789   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":794:1048   */\n    tag_21:\n        /* \"#utility.yul\":862:868   */\n      0x00\n        /* \"#utility.yul\":870:876   */\n      dup1\n        /* \"#utility.yul\":923:925   */\n      0x40\n        /* \"#utility.yul\":911:920   */\n      dup4\n        /* \"#utility.yul\":902:909   */\n      dup6\n        /* \"#utility.yul\":898:921   */\n      sub\n        /* \"#utility.yul\":894:926   */\n      slt\n        /* \"#utility.yul\":891:943   */\n      iszero\n      tag_151\n      jumpi\n        /* \"#utility.yul\":939:940   */\n      0x00\n        /* \"#utility.yul\":936:937   */\n      dup1\n        /* \"#utility.yul\":929:941   */\n      revert\n        /* \"#utility.yul\":891:943   */\n    tag_151:\n        /* \"#utility.yul\":962:991   */\n      tag_152\n        /* \"#utility.yul\":981:990   */\n      dup4\n        /* \"#utility.yul\":962:991   */\n      tag_141\n      jump\t// in\n    tag_152:\n        /* \"#utility.yul\":952:991   */\n      swap5\n        /* \"#utility.yul\":1038:1040   */\n      0x20\n        /* \"#utility.yul\":1023:1041   */\n      swap4\n      swap1\n      swap4\n      add\n        /* \"#utility.yul\":1010:1042   */\n      calldataload\n      swap4\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":794:1048   */\n      jump\t// out\n        /* \"#utility.yul\":1427:1755   */\n    tag_31:\n        /* \"#utility.yul\":1504:1510   */\n      0x00\n        /* \"#utility.yul\":1512:1518   */\n      dup1\n        /* \"#utility.yul\":1520:1526   */\n      0x00\n        /* \"#utility.yul\":1573:1575   */\n      0x60\n        /* \"#utility.yul\":1561:1570   */\n      dup5\n        /* \"#utility.yul\":1552:1559   */\n      dup7\n        /* \"#utility.yul\":1548:1571   */\n      sub\n        /* \"#utility.yul\":1544:1576   */\n      slt\n        /* \"#utility.yul\":1541:1593   */\n      iszero\n      tag_156\n      jumpi\n        /* \"#utility.yul\":1589:1590   */\n      0x00\n        /* \"#utility.yul\":1586:1587   */\n      dup1\n        /* \"#utility.yul\":1579:1591   */\n      revert\n        /* \"#utility.yul\":1541:1593   */\n    tag_156:\n        /* \"#utility.yul\":1612:1641   */\n      tag_157\n        /* \"#utility.yul\":1631:1640   */\n      dup5\n        /* \"#utility.yul\":1612:1641   */\n      tag_141\n      jump\t// in\n    tag_157:\n        /* \"#utility.yul\":1602:1641   */\n      swap3\n      pop\n        /* \"#utility.yul\":1660:1698   */\n      tag_158\n        /* \"#utility.yul\":1694:1696   */\n      0x20\n        /* \"#utility.yul\":1683:1692   */\n      dup6\n        /* \"#utility.yul\":1679:1697   */\n      add\n        /* \"#utility.yul\":1660:1698   */\n      tag_141\n      jump\t// in\n    tag_158:\n        /* \"#utility.yul\":1650:1698   */\n      swap2\n      pop\n        /* \"#utility.yul\":1745:1747   */\n      0x40\n        /* \"#utility.yul\":1734:1743   */\n      dup5\n        /* \"#utility.yul\":1730:1748   */\n      add\n        /* \"#utility.yul\":1717:1749   */\n      calldataload\n        /* \"#utility.yul\":1707:1749   */\n      swap1\n      pop\n        /* \"#utility.yul\":1427:1755   */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      jump\t// out\n        /* \"#utility.yul\":1949:2135   */\n    tag_44:\n        /* \"#utility.yul\":2008:2014   */\n      0x00\n        /* \"#utility.yul\":2061:2063   */\n      0x20\n        /* \"#utility.yul\":2049:2058   */\n      dup3\n        /* \"#utility.yul\":2040:2047   */\n      dup5\n        /* \"#utility.yul\":2036:2059   */\n      sub\n        /* \"#utility.yul\":2032:2064   */\n      slt\n        /* \"#utility.yul\":2029:2081   */\n      iszero\n      tag_161\n      jumpi\n        /* \"#utility.yul\":2077:2078   */\n      0x00\n        /* \"#utility.yul\":2074:2075   */\n      dup1\n        /* \"#utility.yul\":2067:2079   */\n      revert\n        /* \"#utility.yul\":2029:2081   */\n    tag_161:\n        /* \"#utility.yul\":2100:2129   */\n      tag_162\n        /* \"#utility.yul\":2119:2128   */\n      dup3\n        /* \"#utility.yul\":2100:2129   */\n      tag_141\n      jump\t// in\n    tag_162:\n        /* \"#utility.yul\":2090:2129   */\n      swap4\n        /* \"#utility.yul\":1949:2135   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2140:2400   */\n    tag_60:\n        /* \"#utility.yul\":2208:2214   */\n      0x00\n        /* \"#utility.yul\":2216:2222   */\n      dup1\n        /* \"#utility.yul\":2269:2271   */\n      0x40\n        /* \"#utility.yul\":2257:2266   */\n      dup4\n        /* \"#utility.yul\":2248:2255   */\n      dup6\n        /* \"#utility.yul\":2244:2267   */\n      sub\n        /* \"#utility.yul\":2240:2272   */\n      slt\n        /* \"#utility.yul\":2237:2289   */\n      iszero\n      tag_164\n      jumpi\n        /* \"#utility.yul\":2285:2286   */\n      0x00\n        /* \"#utility.yul\":2282:2283   */\n      dup1\n        /* \"#utility.yul\":2275:2287   */\n      revert\n        /* \"#utility.yul\":2237:2289   */\n    tag_164:\n        /* \"#utility.yul\":2308:2337   */\n      tag_165\n        /* \"#utility.yul\":2327:2336   */\n      dup4\n        /* \"#utility.yul\":2308:2337   */\n      tag_141\n      jump\t// in\n    tag_165:\n        /* \"#utility.yul\":2298:2337   */\n      swap2\n      pop\n        /* \"#utility.yul\":2356:2394   */\n      tag_166\n        /* \"#utility.yul\":2390:2392   */\n      0x20\n        /* \"#utility.yul\":2379:2388   */\n      dup5\n        /* \"#utility.yul\":2375:2393   */\n      add\n        /* \"#utility.yul\":2356:2394   */\n      tag_141\n      jump\t// in\n    tag_166:\n        /* \"#utility.yul\":2346:2394   */\n      swap1\n      pop\n        /* \"#utility.yul\":2140:2400   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2405:2785   */\n    tag_65:\n        /* \"#utility.yul\":2484:2485   */\n      0x01\n        /* \"#utility.yul\":2480:2492   */\n      dup2\n      dup2\n      shr\n      swap1\n        /* \"#utility.yul\":2527:2539   */\n      dup3\n      and\n      dup1\n        /* \"#utility.yul\":2548:2609   */\n      tag_168\n      jumpi\n        /* \"#utility.yul\":2602:2606   */\n      0x7f\n        /* \"#utility.yul\":2594:2600   */\n      dup3\n        /* \"#utility.yul\":2590:2607   */\n      and\n        /* \"#utility.yul\":2580:2607   */\n      swap2\n      pop\n        /* \"#utility.yul\":2548:2609   */\n    tag_168:\n        /* \"#utility.yul\":2655:2657   */\n      0x20\n        /* \"#utility.yul\":2647:2653   */\n      dup3\n        /* \"#utility.yul\":2644:2658   */\n      lt\n        /* \"#utility.yul\":2624:2642   */\n      dup2\n        /* \"#utility.yul\":2621:2659   */\n      eq\n        /* \"#utility.yul\":2618:2779   */\n      iszero\n      tag_169\n      jumpi\n        /* \"#utility.yul\":2701:2711   */\n      0x4e487b71\n        /* \"#utility.yul\":2696:2699   */\n      0xe0\n        /* \"#utility.yul\":2692:2712   */\n      shl\n        /* \"#utility.yul\":2689:2690   */\n      0x00\n        /* \"#utility.yul\":2682:2713   */\n      mstore\n        /* \"#utility.yul\":2736:2740   */\n      0x22\n        /* \"#utility.yul\":2733:2734   */\n      0x04\n        /* \"#utility.yul\":2726:2741   */\n      mstore\n        /* \"#utility.yul\":2764:2768   */\n      0x24\n        /* \"#utility.yul\":2761:2762   */\n      0x00\n        /* \"#utility.yul\":2754:2769   */\n      revert\n        /* \"#utility.yul\":2618:2779   */\n    tag_169:\n      pop\n        /* \"#utility.yul\":2405:2785   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2790:3015   */\n    tag_88:\n        /* \"#utility.yul\":2830:2833   */\n      0x00\n        /* \"#utility.yul\":2861:2862   */\n      dup3\n        /* \"#utility.yul\":2857:2863   */\n      not\n        /* \"#utility.yul\":2854:2855   */\n      dup3\n        /* \"#utility.yul\":2851:2864   */\n      gt\n        /* \"#utility.yul\":2848:2984   */\n      iszero\n      tag_171\n      jumpi\n        /* \"#utility.yul\":2906:2916   */\n      0x4e487b71\n        /* \"#utility.yul\":2901:2904   */\n      0xe0\n        /* \"#utility.yul\":2897:2917   */\n      shl\n        /* \"#utility.yul\":2894:2895   */\n      0x00\n        /* \"#utility.yul\":2887:2918   */\n      mstore\n        /* \"#utility.yul\":2941:2945   */\n      0x11\n        /* \"#utility.yul\":2938:2939   */\n      0x04\n        /* \"#utility.yul\":2931:2946   */\n      mstore\n        /* \"#utility.yul\":2969:2973   */\n      0x24\n        /* \"#utility.yul\":2966:2967   */\n      0x00\n        /* \"#utility.yul\":2959:2974   */\n      revert\n        /* \"#utility.yul\":2848:2984   */\n    tag_171:\n      pop\n        /* \"#utility.yul\":3000:3009   */\n      add\n      swap1\n        /* \"#utility.yul\":2790:3015   */\n      jump\t// out\n\n    auxdata: 0xa2646970667358221220201226ba3962a64cd3b351151a00b90bf3e70ebac6945ae90df61c58329f18b664736f6c634300080b0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50610887806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461012357806370a082311461013657806395d89b411461015f578063a457c2d714610167578063a9059cbb1461017a578063dd62ed3e1461018d57600080fd5b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ef57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b66101a0565b6040516100c391906106c4565b60405180910390f35b6100df6100da366004610735565b610232565b60405190151581526020016100c3565b6035545b6040519081526020016100c3565b6100df61010f36600461075f565b61024a565b604051601281526020016100c3565b6100df610131366004610735565b61026e565b6100f361014436600461079b565b6001600160a01b031660009081526033602052604090205490565b6100b6610290565b6100df610175366004610735565b61029f565b6100df610188366004610735565b61031f565b6100f361019b3660046107bd565b61032d565b6060603680546101af906107f0565b80601f01602080910402602001604051908101604052809291908181526020018280546101db906107f0565b80156102285780601f106101fd57610100808354040283529160200191610228565b820191906000526020600020905b81548152906001019060200180831161020b57829003601f168201915b5050505050905090565b600033610240818585610358565b5060019392505050565b60003361025885828561047c565b6102638585856104f6565b506001949350505050565b600033610240818585610281838361032d565b61028b919061082b565b610358565b6060603780546101af906107f0565b600033816102ad828661032d565b9050838110156103125760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b6102638286868403610358565b6000336102408185856104f6565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b6001600160a01b0383166103ba5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610309565b6001600160a01b03821661041b5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610309565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000610488848461032d565b905060001981146104f057818110156104e35760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610309565b6104f08484848403610358565b50505050565b6001600160a01b03831661055a5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610309565b6001600160a01b0382166105bc5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610309565b6001600160a01b038316600090815260336020526040902054818110156106345760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610309565b6001600160a01b0380851660009081526033602052604080822085850390559185168152908120805484929061066b90849061082b565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516106b791815260200190565b60405180910390a36104f0565b600060208083528351808285015260005b818110156106f1578581018301518582016040015282016106d5565b81811115610703576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461073057600080fd5b919050565b6000806040838503121561074857600080fd5b61075183610719565b946020939093013593505050565b60008060006060848603121561077457600080fd5b61077d84610719565b925061078b60208501610719565b9150604084013590509250925092565b6000602082840312156107ad57600080fd5b6107b682610719565b9392505050565b600080604083850312156107d057600080fd5b6107d983610719565b91506107e760208401610719565b90509250929050565b600181811c9082168061080457607f821691505b6020821081141561082557634e487b7160e01b600052602260045260246000fd5b50919050565b6000821982111561084c57634e487b7160e01b600052601160045260246000fd5b50019056fea2646970667358221220201226ba3962a64cd3b351151a00b90bf3e70ebac6945ae90df61c58329f18b664736f6c634300080b0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x887 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x123 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x136 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x15F JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x167 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x17A JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x18D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xCC JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xEF JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x101 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x114 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x1A0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0x6C4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xDF PUSH2 0xDA CALLDATASIZE PUSH1 0x4 PUSH2 0x735 JUMP JUMPDEST PUSH2 0x232 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH1 0x35 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x10F CALLDATASIZE PUSH1 0x4 PUSH2 0x75F JUMP JUMPDEST PUSH2 0x24A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x131 CALLDATASIZE PUSH1 0x4 PUSH2 0x735 JUMP JUMPDEST PUSH2 0x26E JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x144 CALLDATASIZE PUSH1 0x4 PUSH2 0x79B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xB6 PUSH2 0x290 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x175 CALLDATASIZE PUSH1 0x4 PUSH2 0x735 JUMP JUMPDEST PUSH2 0x29F JUMP JUMPDEST PUSH2 0xDF PUSH2 0x188 CALLDATASIZE PUSH1 0x4 PUSH2 0x735 JUMP JUMPDEST PUSH2 0x31F JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x19B CALLDATASIZE PUSH1 0x4 PUSH2 0x7BD JUMP JUMPDEST PUSH2 0x32D JUMP JUMPDEST PUSH1 0x60 PUSH1 0x36 DUP1 SLOAD PUSH2 0x1AF SWAP1 PUSH2 0x7F0 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1DB SWAP1 PUSH2 0x7F0 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x228 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1FD JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x228 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x20B JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x240 DUP2 DUP6 DUP6 PUSH2 0x358 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x258 DUP6 DUP3 DUP6 PUSH2 0x47C JUMP JUMPDEST PUSH2 0x263 DUP6 DUP6 DUP6 PUSH2 0x4F6 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x240 DUP2 DUP6 DUP6 PUSH2 0x281 DUP4 DUP4 PUSH2 0x32D JUMP JUMPDEST PUSH2 0x28B SWAP2 SWAP1 PUSH2 0x82B JUMP JUMPDEST PUSH2 0x358 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x37 DUP1 SLOAD PUSH2 0x1AF SWAP1 PUSH2 0x7F0 JUMP JUMPDEST PUSH1 0x0 CALLER DUP2 PUSH2 0x2AD DUP3 DUP7 PUSH2 0x32D JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x312 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x263 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x358 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x240 DUP2 DUP6 DUP6 PUSH2 0x4F6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x3BA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x41B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x488 DUP5 DUP5 PUSH2 0x32D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 NOT DUP2 EQ PUSH2 0x4F0 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x4E3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x309 JUMP JUMPDEST PUSH2 0x4F0 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x358 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x55A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x5BC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x634 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP2 DUP6 AND DUP2 MSTORE SWAP1 DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x66B SWAP1 DUP5 SWAP1 PUSH2 0x82B JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x6B7 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x4F0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x6F1 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x6D5 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x703 JUMPI PUSH1 0x0 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x730 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x748 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x751 DUP4 PUSH2 0x719 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x774 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x77D DUP5 PUSH2 0x719 JUMP JUMPDEST SWAP3 POP PUSH2 0x78B PUSH1 0x20 DUP6 ADD PUSH2 0x719 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x7AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7B6 DUP3 PUSH2 0x719 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x7D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7D9 DUP4 PUSH2 0x719 JUMP JUMPDEST SWAP2 POP PUSH2 0x7E7 PUSH1 0x20 DUP5 ADD PUSH2 0x719 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x804 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x825 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x84C JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 KECCAK256 SLT 0x26 0xBA CODECOPY PUSH3 0xA64CD3 0xB3 MLOAD ISZERO BYTE STOP 0xB9 SIGNEXTEND RETURN 0xE7 0xE 0xBA 0xC6 SWAP5 GAS 0xE9 0xD 0xF6 SHR PC ORIGIN SWAP16 XOR 0xB6 PUSH5 0x736F6C6343 STOP ADDMOD SIGNEXTEND STOP CALLER ",
							"sourceMap": "1482:11763:2:-:0;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@_afterTokenTransfer_887": {
									"entryPoint": null,
									"id": 887,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_approve_822": {
									"entryPoint": 856,
									"id": 822,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_beforeTokenTransfer_876": {
									"entryPoint": null,
									"id": 876,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_msgSender_1266": {
									"entryPoint": null,
									"id": 1266,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_spendAllowance_865": {
									"entryPoint": 1148,
									"id": 865,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_transfer_649": {
									"entryPoint": 1270,
									"id": 649,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@allowance_444": {
									"entryPoint": 813,
									"id": 444,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@approve_469": {
									"entryPoint": 562,
									"id": 469,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@balanceOf_401": {
									"entryPoint": null,
									"id": 401,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@decimals_377": {
									"entryPoint": null,
									"id": 377,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@decreaseAllowance_572": {
									"entryPoint": 671,
									"id": 572,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@increaseAllowance_531": {
									"entryPoint": 622,
									"id": 531,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@name_357": {
									"entryPoint": 416,
									"id": 357,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@symbol_367": {
									"entryPoint": 656,
									"id": 367,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@totalSupply_387": {
									"entryPoint": null,
									"id": 387,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@transferFrom_502": {
									"entryPoint": 586,
									"id": 502,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@transfer_426": {
									"entryPoint": 799,
									"id": 426,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_address": {
									"entryPoint": 1817,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 1947,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_address": {
									"entryPoint": 1981,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_addresst_addresst_uint256": {
									"entryPoint": 1887,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"abi_decode_tuple_t_addresst_uint256": {
									"entryPoint": 1845,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 1732,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 2091,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"extract_byte_array_length": {
									"entryPoint": 2032,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:5806:8",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:8",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "135:476:8",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "145:12:8",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "155:2:8",
																"type": "",
																"value": "32"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "149:2:8",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "173:9:8"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "184:2:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "166:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "166:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "166:21:8"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "196:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "216:6:8"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "210:5:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "210:13:8"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "200:6:8",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "243:9:8"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "254:2:8"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "239:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "239:18:8"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "259:6:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "232:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "232:34:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "232:34:8"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "275:10:8",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "284:1:8",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "279:1:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "344:90:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "headStart",
																									"nodeType": "YulIdentifier",
																									"src": "373:9:8"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "384:1:8"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "369:3:8"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "369:17:8"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "388:2:8",
																							"type": "",
																							"value": "64"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "365:3:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "365:26:8"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "value0",
																											"nodeType": "YulIdentifier",
																											"src": "407:6:8"
																										},
																										{
																											"name": "i",
																											"nodeType": "YulIdentifier",
																											"src": "415:1:8"
																										}
																									],
																									"functionName": {
																										"name": "add",
																										"nodeType": "YulIdentifier",
																										"src": "403:3:8"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "403:14:8"
																								},
																								{
																									"name": "_1",
																									"nodeType": "YulIdentifier",
																									"src": "419:2:8"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "399:3:8"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "399:23:8"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "393:5:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "393:30:8"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "358:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "358:66:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "358:66:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "305:1:8"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "308:6:8"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "302:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "302:13:8"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "316:19:8",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "318:15:8",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "327:1:8"
																				},
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "330:2:8"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "323:3:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "323:10:8"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "318:1:8"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "298:3:8",
																"statements": []
															},
															"src": "294:140:8"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "468:66:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "headStart",
																									"nodeType": "YulIdentifier",
																									"src": "497:9:8"
																								},
																								{
																									"name": "length",
																									"nodeType": "YulIdentifier",
																									"src": "508:6:8"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "493:3:8"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "493:22:8"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "517:2:8",
																							"type": "",
																							"value": "64"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "489:3:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "489:31:8"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "522:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "482:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "482:42:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "482:42:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "449:1:8"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "452:6:8"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "446:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "446:13:8"
															},
															"nodeType": "YulIf",
															"src": "443:91:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "543:62:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "559:9:8"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "578:6:8"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "586:2:8",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "574:3:8"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "574:15:8"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "595:2:8",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "591:3:8"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "591:7:8"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "570:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "570:29:8"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "555:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "555:45:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "602:2:8",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "551:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "551:54:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "543:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "104:9:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "115:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "126:4:8",
														"type": ""
													}
												],
												"src": "14:597:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "665:124:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "675:29:8",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "697:6:8"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "684:12:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "684:20:8"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "675:5:8"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "767:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "776:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "779:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "769:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "769:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "769:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "726:5:8"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "737:5:8"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "752:3:8",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "757:1:8",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "748:3:8"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "748:11:8"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "761:1:8",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "744:3:8"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "744:19:8"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "733:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "733:31:8"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "723:2:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "723:42:8"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "716:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "716:50:8"
															},
															"nodeType": "YulIf",
															"src": "713:70:8"
														}
													]
												},
												"name": "abi_decode_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "644:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "655:5:8",
														"type": ""
													}
												],
												"src": "616:173:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "881:167:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "927:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "936:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "939:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "929:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "929:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "929:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "902:7:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "911:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "898:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "898:23:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "923:2:8",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "894:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "894:32:8"
															},
															"nodeType": "YulIf",
															"src": "891:52:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "952:39:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "981:9:8"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "962:18:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "962:29:8"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "952:6:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1000:42:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1027:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1038:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1023:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1023:18:8"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1010:12:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1010:32:8"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1000:6:8"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "839:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "850:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "862:6:8",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "870:6:8",
														"type": ""
													}
												],
												"src": "794:254:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1148:92:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1158:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1170:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1181:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1166:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1166:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1158:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1200:9:8"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "1225:6:8"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "1218:6:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1218:14:8"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "1211:6:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1211:22:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1193:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1193:41:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1193:41:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1117:9:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1128:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1139:4:8",
														"type": ""
													}
												],
												"src": "1053:187:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1346:76:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1356:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1368:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1379:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1364:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1364:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1356:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1398:9:8"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1409:6:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1391:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1391:25:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1391:25:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1315:9:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1326:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1337:4:8",
														"type": ""
													}
												],
												"src": "1245:177:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1531:224:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1577:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1586:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1589:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1579:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1579:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1579:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1552:7:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1561:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1548:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1548:23:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1573:2:8",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1544:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1544:32:8"
															},
															"nodeType": "YulIf",
															"src": "1541:52:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1602:39:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1631:9:8"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "1612:18:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1612:29:8"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1602:6:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1650:48:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1683:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1694:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1679:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1679:18:8"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "1660:18:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1660:38:8"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1650:6:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1707:42:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1734:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1745:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1730:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1730:18:8"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1717:12:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1717:32:8"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "1707:6:8"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1481:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1492:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1504:6:8",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1512:6:8",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "1520:6:8",
														"type": ""
													}
												],
												"src": "1427:328:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1857:87:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1867:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1879:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1890:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1875:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1875:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1867:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1909:9:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "1924:6:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1932:4:8",
																				"type": "",
																				"value": "0xff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "1920:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1920:17:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1902:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1902:36:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1902:36:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1826:9:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1837:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1848:4:8",
														"type": ""
													}
												],
												"src": "1760:184:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2019:116:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2065:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2074:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2077:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2067:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2067:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2067:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2040:7:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2049:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2036:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2036:23:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2061:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2032:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2032:32:8"
															},
															"nodeType": "YulIf",
															"src": "2029:52:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2090:39:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2119:9:8"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "2100:18:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2100:29:8"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2090:6:8"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1985:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1996:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2008:6:8",
														"type": ""
													}
												],
												"src": "1949:186:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2227:173:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2273:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2282:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2285:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2275:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2275:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2275:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2248:7:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2257:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2244:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2244:23:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2269:2:8",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2240:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2240:32:8"
															},
															"nodeType": "YulIf",
															"src": "2237:52:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2298:39:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2327:9:8"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "2308:18:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2308:29:8"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2298:6:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2346:48:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2379:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2390:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2375:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2375:18:8"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "2356:18:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2356:38:8"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "2346:6:8"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2185:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2196:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2208:6:8",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "2216:6:8",
														"type": ""
													}
												],
												"src": "2140:260:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2460:325:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2470:22:8",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2484:1:8",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "2487:4:8"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "2480:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2480:12:8"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "2470:6:8"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2501:38:8",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "2531:4:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2537:1:8",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "2527:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2527:12:8"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "2505:18:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2578:31:8",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "2580:27:8",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "2594:6:8"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2602:4:8",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "2590:3:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2590:17:8"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "2580:6:8"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "2558:18:8"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "2551:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2551:26:8"
															},
															"nodeType": "YulIf",
															"src": "2548:61:8"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2668:111:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2689:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2696:3:8",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2701:10:8",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "2692:3:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2692:20:8"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2682:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2682:31:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2682:31:8"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2733:1:8",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2736:4:8",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2726:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2726:15:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2726:15:8"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2761:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2764:4:8",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2754:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2754:15:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2754:15:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "2624:18:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "2647:6:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2655:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "2644:2:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2644:14:8"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "2621:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2621:38:8"
															},
															"nodeType": "YulIf",
															"src": "2618:161:8"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "2440:4:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "2449:6:8",
														"type": ""
													}
												],
												"src": "2405:380:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2838:177:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2873:111:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2894:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2901:3:8",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2906:10:8",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "2897:3:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2897:20:8"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2887:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2887:31:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2887:31:8"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2938:1:8",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2941:4:8",
																					"type": "",
																					"value": "0x11"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2931:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2931:15:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2931:15:8"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2966:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2969:4:8",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2959:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2959:15:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2959:15:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "2854:1:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "2861:1:8"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "2857:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2857:6:8"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "2851:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2851:13:8"
															},
															"nodeType": "YulIf",
															"src": "2848:136:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2993:16:8",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "3004:1:8"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "3007:1:8"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3000:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3000:9:8"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "2993:3:8"
																}
															]
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "2821:1:8",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "2824:1:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "2830:3:8",
														"type": ""
													}
												],
												"src": "2790:225:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3194:227:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3211:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3222:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3204:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3204:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3204:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3245:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3256:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3241:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3241:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3261:2:8",
																		"type": "",
																		"value": "37"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3234:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3234:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3234:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3284:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3295:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3280:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3280:18:8"
																	},
																	{
																		"hexValue": "45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3300:34:8",
																		"type": "",
																		"value": "ERC20: decreased allowance below"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3273:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3273:62:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3273:62:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3355:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3366:2:8",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3351:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3351:18:8"
																	},
																	{
																		"hexValue": "207a65726f",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3371:7:8",
																		"type": "",
																		"value": " zero"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3344:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3344:35:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3344:35:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3388:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3400:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3411:3:8",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3396:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3396:19:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3388:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3171:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3185:4:8",
														"type": ""
													}
												],
												"src": "3020:401:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3600:226:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3617:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3628:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3610:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3610:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3610:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3651:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3662:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3647:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3647:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3667:2:8",
																		"type": "",
																		"value": "36"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3640:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3640:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3640:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3690:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3701:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3686:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3686:18:8"
																	},
																	{
																		"hexValue": "45524332303a20617070726f76652066726f6d20746865207a65726f20616464",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3706:34:8",
																		"type": "",
																		"value": "ERC20: approve from the zero add"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3679:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3679:62:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3679:62:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3761:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3772:2:8",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3757:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3757:18:8"
																	},
																	{
																		"hexValue": "72657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3777:6:8",
																		"type": "",
																		"value": "ress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3750:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3750:34:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3750:34:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3793:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3805:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3816:3:8",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3801:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3801:19:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3793:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3577:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3591:4:8",
														"type": ""
													}
												],
												"src": "3426:400:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4005:224:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4022:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4033:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4015:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4015:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4015:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4056:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4067:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4052:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4052:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4072:2:8",
																		"type": "",
																		"value": "34"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4045:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4045:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4045:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4095:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4106:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4091:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4091:18:8"
																	},
																	{
																		"hexValue": "45524332303a20617070726f766520746f20746865207a65726f206164647265",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4111:34:8",
																		"type": "",
																		"value": "ERC20: approve to the zero addre"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4084:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4084:62:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4084:62:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4166:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4177:2:8",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4162:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4162:18:8"
																	},
																	{
																		"hexValue": "7373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4182:4:8",
																		"type": "",
																		"value": "ss"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4155:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4155:32:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4155:32:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4196:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4208:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4219:3:8",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4204:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4204:19:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4196:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3982:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3996:4:8",
														"type": ""
													}
												],
												"src": "3831:398:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4408:179:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4425:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4436:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4418:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4418:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4418:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4459:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4470:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4455:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4455:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4475:2:8",
																		"type": "",
																		"value": "29"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4448:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4448:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4448:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4498:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4509:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4494:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4494:18:8"
																	},
																	{
																		"hexValue": "45524332303a20696e73756666696369656e7420616c6c6f77616e6365",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4514:31:8",
																		"type": "",
																		"value": "ERC20: insufficient allowance"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4487:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4487:59:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4487:59:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4555:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4567:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4578:2:8",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4563:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4563:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4555:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4385:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4399:4:8",
														"type": ""
													}
												],
												"src": "4234:353:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4766:227:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4783:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4794:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4776:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4776:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4776:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4817:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4828:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4813:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4813:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4833:2:8",
																		"type": "",
																		"value": "37"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4806:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4806:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4806:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4856:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4867:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4852:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4852:18:8"
																	},
																	{
																		"hexValue": "45524332303a207472616e736665722066726f6d20746865207a65726f206164",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4872:34:8",
																		"type": "",
																		"value": "ERC20: transfer from the zero ad"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4845:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4845:62:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4845:62:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4927:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4938:2:8",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4923:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4923:18:8"
																	},
																	{
																		"hexValue": "6472657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4943:7:8",
																		"type": "",
																		"value": "dress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4916:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4916:35:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4916:35:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4960:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4972:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4983:3:8",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4968:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4968:19:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4960:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4743:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4757:4:8",
														"type": ""
													}
												],
												"src": "4592:401:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5172:225:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5189:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5200:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5182:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5182:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5182:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5223:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5234:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5219:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5219:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5239:2:8",
																		"type": "",
																		"value": "35"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5212:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5212:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5212:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5262:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5273:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5258:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5258:18:8"
																	},
																	{
																		"hexValue": "45524332303a207472616e7366657220746f20746865207a65726f2061646472",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5278:34:8",
																		"type": "",
																		"value": "ERC20: transfer to the zero addr"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5251:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5251:62:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5251:62:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5333:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5344:2:8",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5329:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5329:18:8"
																	},
																	{
																		"hexValue": "657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5349:5:8",
																		"type": "",
																		"value": "ess"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5322:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5322:33:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5322:33:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5364:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5376:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5387:3:8",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5372:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5372:19:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5364:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5149:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5163:4:8",
														"type": ""
													}
												],
												"src": "4998:399:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5576:228:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5593:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5604:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5586:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5586:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5586:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5627:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5638:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5623:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5623:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5643:2:8",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5616:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5616:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5616:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5666:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5677:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5662:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5662:18:8"
																	},
																	{
																		"hexValue": "45524332303a207472616e7366657220616d6f756e7420657863656564732062",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5682:34:8",
																		"type": "",
																		"value": "ERC20: transfer amount exceeds b"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5655:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5655:62:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5655:62:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5737:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5748:2:8",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5733:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5733:18:8"
																	},
																	{
																		"hexValue": "616c616e6365",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5753:8:8",
																		"type": "",
																		"value": "alance"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5726:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5726:36:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5726:36:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5771:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5783:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5794:3:8",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5779:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5779:19:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5771:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5553:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5567:4:8",
														"type": ""
													}
												],
												"src": "5402:402:8"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        mstore(headStart, _1)\n        let length := mload(value0)\n        mstore(add(headStart, _1), length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, _1) }\n        {\n            mstore(add(add(headStart, i), 64), mload(add(add(value0, i), _1)))\n        }\n        if gt(i, length)\n        {\n            mstore(add(add(headStart, length), 64), 0)\n        }\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n        sum := add(x, y)\n    }\n    function abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: decreased allowance below\")\n        mstore(add(headStart, 96), \" zero\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC20: approve from the zero add\")\n        mstore(add(headStart, 96), \"ress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ERC20: approve to the zero addre\")\n        mstore(add(headStart, 96), \"ss\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"ERC20: insufficient allowance\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: transfer from the zero ad\")\n        mstore(add(headStart, 96), \"dress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 35)\n        mstore(add(headStart, 64), \"ERC20: transfer to the zero addr\")\n        mstore(add(headStart, 96), \"ess\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"ERC20: transfer amount exceeds b\")\n        mstore(add(headStart, 96), \"alance\")\n        tail := add(headStart, 128)\n    }\n}",
									"id": 8,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461012357806370a082311461013657806395d89b411461015f578063a457c2d714610167578063a9059cbb1461017a578063dd62ed3e1461018d57600080fd5b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ef57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b66101a0565b6040516100c391906106c4565b60405180910390f35b6100df6100da366004610735565b610232565b60405190151581526020016100c3565b6035545b6040519081526020016100c3565b6100df61010f36600461075f565b61024a565b604051601281526020016100c3565b6100df610131366004610735565b61026e565b6100f361014436600461079b565b6001600160a01b031660009081526033602052604090205490565b6100b6610290565b6100df610175366004610735565b61029f565b6100df610188366004610735565b61031f565b6100f361019b3660046107bd565b61032d565b6060603680546101af906107f0565b80601f01602080910402602001604051908101604052809291908181526020018280546101db906107f0565b80156102285780601f106101fd57610100808354040283529160200191610228565b820191906000526020600020905b81548152906001019060200180831161020b57829003601f168201915b5050505050905090565b600033610240818585610358565b5060019392505050565b60003361025885828561047c565b6102638585856104f6565b506001949350505050565b600033610240818585610281838361032d565b61028b919061082b565b610358565b6060603780546101af906107f0565b600033816102ad828661032d565b9050838110156103125760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b6102638286868403610358565b6000336102408185856104f6565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b6001600160a01b0383166103ba5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610309565b6001600160a01b03821661041b5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610309565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000610488848461032d565b905060001981146104f057818110156104e35760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610309565b6104f08484848403610358565b50505050565b6001600160a01b03831661055a5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610309565b6001600160a01b0382166105bc5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610309565b6001600160a01b038316600090815260336020526040902054818110156106345760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610309565b6001600160a01b0380851660009081526033602052604080822085850390559185168152908120805484929061066b90849061082b565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516106b791815260200190565b60405180910390a36104f0565b600060208083528351808285015260005b818110156106f1578581018301518582016040015282016106d5565b81811115610703576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461073057600080fd5b919050565b6000806040838503121561074857600080fd5b61075183610719565b946020939093013593505050565b60008060006060848603121561077457600080fd5b61077d84610719565b925061078b60208501610719565b9150604084013590509250925092565b6000602082840312156107ad57600080fd5b6107b682610719565b9392505050565b600080604083850312156107d057600080fd5b6107d983610719565b91506107e760208401610719565b90509250929050565b600181811c9082168061080457607f821691505b6020821081141561082557634e487b7160e01b600052602260045260246000fd5b50919050565b6000821982111561084c57634e487b7160e01b600052601160045260246000fd5b50019056fea2646970667358221220201226ba3962a64cd3b351151a00b90bf3e70ebac6945ae90df61c58329f18b664736f6c634300080b0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x123 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x136 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x15F JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x167 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x17A JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x18D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xCC JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xEF JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x101 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x114 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x1A0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0x6C4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xDF PUSH2 0xDA CALLDATASIZE PUSH1 0x4 PUSH2 0x735 JUMP JUMPDEST PUSH2 0x232 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH1 0x35 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x10F CALLDATASIZE PUSH1 0x4 PUSH2 0x75F JUMP JUMPDEST PUSH2 0x24A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x131 CALLDATASIZE PUSH1 0x4 PUSH2 0x735 JUMP JUMPDEST PUSH2 0x26E JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x144 CALLDATASIZE PUSH1 0x4 PUSH2 0x79B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xB6 PUSH2 0x290 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x175 CALLDATASIZE PUSH1 0x4 PUSH2 0x735 JUMP JUMPDEST PUSH2 0x29F JUMP JUMPDEST PUSH2 0xDF PUSH2 0x188 CALLDATASIZE PUSH1 0x4 PUSH2 0x735 JUMP JUMPDEST PUSH2 0x31F JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x19B CALLDATASIZE PUSH1 0x4 PUSH2 0x7BD JUMP JUMPDEST PUSH2 0x32D JUMP JUMPDEST PUSH1 0x60 PUSH1 0x36 DUP1 SLOAD PUSH2 0x1AF SWAP1 PUSH2 0x7F0 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1DB SWAP1 PUSH2 0x7F0 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x228 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1FD JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x228 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x20B JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x240 DUP2 DUP6 DUP6 PUSH2 0x358 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x258 DUP6 DUP3 DUP6 PUSH2 0x47C JUMP JUMPDEST PUSH2 0x263 DUP6 DUP6 DUP6 PUSH2 0x4F6 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x240 DUP2 DUP6 DUP6 PUSH2 0x281 DUP4 DUP4 PUSH2 0x32D JUMP JUMPDEST PUSH2 0x28B SWAP2 SWAP1 PUSH2 0x82B JUMP JUMPDEST PUSH2 0x358 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x37 DUP1 SLOAD PUSH2 0x1AF SWAP1 PUSH2 0x7F0 JUMP JUMPDEST PUSH1 0x0 CALLER DUP2 PUSH2 0x2AD DUP3 DUP7 PUSH2 0x32D JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x312 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x263 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x358 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x240 DUP2 DUP6 DUP6 PUSH2 0x4F6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x3BA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x41B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x488 DUP5 DUP5 PUSH2 0x32D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 NOT DUP2 EQ PUSH2 0x4F0 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x4E3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x309 JUMP JUMPDEST PUSH2 0x4F0 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x358 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x55A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x5BC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x634 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP2 DUP6 AND DUP2 MSTORE SWAP1 DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x66B SWAP1 DUP5 SWAP1 PUSH2 0x82B JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x6B7 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x4F0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x6F1 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x6D5 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x703 JUMPI PUSH1 0x0 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x730 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x748 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x751 DUP4 PUSH2 0x719 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x774 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x77D DUP5 PUSH2 0x719 JUMP JUMPDEST SWAP3 POP PUSH2 0x78B PUSH1 0x20 DUP6 ADD PUSH2 0x719 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x7AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7B6 DUP3 PUSH2 0x719 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x7D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7D9 DUP4 PUSH2 0x719 JUMP JUMPDEST SWAP2 POP PUSH2 0x7E7 PUSH1 0x20 DUP5 ADD PUSH2 0x719 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x804 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x825 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x84C JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 KECCAK256 SLT 0x26 0xBA CODECOPY PUSH3 0xA64CD3 0xB3 MLOAD ISZERO BYTE STOP 0xB9 SIGNEXTEND RETURN 0xE7 0xE 0xBA 0xC6 SWAP5 GAS 0xE9 0xD 0xF6 SHR PC ORIGIN SWAP16 XOR 0xB6 PUSH5 0x736F6C6343 STOP ADDMOD SIGNEXTEND STOP CALLER ",
							"sourceMap": "1482:11763:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2493:98;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4770:197;;;;;;:::i;:::-;;:::i;:::-;;;1218:14:8;;1211:22;1193:41;;1181:2;1166:18;4770:197:2;1053:187:8;3581:106:2;3668:12;;3581:106;;;1391:25:8;;;1379:2;1364:18;3581:106:2;1245:177:8;5529:286:2;;;;;;:::i;:::-;;:::i;3430:91::-;;;3512:2;1902:36:8;;1890:2;1875:18;3430:91:2;1760:184:8;6210:234:2;;;;;;:::i;:::-;;:::i;3745:125::-;;;;;;:::i;:::-;-1:-1:-1;;;;;3845:18:2;3819:7;3845:18;;;:9;:18;;;;;;;3745:125;2704:102;;;:::i;6931:427::-;;;;;;:::i;:::-;;:::i;4066:189::-;;;;;;:::i;:::-;;:::i;4313:149::-;;;;;;:::i;:::-;;:::i;2493:98::-;2547:13;2579:5;2572:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2493:98;:::o;4770:197::-;4853:4;929:10:6;4907:32:2;929:10:6;4923:7:2;4932:6;4907:8;:32::i;:::-;-1:-1:-1;4956:4:2;;4770:197;-1:-1:-1;;;4770:197:2:o;5529:286::-;5656:4;929:10:6;5712:38:2;5728:4;929:10:6;5743:6:2;5712:15;:38::i;:::-;5760:27;5770:4;5776:2;5780:6;5760:9;:27::i;:::-;-1:-1:-1;5804:4:2;;5529:286;-1:-1:-1;;;;5529:286:2:o;6210:234::-;6298:4;929:10:6;6352:64:2;929:10:6;6368:7:2;6405:10;6377:25;929:10:6;6368:7:2;6377:9;:25::i;:::-;:38;;;;:::i;:::-;6352:8;:64::i;2704:102::-;2760:13;2792:7;2785:14;;;;;:::i;6931:427::-;7024:4;929:10:6;7024:4:2;7105:25;929:10:6;7122:7:2;7105:9;:25::i;:::-;7078:52;;7168:15;7148:16;:35;;7140:85;;;;-1:-1:-1;;;7140:85:2;;3222:2:8;7140:85:2;;;3204:21:8;3261:2;3241:18;;;3234:30;3300:34;3280:18;;;3273:62;-1:-1:-1;;;3351:18:8;;;3344:35;3396:19;;7140:85:2;;;;;;;;;7259:60;7268:5;7275:7;7303:15;7284:16;:34;7259:8;:60::i;4066:189::-;4145:4;929:10:6;4199:28:2;929:10:6;4216:2:2;4220:6;4199:9;:28::i;4313:149::-;-1:-1:-1;;;;;4428:18:2;;;4402:7;4428:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;4313:149::o;10447:370::-;-1:-1:-1;;;;;10578:19:2;;10570:68;;;;-1:-1:-1;;;10570:68:2;;3628:2:8;10570:68:2;;;3610:21:8;3667:2;3647:18;;;3640:30;3706:34;3686:18;;;3679:62;-1:-1:-1;;;3757:18:8;;;3750:34;3801:19;;10570:68:2;3426:400:8;10570:68:2;-1:-1:-1;;;;;10656:21:2;;10648:68;;;;-1:-1:-1;;;10648:68:2;;4033:2:8;10648:68:2;;;4015:21:8;4072:2;4052:18;;;4045:30;4111:34;4091:18;;;4084:62;-1:-1:-1;;;4162:18:8;;;4155:32;4204:19;;10648:68:2;3831:398:8;10648:68:2;-1:-1:-1;;;;;10727:18:2;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;10778:32;;1391:25:8;;;10778:32:2;;1364:18:8;10778:32:2;;;;;;;10447:370;;;:::o;11098:441::-;11228:24;11255:25;11265:5;11272:7;11255:9;:25::i;:::-;11228:52;;-1:-1:-1;;11294:16:2;:37;11290:243;;11375:6;11355:16;:26;;11347:68;;;;-1:-1:-1;;;11347:68:2;;4436:2:8;11347:68:2;;;4418:21:8;4475:2;4455:18;;;4448:30;4514:31;4494:18;;;4487:59;4563:18;;11347:68:2;4234:353:8;11347:68:2;11457:51;11466:5;11473:7;11501:6;11482:16;:25;11457:8;:51::i;:::-;11218:321;11098:441;;;:::o;7812:651::-;-1:-1:-1;;;;;7938:18:2;;7930:68;;;;-1:-1:-1;;;7930:68:2;;4794:2:8;7930:68:2;;;4776:21:8;4833:2;4813:18;;;4806:30;4872:34;4852:18;;;4845:62;-1:-1:-1;;;4923:18:8;;;4916:35;4968:19;;7930:68:2;4592:401:8;7930:68:2;-1:-1:-1;;;;;8016:16:2;;8008:64;;;;-1:-1:-1;;;8008:64:2;;5200:2:8;8008:64:2;;;5182:21:8;5239:2;5219:18;;;5212:30;5278:34;5258:18;;;5251:62;-1:-1:-1;;;5329:18:8;;;5322:33;5372:19;;8008:64:2;4998:399:8;8008:64:2;-1:-1:-1;;;;;8154:15:2;;8132:19;8154:15;;;:9;:15;;;;;;8187:21;;;;8179:72;;;;-1:-1:-1;;;8179:72:2;;5604:2:8;8179:72:2;;;5586:21:8;5643:2;5623:18;;;5616:30;5682:34;5662:18;;;5655:62;-1:-1:-1;;;5733:18:8;;;5726:36;5779:19;;8179:72:2;5402:402:8;8179:72:2;-1:-1:-1;;;;;8285:15:2;;;;;;;:9;:15;;;;;;8303:20;;;8285:38;;8343:13;;;;;;;;:23;;8317:6;;8285:15;8343:23;;8317:6;;8343:23;:::i;:::-;;;;;;;;8397:2;-1:-1:-1;;;;;8382:26:2;8391:4;-1:-1:-1;;;;;8382:26:2;;8401:6;8382:26;;;;1391:25:8;;1379:2;1364:18;;1245:177;8382:26:2;;;;;;;;8419:37;12123:121;14:597:8;126:4;155:2;184;173:9;166:21;216:6;210:13;259:6;254:2;243:9;239:18;232:34;284:1;294:140;308:6;305:1;302:13;294:140;;;403:14;;;399:23;;393:30;369:17;;;388:2;365:26;358:66;323:10;;294:140;;;452:6;449:1;446:13;443:91;;;522:1;517:2;508:6;497:9;493:22;489:31;482:42;443:91;-1:-1:-1;595:2:8;574:15;-1:-1:-1;;570:29:8;555:45;;;;602:2;551:54;;14:597;-1:-1:-1;;;14:597:8:o;616:173::-;684:20;;-1:-1:-1;;;;;733:31:8;;723:42;;713:70;;779:1;776;769:12;713:70;616:173;;;:::o;794:254::-;862:6;870;923:2;911:9;902:7;898:23;894:32;891:52;;;939:1;936;929:12;891:52;962:29;981:9;962:29;:::i;:::-;952:39;1038:2;1023:18;;;;1010:32;;-1:-1:-1;;;794:254:8:o;1427:328::-;1504:6;1512;1520;1573:2;1561:9;1552:7;1548:23;1544:32;1541:52;;;1589:1;1586;1579:12;1541:52;1612:29;1631:9;1612:29;:::i;:::-;1602:39;;1660:38;1694:2;1683:9;1679:18;1660:38;:::i;:::-;1650:48;;1745:2;1734:9;1730:18;1717:32;1707:42;;1427:328;;;;;:::o;1949:186::-;2008:6;2061:2;2049:9;2040:7;2036:23;2032:32;2029:52;;;2077:1;2074;2067:12;2029:52;2100:29;2119:9;2100:29;:::i;:::-;2090:39;1949:186;-1:-1:-1;;;1949:186:8:o;2140:260::-;2208:6;2216;2269:2;2257:9;2248:7;2244:23;2240:32;2237:52;;;2285:1;2282;2275:12;2237:52;2308:29;2327:9;2308:29;:::i;:::-;2298:39;;2356:38;2390:2;2379:9;2375:18;2356:38;:::i;:::-;2346:48;;2140:260;;;;;:::o;2405:380::-;2484:1;2480:12;;;;2527;;;2548:61;;2602:4;2594:6;2590:17;2580:27;;2548:61;2655:2;2647:6;2644:14;2624:18;2621:38;2618:161;;;2701:10;2696:3;2692:20;2689:1;2682:31;2736:4;2733:1;2726:15;2764:4;2761:1;2754:15;2618:161;;2405:380;;;:::o;2790:225::-;2830:3;2861:1;2857:6;2854:1;2851:13;2848:136;;;2906:10;2901:3;2897:20;2894:1;2887:31;2941:4;2938:1;2931:15;2969:4;2966:1;2959:15;2848:136;-1:-1:-1;3000:9:8;;2790:225::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "436600",
								"executionCost": "474",
								"totalCost": "437074"
							},
							"external": {
								"allowance(address,address)": "infinite",
								"approve(address,uint256)": "24624",
								"balanceOf(address)": "2559",
								"decimals()": "266",
								"decreaseAllowance(address,uint256)": "27016",
								"increaseAllowance(address,uint256)": "26978",
								"name()": "infinite",
								"symbol()": "infinite",
								"totalSupply()": "2326",
								"transfer(address,uint256)": "51264",
								"transferFrom(address,address,uint256)": "infinite"
							},
							"internal": {
								"__ERC20_init(string memory,string memory)": "infinite",
								"__ERC20_init_unchained(string memory,string memory)": "infinite",
								"_afterTokenTransfer(address,address,uint256)": "infinite",
								"_approve(address,address,uint256)": "infinite",
								"_beforeTokenTransfer(address,address,uint256)": "infinite",
								"_burn(address,uint256)": "infinite",
								"_mint(address,uint256)": "infinite",
								"_spendAllowance(address,address,uint256)": "infinite",
								"_transfer(address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 1482,
									"end": 13245,
									"name": "PUSH",
									"source": 2,
									"value": "80"
								},
								{
									"begin": 1482,
									"end": 13245,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 1482,
									"end": 13245,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1482,
									"end": 13245,
									"name": "CALLVALUE",
									"source": 2
								},
								{
									"begin": 1482,
									"end": 13245,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1482,
									"end": 13245,
									"name": "ISZERO",
									"source": 2
								},
								{
									"begin": 1482,
									"end": 13245,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 1482,
									"end": 13245,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 1482,
									"end": 13245,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 1482,
									"end": 13245,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1482,
									"end": 13245,
									"name": "REVERT",
									"source": 2
								},
								{
									"begin": 1482,
									"end": 13245,
									"name": "tag",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 1482,
									"end": 13245,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1482,
									"end": 13245,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1482,
									"end": 13245,
									"name": "PUSH #[$]",
									"source": 2,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1482,
									"end": 13245,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1482,
									"end": 13245,
									"name": "PUSH [$]",
									"source": 2,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1482,
									"end": 13245,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 1482,
									"end": 13245,
									"name": "CODECOPY",
									"source": 2
								},
								{
									"begin": 1482,
									"end": 13245,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 1482,
									"end": 13245,
									"name": "RETURN",
									"source": 2
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220201226ba3962a64cd3b351151a00b90bf3e70ebac6945ae90df61c58329f18b664736f6c634300080b0033",
									".code": [
										{
											"begin": 1482,
											"end": 13245,
											"name": "PUSH",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "tag",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "PUSH",
											"source": 2,
											"value": "E0"
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "SHR",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "PUSH",
											"source": 2,
											"value": "39509351"
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "PUSH",
											"source": 2,
											"value": "39509351"
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "8"
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "PUSH",
											"source": 2,
											"value": "70A08231"
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "9"
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "PUSH",
											"source": 2,
											"value": "95D89B41"
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "10"
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "PUSH",
											"source": 2,
											"value": "A457C2D7"
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "PUSH",
											"source": 2,
											"value": "A9059CBB"
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "PUSH",
											"source": 2,
											"value": "DD62ED3E"
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "13"
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "tag",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "PUSH",
											"source": 2,
											"value": "6FDDE03"
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "PUSH",
											"source": 2,
											"value": "95EA7B3"
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "PUSH",
											"source": 2,
											"value": "18160DDD"
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "PUSH",
											"source": 2,
											"value": "23B872DD"
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "PUSH",
											"source": 2,
											"value": "313CE567"
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "7"
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "tag",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 13245,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "tag",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "16"
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "tag",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "17"
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "18"
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "tag",
											"source": 2,
											"value": "17"
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "tag",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "19"
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "tag",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "22"
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "tag",
											"source": 2,
											"value": "19"
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1218,
											"end": 1232,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1218,
											"end": 1232,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1211,
											"end": 1233,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1193,
											"end": 1234,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1193,
											"end": 1234,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1181,
											"end": 1183,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1166,
											"end": 1184,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "17"
										},
										{
											"begin": 1053,
											"end": 1240,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3581,
											"end": 3687,
											"name": "tag",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 3581,
											"end": 3687,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3668,
											"end": 3680,
											"name": "PUSH",
											"source": 2,
											"value": "35"
										},
										{
											"begin": 3668,
											"end": 3680,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 3581,
											"end": 3687,
											"name": "tag",
											"source": 2,
											"value": "25"
										},
										{
											"begin": 3581,
											"end": 3687,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3581,
											"end": 3687,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3581,
											"end": 3687,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1391,
											"end": 1416,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1391,
											"end": 1416,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1391,
											"end": 1416,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1379,
											"end": 1381,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1364,
											"end": 1382,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3581,
											"end": 3687,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "17"
										},
										{
											"begin": 1245,
											"end": 1422,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "tag",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "19"
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "30"
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "31"
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "tag",
											"source": 2,
											"value": "30"
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3430,
											"end": 3521,
											"name": "tag",
											"source": 2,
											"value": "7"
										},
										{
											"begin": 3430,
											"end": 3521,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3430,
											"end": 3521,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3430,
											"end": 3521,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3512,
											"end": 3514,
											"name": "PUSH",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 1902,
											"end": 1938,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1902,
											"end": 1938,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1890,
											"end": 1892,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1875,
											"end": 1893,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3430,
											"end": 3521,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "17"
										},
										{
											"begin": 1760,
											"end": 1944,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "tag",
											"source": 2,
											"value": "8"
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "19"
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "39"
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "tag",
											"source": 2,
											"value": "39"
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "tag",
											"source": 2,
											"value": "9"
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "25"
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "43"
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "44"
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "tag",
											"source": 2,
											"value": "43"
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3845,
											"end": 3863,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3819,
											"end": 3826,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3845,
											"end": 3863,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3845,
											"end": 3863,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3845,
											"end": 3863,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3845,
											"end": 3854,
											"name": "PUSH",
											"source": 2,
											"value": "33"
										},
										{
											"begin": 3845,
											"end": 3863,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3845,
											"end": 3863,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3845,
											"end": 3863,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3845,
											"end": 3863,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3845,
											"end": 3863,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 3845,
											"end": 3863,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 3845,
											"end": 3863,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2704,
											"end": 2806,
											"name": "tag",
											"source": 2,
											"value": "10"
										},
										{
											"begin": 2704,
											"end": 2806,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2704,
											"end": 2806,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 2704,
											"end": 2806,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "48"
										},
										{
											"begin": 2704,
											"end": 2806,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "tag",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "19"
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "51"
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "tag",
											"source": 2,
											"value": "51"
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "52"
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "tag",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "19"
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "55"
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "tag",
											"source": 2,
											"value": "55"
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "56"
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "tag",
											"source": 2,
											"value": "13"
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "25"
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "59"
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "tag",
											"source": 2,
											"value": "59"
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "61"
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "tag",
											"source": 2,
											"value": "16"
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2547,
											"end": 2560,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 2579,
											"end": 2584,
											"name": "PUSH",
											"source": 2,
											"value": "36"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "65"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "tag",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "66"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "65"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "tag",
											"source": 2,
											"value": "66"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "67"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "68"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "67"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "tag",
											"source": 2,
											"value": "68"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "tag",
											"source": 2,
											"value": "69"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "69"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "tag",
											"source": 2,
											"value": "67"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "tag",
											"source": 2,
											"value": "22"
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4853,
											"end": 4857,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 4907,
											"end": 4939,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "73"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4923,
											"end": 4930,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 4932,
											"end": 4938,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 4907,
											"end": 4915,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "74"
										},
										{
											"begin": 4907,
											"end": 4939,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 4907,
											"end": 4939,
											"name": "tag",
											"source": 2,
											"value": "73"
										},
										{
											"begin": 4907,
											"end": 4939,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4956,
											"end": 4960,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 4956,
											"end": 4960,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "tag",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5656,
											"end": 5660,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 5712,
											"end": 5750,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "78"
										},
										{
											"begin": 5728,
											"end": 5732,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 929,
											"end": 939,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5743,
											"end": 5749,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 5712,
											"end": 5727,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "79"
										},
										{
											"begin": 5712,
											"end": 5750,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 5712,
											"end": 5750,
											"name": "tag",
											"source": 2,
											"value": "78"
										},
										{
											"begin": 5712,
											"end": 5750,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5760,
											"end": 5787,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 5770,
											"end": 5774,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 5776,
											"end": 5778,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 5780,
											"end": 5786,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 5760,
											"end": 5769,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "81"
										},
										{
											"begin": 5760,
											"end": 5787,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 5760,
											"end": 5787,
											"name": "tag",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 5760,
											"end": 5787,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5804,
											"end": 5808,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 5804,
											"end": 5808,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "tag",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6298,
											"end": 6302,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 6352,
											"end": 6416,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "73"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6368,
											"end": 6375,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 6405,
											"end": 6415,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 6377,
											"end": 6402,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "86"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 6368,
											"end": 6375,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 6377,
											"end": 6386,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "61"
										},
										{
											"begin": 6377,
											"end": 6402,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 6377,
											"end": 6402,
											"name": "tag",
											"source": 2,
											"value": "86"
										},
										{
											"begin": 6377,
											"end": 6402,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6377,
											"end": 6415,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "87"
										},
										{
											"begin": 6377,
											"end": 6415,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6377,
											"end": 6415,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6377,
											"end": 6415,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "88"
										},
										{
											"begin": 6377,
											"end": 6415,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 6377,
											"end": 6415,
											"name": "tag",
											"source": 2,
											"value": "87"
										},
										{
											"begin": 6377,
											"end": 6415,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6352,
											"end": 6360,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "74"
										},
										{
											"begin": 6352,
											"end": 6416,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2704,
											"end": 2806,
											"name": "tag",
											"source": 2,
											"value": "48"
										},
										{
											"begin": 2704,
											"end": 2806,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2760,
											"end": 2773,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 2792,
											"end": 2799,
											"name": "PUSH",
											"source": 2,
											"value": "37"
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "65"
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "tag",
											"source": 2,
											"value": "52"
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7024,
											"end": 7028,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 7024,
											"end": 7028,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7105,
											"end": 7130,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "98"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7122,
											"end": 7129,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 7105,
											"end": 7114,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "61"
										},
										{
											"begin": 7105,
											"end": 7130,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 7105,
											"end": 7130,
											"name": "tag",
											"source": 2,
											"value": "98"
										},
										{
											"begin": 7105,
											"end": 7130,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7078,
											"end": 7130,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7078,
											"end": 7130,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7168,
											"end": 7183,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 7148,
											"end": 7164,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7148,
											"end": 7183,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 7148,
											"end": 7183,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "99"
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3222,
											"end": 3224,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3204,
											"end": 3225,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3261,
											"end": 3263,
											"name": "PUSH",
											"source": 8,
											"value": "25"
										},
										{
											"begin": 3241,
											"end": 3259,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 3241,
											"end": 3259,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3241,
											"end": 3259,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3234,
											"end": 3264,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3300,
											"end": 3334,
											"name": "PUSH",
											"source": 8,
											"value": "45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77"
										},
										{
											"begin": 3280,
											"end": 3298,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 3280,
											"end": 3298,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3280,
											"end": 3298,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3273,
											"end": 3335,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "207A65726F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3351,
											"end": 3369,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 3351,
											"end": 3369,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3351,
											"end": 3369,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3344,
											"end": 3379,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3396,
											"end": 3415,
											"name": "PUSH",
											"source": 8,
											"value": "84"
										},
										{
											"begin": 3396,
											"end": 3415,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "tag",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "tag",
											"source": 2,
											"value": "99"
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7259,
											"end": 7319,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 7268,
											"end": 7273,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7275,
											"end": 7282,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 7303,
											"end": 7318,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 7284,
											"end": 7300,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 7284,
											"end": 7318,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 7259,
											"end": 7267,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "74"
										},
										{
											"begin": 7259,
											"end": 7319,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "tag",
											"source": 2,
											"value": "56"
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4145,
											"end": 4149,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 4199,
											"end": 4227,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "73"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4216,
											"end": 4218,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 4220,
											"end": 4226,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 4199,
											"end": 4208,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "81"
										},
										{
											"begin": 4199,
											"end": 4227,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "tag",
											"source": 2,
											"value": "61"
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4428,
											"end": 4446,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4428,
											"end": 4446,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 4428,
											"end": 4446,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 4402,
											"end": 4409,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4428,
											"end": 4446,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4428,
											"end": 4446,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4428,
											"end": 4446,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4428,
											"end": 4439,
											"name": "PUSH",
											"source": 2,
											"value": "34"
										},
										{
											"begin": 4428,
											"end": 4446,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 4428,
											"end": 4446,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4428,
											"end": 4446,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4428,
											"end": 4446,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4428,
											"end": 4446,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4428,
											"end": 4446,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4428,
											"end": 4446,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 4428,
											"end": 4446,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 4428,
											"end": 4455,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 4428,
											"end": 4455,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4428,
											"end": 4455,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 4428,
											"end": 4455,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 4428,
											"end": 4455,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 4428,
											"end": 4455,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4428,
											"end": 4455,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4428,
											"end": 4455,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4428,
											"end": 4455,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4428,
											"end": 4455,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4428,
											"end": 4455,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 4428,
											"end": 4455,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 4428,
											"end": 4455,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 10447,
											"end": 10817,
											"name": "tag",
											"source": 2,
											"value": "74"
										},
										{
											"begin": 10447,
											"end": 10817,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10578,
											"end": 10597,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 10578,
											"end": 10597,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 10570,
											"end": 10638,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "109"
										},
										{
											"begin": 10570,
											"end": 10638,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 10570,
											"end": 10638,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 10570,
											"end": 10638,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10570,
											"end": 10638,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10570,
											"end": 10638,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3628,
											"end": 3630,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 10570,
											"end": 10638,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 10570,
											"end": 10638,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 10570,
											"end": 10638,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3610,
											"end": 3631,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3667,
											"end": 3669,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 3647,
											"end": 3665,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3647,
											"end": 3665,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3647,
											"end": 3665,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3640,
											"end": 3670,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3706,
											"end": 3740,
											"name": "PUSH",
											"source": 8,
											"value": "45524332303A20617070726F76652066726F6D20746865207A65726F20616464"
										},
										{
											"begin": 3686,
											"end": 3704,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 3686,
											"end": 3704,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3686,
											"end": 3704,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3679,
											"end": 3741,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "72657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3757,
											"end": 3775,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 3757,
											"end": 3775,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3757,
											"end": 3775,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3750,
											"end": 3784,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3801,
											"end": 3820,
											"name": "PUSH",
											"source": 8,
											"value": "84"
										},
										{
											"begin": 3801,
											"end": 3820,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 10570,
											"end": 10638,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 3426,
											"end": 3826,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 10570,
											"end": 10638,
											"name": "tag",
											"source": 2,
											"value": "109"
										},
										{
											"begin": 10570,
											"end": 10638,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10656,
											"end": 10677,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 10656,
											"end": 10677,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 10648,
											"end": 10716,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "112"
										},
										{
											"begin": 10648,
											"end": 10716,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 10648,
											"end": 10716,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 10648,
											"end": 10716,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10648,
											"end": 10716,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10648,
											"end": 10716,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4033,
											"end": 4035,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 10648,
											"end": 10716,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 10648,
											"end": 10716,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 10648,
											"end": 10716,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4015,
											"end": 4036,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4072,
											"end": 4074,
											"name": "PUSH",
											"source": 8,
											"value": "22"
										},
										{
											"begin": 4052,
											"end": 4070,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 4052,
											"end": 4070,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4052,
											"end": 4070,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4045,
											"end": 4075,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4111,
											"end": 4145,
											"name": "PUSH",
											"source": 8,
											"value": "45524332303A20617070726F766520746F20746865207A65726F206164647265"
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4084,
											"end": 4146,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "7373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4162,
											"end": 4180,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 4162,
											"end": 4180,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4162,
											"end": 4180,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4155,
											"end": 4187,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4204,
											"end": 4223,
											"name": "PUSH",
											"source": 8,
											"value": "84"
										},
										{
											"begin": 4204,
											"end": 4223,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 10648,
											"end": 10716,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 3831,
											"end": 4229,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 10648,
											"end": 10716,
											"name": "tag",
											"source": 2,
											"value": "112"
										},
										{
											"begin": 10648,
											"end": 10716,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10727,
											"end": 10745,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 10727,
											"end": 10745,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10727,
											"end": 10745,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 10727,
											"end": 10745,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10727,
											"end": 10745,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10727,
											"end": 10745,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10727,
											"end": 10745,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 10727,
											"end": 10738,
											"name": "PUSH",
											"source": 2,
											"value": "34"
										},
										{
											"begin": 10727,
											"end": 10745,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 10727,
											"end": 10745,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10727,
											"end": 10745,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10727,
											"end": 10745,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 10727,
											"end": 10745,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 10727,
											"end": 10745,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10727,
											"end": 10745,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 10727,
											"end": 10745,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 10727,
											"end": 10754,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 10727,
											"end": 10754,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 10727,
											"end": 10754,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 10727,
											"end": 10754,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10727,
											"end": 10754,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 10727,
											"end": 10754,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 10727,
											"end": 10754,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 10727,
											"end": 10754,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 10727,
											"end": 10754,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 10727,
											"end": 10754,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 10727,
											"end": 10754,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 10727,
											"end": 10754,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10727,
											"end": 10754,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 10727,
											"end": 10763,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 10727,
											"end": 10763,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10727,
											"end": 10763,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 10778,
											"end": 10810,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10778,
											"end": 10810,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1391,
											"end": 1416,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 1391,
											"end": 1416,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1391,
											"end": 1416,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 10778,
											"end": 10810,
											"name": "PUSH",
											"source": 2,
											"value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
										},
										{
											"begin": 10778,
											"end": 10810,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1364,
											"end": 1382,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 10778,
											"end": 10810,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 10778,
											"end": 10810,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 10778,
											"end": 10810,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10778,
											"end": 10810,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 10778,
											"end": 10810,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 10778,
											"end": 10810,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10778,
											"end": 10810,
											"name": "LOG3",
											"source": 2
										},
										{
											"begin": 10447,
											"end": 10817,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10447,
											"end": 10817,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10447,
											"end": 10817,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10447,
											"end": 10817,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 11098,
											"end": 11539,
											"name": "tag",
											"source": 2,
											"value": "79"
										},
										{
											"begin": 11098,
											"end": 11539,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11228,
											"end": 11252,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11255,
											"end": 11280,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "117"
										},
										{
											"begin": 11265,
											"end": 11270,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 11272,
											"end": 11279,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 11255,
											"end": 11264,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "61"
										},
										{
											"begin": 11255,
											"end": 11280,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 11255,
											"end": 11280,
											"name": "tag",
											"source": 2,
											"value": "117"
										},
										{
											"begin": 11255,
											"end": 11280,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11228,
											"end": 11280,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11228,
											"end": 11280,
											"name": "POP",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 11294,
											"end": 11310,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11294,
											"end": 11331,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 11290,
											"end": 11533,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "122"
										},
										{
											"begin": 11290,
											"end": 11533,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 11375,
											"end": 11381,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11355,
											"end": 11371,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11355,
											"end": 11381,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 11355,
											"end": 11381,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 11347,
											"end": 11415,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "119"
										},
										{
											"begin": 11347,
											"end": 11415,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 11347,
											"end": 11415,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 11347,
											"end": 11415,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11347,
											"end": 11415,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11347,
											"end": 11415,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4436,
											"end": 4438,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 11347,
											"end": 11415,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 11347,
											"end": 11415,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 11347,
											"end": 11415,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4418,
											"end": 4439,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4475,
											"end": 4477,
											"name": "PUSH",
											"source": 8,
											"value": "1D"
										},
										{
											"begin": 4455,
											"end": 4473,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 4455,
											"end": 4473,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4455,
											"end": 4473,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4448,
											"end": 4478,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4514,
											"end": 4545,
											"name": "PUSH",
											"source": 8,
											"value": "45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000"
										},
										{
											"begin": 4494,
											"end": 4512,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 4494,
											"end": 4512,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4494,
											"end": 4512,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4487,
											"end": 4546,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4563,
											"end": 4581,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 4563,
											"end": 4581,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 11347,
											"end": 11415,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 4234,
											"end": 4587,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 11347,
											"end": 11415,
											"name": "tag",
											"source": 2,
											"value": "119"
										},
										{
											"begin": 11347,
											"end": 11415,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11457,
											"end": 11508,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "122"
										},
										{
											"begin": 11466,
											"end": 11471,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 11473,
											"end": 11480,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 11501,
											"end": 11507,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 11482,
											"end": 11498,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 11482,
											"end": 11507,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 11457,
											"end": 11465,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "74"
										},
										{
											"begin": 11457,
											"end": 11508,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 11457,
											"end": 11508,
											"name": "tag",
											"source": 2,
											"value": "122"
										},
										{
											"begin": 11457,
											"end": 11508,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11218,
											"end": 11539,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11098,
											"end": 11539,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11098,
											"end": 11539,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11098,
											"end": 11539,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11098,
											"end": 11539,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 7812,
											"end": 8463,
											"name": "tag",
											"source": 2,
											"value": "81"
										},
										{
											"begin": 7812,
											"end": 8463,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7938,
											"end": 7956,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 7938,
											"end": 7956,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7930,
											"end": 7998,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "124"
										},
										{
											"begin": 7930,
											"end": 7998,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 7930,
											"end": 7998,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7930,
											"end": 7998,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7930,
											"end": 7998,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7930,
											"end": 7998,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4794,
											"end": 4796,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 7930,
											"end": 7998,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 7930,
											"end": 7998,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7930,
											"end": 7998,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4776,
											"end": 4797,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4833,
											"end": 4835,
											"name": "PUSH",
											"source": 8,
											"value": "25"
										},
										{
											"begin": 4813,
											"end": 4831,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 4813,
											"end": 4831,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4813,
											"end": 4831,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4806,
											"end": 4836,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4872,
											"end": 4906,
											"name": "PUSH",
											"source": 8,
											"value": "45524332303A207472616E736665722066726F6D20746865207A65726F206164"
										},
										{
											"begin": 4852,
											"end": 4870,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 4852,
											"end": 4870,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4852,
											"end": 4870,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4845,
											"end": 4907,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6472657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4923,
											"end": 4941,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 4923,
											"end": 4941,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4923,
											"end": 4941,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4916,
											"end": 4951,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4968,
											"end": 4987,
											"name": "PUSH",
											"source": 8,
											"value": "84"
										},
										{
											"begin": 4968,
											"end": 4987,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7930,
											"end": 7998,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 4592,
											"end": 4993,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 7930,
											"end": 7998,
											"name": "tag",
											"source": 2,
											"value": "124"
										},
										{
											"begin": 7930,
											"end": 7998,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8016,
											"end": 8032,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 8016,
											"end": 8032,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 8008,
											"end": 8072,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "127"
										},
										{
											"begin": 8008,
											"end": 8072,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 8008,
											"end": 8072,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 8008,
											"end": 8072,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8008,
											"end": 8072,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8008,
											"end": 8072,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5200,
											"end": 5202,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 8008,
											"end": 8072,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 8008,
											"end": 8072,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 8008,
											"end": 8072,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5182,
											"end": 5203,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5239,
											"end": 5241,
											"name": "PUSH",
											"source": 8,
											"value": "23"
										},
										{
											"begin": 5219,
											"end": 5237,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 5219,
											"end": 5237,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5219,
											"end": 5237,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5212,
											"end": 5242,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5278,
											"end": 5312,
											"name": "PUSH",
											"source": 8,
											"value": "45524332303A207472616E7366657220746F20746865207A65726F2061646472"
										},
										{
											"begin": 5258,
											"end": 5276,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 5258,
											"end": 5276,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5258,
											"end": 5276,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5251,
											"end": 5313,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5329,
											"end": 5347,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 5329,
											"end": 5347,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5329,
											"end": 5347,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5322,
											"end": 5355,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5372,
											"end": 5391,
											"name": "PUSH",
											"source": 8,
											"value": "84"
										},
										{
											"begin": 5372,
											"end": 5391,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8008,
											"end": 8072,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 4998,
											"end": 5397,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 8008,
											"end": 8072,
											"name": "tag",
											"source": 2,
											"value": "127"
										},
										{
											"begin": 8008,
											"end": 8072,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8154,
											"end": 8169,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 8154,
											"end": 8169,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 8132,
											"end": 8151,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 8154,
											"end": 8169,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8154,
											"end": 8169,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8154,
											"end": 8169,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8154,
											"end": 8163,
											"name": "PUSH",
											"source": 2,
											"value": "33"
										},
										{
											"begin": 8154,
											"end": 8169,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 8154,
											"end": 8169,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8154,
											"end": 8169,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 8154,
											"end": 8169,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8154,
											"end": 8169,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 8154,
											"end": 8169,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 8187,
											"end": 8208,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8187,
											"end": 8208,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8187,
											"end": 8208,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 8187,
											"end": 8208,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 8179,
											"end": 8251,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "132"
										},
										{
											"begin": 8179,
											"end": 8251,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 8179,
											"end": 8251,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 8179,
											"end": 8251,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8179,
											"end": 8251,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8179,
											"end": 8251,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5604,
											"end": 5606,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 8179,
											"end": 8251,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 8179,
											"end": 8251,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 8179,
											"end": 8251,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5586,
											"end": 5607,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5643,
											"end": 5645,
											"name": "PUSH",
											"source": 8,
											"value": "26"
										},
										{
											"begin": 5623,
											"end": 5641,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 5623,
											"end": 5641,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5623,
											"end": 5641,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5616,
											"end": 5646,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5682,
											"end": 5716,
											"name": "PUSH",
											"source": 8,
											"value": "45524332303A207472616E7366657220616D6F756E7420657863656564732062"
										},
										{
											"begin": 5662,
											"end": 5680,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 5662,
											"end": 5680,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5662,
											"end": 5680,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5655,
											"end": 5717,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "616C616E6365"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5733,
											"end": 5751,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 5733,
											"end": 5751,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5733,
											"end": 5751,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5726,
											"end": 5762,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5779,
											"end": 5798,
											"name": "PUSH",
											"source": 8,
											"value": "84"
										},
										{
											"begin": 5779,
											"end": 5798,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8179,
											"end": 8251,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 5402,
											"end": 5804,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 8179,
											"end": 8251,
											"name": "tag",
											"source": 2,
											"value": "132"
										},
										{
											"begin": 8179,
											"end": 8251,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8285,
											"end": 8300,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 8285,
											"end": 8300,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 8285,
											"end": 8300,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 8285,
											"end": 8300,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 8285,
											"end": 8300,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8285,
											"end": 8300,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8285,
											"end": 8300,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8285,
											"end": 8294,
											"name": "PUSH",
											"source": 2,
											"value": "33"
										},
										{
											"begin": 8285,
											"end": 8300,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 8285,
											"end": 8300,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8285,
											"end": 8300,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 8285,
											"end": 8300,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 8285,
											"end": 8300,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 8285,
											"end": 8300,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 8303,
											"end": 8323,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 8303,
											"end": 8323,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 8303,
											"end": 8323,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 8285,
											"end": 8323,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8285,
											"end": 8323,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 8343,
											"end": 8356,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 8343,
											"end": 8356,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 8343,
											"end": 8356,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 8343,
											"end": 8356,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8343,
											"end": 8356,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8343,
											"end": 8356,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8343,
											"end": 8356,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8343,
											"end": 8356,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 8343,
											"end": 8366,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 8343,
											"end": 8366,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 8317,
											"end": 8323,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 8317,
											"end": 8323,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 8285,
											"end": 8300,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8343,
											"end": 8366,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "135"
										},
										{
											"begin": 8343,
											"end": 8366,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8317,
											"end": 8323,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 8317,
											"end": 8323,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8343,
											"end": 8366,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "88"
										},
										{
											"begin": 8343,
											"end": 8366,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 8343,
											"end": 8366,
											"name": "tag",
											"source": 2,
											"value": "135"
										},
										{
											"begin": 8343,
											"end": 8366,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8343,
											"end": 8366,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 8343,
											"end": 8366,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 8343,
											"end": 8366,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 8343,
											"end": 8366,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8343,
											"end": 8366,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8343,
											"end": 8366,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 8343,
											"end": 8366,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 8397,
											"end": 8399,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8382,
											"end": 8408,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 8391,
											"end": 8395,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8382,
											"end": 8408,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 8382,
											"end": 8408,
											"name": "PUSH",
											"source": 2,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 8401,
											"end": 8407,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 8382,
											"end": 8408,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 8382,
											"end": 8408,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 8382,
											"end": 8408,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "136"
										},
										{
											"begin": 8382,
											"end": 8408,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1391,
											"end": 1416,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1391,
											"end": 1416,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1379,
											"end": 1381,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1364,
											"end": 1382,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1364,
											"end": 1382,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1245,
											"end": 1422,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 8382,
											"end": 8408,
											"name": "tag",
											"source": 2,
											"value": "136"
										},
										{
											"begin": 8382,
											"end": 8408,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8382,
											"end": 8408,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 8382,
											"end": 8408,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 8382,
											"end": 8408,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 8382,
											"end": 8408,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 8382,
											"end": 8408,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 8382,
											"end": 8408,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8382,
											"end": 8408,
											"name": "LOG3",
											"source": 2
										},
										{
											"begin": 8419,
											"end": 8456,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "122"
										},
										{
											"begin": 12123,
											"end": 12244,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 14,
											"end": 611,
											"name": "tag",
											"source": 8,
											"value": "18"
										},
										{
											"begin": 14,
											"end": 611,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 126,
											"end": 130,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 155,
											"end": 157,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 184,
											"end": 186,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 173,
											"end": 182,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 166,
											"end": 187,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 216,
											"end": 222,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 210,
											"end": 223,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 259,
											"end": 265,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 254,
											"end": 256,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 243,
											"end": 252,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 239,
											"end": 257,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 232,
											"end": 266,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 284,
											"end": 285,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 294,
											"end": 434,
											"name": "tag",
											"source": 8,
											"value": "144"
										},
										{
											"begin": 294,
											"end": 434,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 308,
											"end": 314,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 305,
											"end": 306,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 302,
											"end": 315,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 294,
											"end": 434,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 294,
											"end": 434,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "146"
										},
										{
											"begin": 294,
											"end": 434,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 403,
											"end": 417,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 403,
											"end": 417,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 403,
											"end": 417,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 399,
											"end": 422,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 399,
											"end": 422,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 393,
											"end": 423,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 369,
											"end": 386,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 369,
											"end": 386,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 369,
											"end": 386,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 388,
											"end": 390,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 365,
											"end": 391,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 358,
											"end": 424,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 323,
											"end": 333,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 323,
											"end": 333,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 294,
											"end": 434,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "144"
										},
										{
											"begin": 294,
											"end": 434,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 294,
											"end": 434,
											"name": "tag",
											"source": 8,
											"value": "146"
										},
										{
											"begin": 294,
											"end": 434,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 452,
											"end": 458,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 449,
											"end": 450,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 446,
											"end": 459,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 443,
											"end": 534,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 443,
											"end": 534,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "147"
										},
										{
											"begin": 443,
											"end": 534,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 522,
											"end": 523,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 517,
											"end": 519,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 508,
											"end": 514,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 497,
											"end": 506,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 493,
											"end": 515,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 489,
											"end": 520,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 482,
											"end": 524,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 443,
											"end": 534,
											"name": "tag",
											"source": 8,
											"value": "147"
										},
										{
											"begin": 443,
											"end": 534,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 595,
											"end": 597,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 574,
											"end": 589,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 570,
											"end": 599,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 555,
											"end": 600,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 555,
											"end": 600,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 555,
											"end": 600,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 555,
											"end": 600,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 602,
											"end": 604,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 551,
											"end": 605,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 551,
											"end": 605,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 14,
											"end": 611,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 14,
											"end": 611,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 616,
											"end": 789,
											"name": "tag",
											"source": 8,
											"value": "141"
										},
										{
											"begin": 616,
											"end": 789,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 684,
											"end": 704,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 684,
											"end": 704,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 733,
											"end": 764,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 733,
											"end": 764,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 723,
											"end": 765,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 723,
											"end": 765,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 713,
											"end": 783,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "149"
										},
										{
											"begin": 713,
											"end": 783,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 779,
											"end": 780,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 776,
											"end": 777,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 769,
											"end": 781,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 713,
											"end": 783,
											"name": "tag",
											"source": 8,
											"value": "149"
										},
										{
											"begin": 713,
											"end": 783,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 616,
											"end": 789,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 616,
											"end": 789,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 616,
											"end": 789,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 616,
											"end": 789,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 794,
											"end": 1048,
											"name": "tag",
											"source": 8,
											"value": "21"
										},
										{
											"begin": 794,
											"end": 1048,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 862,
											"end": 868,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 870,
											"end": 876,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 923,
											"end": 925,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 911,
											"end": 920,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 902,
											"end": 909,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 898,
											"end": 921,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 894,
											"end": 926,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 891,
											"end": 943,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 891,
											"end": 943,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "151"
										},
										{
											"begin": 891,
											"end": 943,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 939,
											"end": 940,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 936,
											"end": 937,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 929,
											"end": 941,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 891,
											"end": 943,
											"name": "tag",
											"source": 8,
											"value": "151"
										},
										{
											"begin": 891,
											"end": 943,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 962,
											"end": 991,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "152"
										},
										{
											"begin": 981,
											"end": 990,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 962,
											"end": 991,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "141"
										},
										{
											"begin": 962,
											"end": 991,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 962,
											"end": 991,
											"name": "tag",
											"source": 8,
											"value": "152"
										},
										{
											"begin": 962,
											"end": 991,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 952,
											"end": 991,
											"name": "SWAP5",
											"source": 8
										},
										{
											"begin": 1038,
											"end": 1040,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1023,
											"end": 1041,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 1023,
											"end": 1041,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1023,
											"end": 1041,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 1023,
											"end": 1041,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1010,
											"end": 1042,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 1010,
											"end": 1042,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 794,
											"end": 1048,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 1427,
											"end": 1755,
											"name": "tag",
											"source": 8,
											"value": "31"
										},
										{
											"begin": 1427,
											"end": 1755,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1504,
											"end": 1510,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1512,
											"end": 1518,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1520,
											"end": 1526,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1573,
											"end": 1575,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 1561,
											"end": 1570,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 1552,
											"end": 1559,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 1548,
											"end": 1571,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 1544,
											"end": 1576,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 1541,
											"end": 1593,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1541,
											"end": 1593,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "156"
										},
										{
											"begin": 1541,
											"end": 1593,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1589,
											"end": 1590,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1586,
											"end": 1587,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1579,
											"end": 1591,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 1541,
											"end": 1593,
											"name": "tag",
											"source": 8,
											"value": "156"
										},
										{
											"begin": 1541,
											"end": 1593,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1612,
											"end": 1641,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "157"
										},
										{
											"begin": 1631,
											"end": 1640,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 1612,
											"end": 1641,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "141"
										},
										{
											"begin": 1612,
											"end": 1641,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 1612,
											"end": 1641,
											"name": "tag",
											"source": 8,
											"value": "157"
										},
										{
											"begin": 1612,
											"end": 1641,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1602,
											"end": 1641,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 1602,
											"end": 1641,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1660,
											"end": 1698,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "158"
										},
										{
											"begin": 1694,
											"end": 1696,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1683,
											"end": 1692,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 1679,
											"end": 1697,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1660,
											"end": 1698,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "141"
										},
										{
											"begin": 1660,
											"end": 1698,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 1660,
											"end": 1698,
											"name": "tag",
											"source": 8,
											"value": "158"
										},
										{
											"begin": 1660,
											"end": 1698,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1650,
											"end": 1698,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1650,
											"end": 1698,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1745,
											"end": 1747,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1734,
											"end": 1743,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 1730,
											"end": 1748,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1717,
											"end": 1749,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 1707,
											"end": 1749,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1707,
											"end": 1749,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1427,
											"end": 1755,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 1427,
											"end": 1755,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1427,
											"end": 1755,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 1427,
											"end": 1755,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1427,
											"end": 1755,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 1427,
											"end": 1755,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 1949,
											"end": 2135,
											"name": "tag",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 1949,
											"end": 2135,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2008,
											"end": 2014,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2061,
											"end": 2063,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 2049,
											"end": 2058,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2040,
											"end": 2047,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 2036,
											"end": 2059,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 2032,
											"end": 2064,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 2029,
											"end": 2081,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 2029,
											"end": 2081,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "161"
										},
										{
											"begin": 2029,
											"end": 2081,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 2077,
											"end": 2078,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2074,
											"end": 2075,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2067,
											"end": 2079,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 2029,
											"end": 2081,
											"name": "tag",
											"source": 8,
											"value": "161"
										},
										{
											"begin": 2029,
											"end": 2081,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2100,
											"end": 2129,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "162"
										},
										{
											"begin": 2119,
											"end": 2128,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2100,
											"end": 2129,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "141"
										},
										{
											"begin": 2100,
											"end": 2129,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 2100,
											"end": 2129,
											"name": "tag",
											"source": 8,
											"value": "162"
										},
										{
											"begin": 2100,
											"end": 2129,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2090,
											"end": 2129,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 1949,
											"end": 2135,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1949,
											"end": 2135,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 2140,
											"end": 2400,
											"name": "tag",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 2140,
											"end": 2400,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2208,
											"end": 2214,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2216,
											"end": 2222,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2269,
											"end": 2271,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 2257,
											"end": 2266,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 2248,
											"end": 2255,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 2244,
											"end": 2267,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 2240,
											"end": 2272,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 2237,
											"end": 2289,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 2237,
											"end": 2289,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "164"
										},
										{
											"begin": 2237,
											"end": 2289,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 2285,
											"end": 2286,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2282,
											"end": 2283,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2275,
											"end": 2287,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 2237,
											"end": 2289,
											"name": "tag",
											"source": 8,
											"value": "164"
										},
										{
											"begin": 2237,
											"end": 2289,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2308,
											"end": 2337,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "165"
										},
										{
											"begin": 2327,
											"end": 2336,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 2308,
											"end": 2337,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "141"
										},
										{
											"begin": 2308,
											"end": 2337,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 2308,
											"end": 2337,
											"name": "tag",
											"source": 8,
											"value": "165"
										},
										{
											"begin": 2308,
											"end": 2337,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2298,
											"end": 2337,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 2298,
											"end": 2337,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2356,
											"end": 2394,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "166"
										},
										{
											"begin": 2390,
											"end": 2392,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 2379,
											"end": 2388,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 2375,
											"end": 2393,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2356,
											"end": 2394,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "141"
										},
										{
											"begin": 2356,
											"end": 2394,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 2356,
											"end": 2394,
											"name": "tag",
											"source": 8,
											"value": "166"
										},
										{
											"begin": 2356,
											"end": 2394,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2346,
											"end": 2394,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2346,
											"end": 2394,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2140,
											"end": 2400,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 2140,
											"end": 2400,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2140,
											"end": 2400,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 2140,
											"end": 2400,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2140,
											"end": 2400,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2140,
											"end": 2400,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 2405,
											"end": 2785,
											"name": "tag",
											"source": 8,
											"value": "65"
										},
										{
											"begin": 2405,
											"end": 2785,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2484,
											"end": 2485,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 2480,
											"end": 2492,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2480,
											"end": 2492,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2480,
											"end": 2492,
											"name": "SHR",
											"source": 8
										},
										{
											"begin": 2480,
											"end": 2492,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2527,
											"end": 2539,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2527,
											"end": 2539,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 2527,
											"end": 2539,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2548,
											"end": 2609,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "168"
										},
										{
											"begin": 2548,
											"end": 2609,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 2602,
											"end": 2606,
											"name": "PUSH",
											"source": 8,
											"value": "7F"
										},
										{
											"begin": 2594,
											"end": 2600,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2590,
											"end": 2607,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 2580,
											"end": 2607,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 2580,
											"end": 2607,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2548,
											"end": 2609,
											"name": "tag",
											"source": 8,
											"value": "168"
										},
										{
											"begin": 2548,
											"end": 2609,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2655,
											"end": 2657,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 2647,
											"end": 2653,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2644,
											"end": 2658,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 2624,
											"end": 2642,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2621,
											"end": 2659,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 2618,
											"end": 2779,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 2618,
											"end": 2779,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "169"
										},
										{
											"begin": 2618,
											"end": 2779,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 2701,
											"end": 2711,
											"name": "PUSH",
											"source": 8,
											"value": "4E487B71"
										},
										{
											"begin": 2696,
											"end": 2699,
											"name": "PUSH",
											"source": 8,
											"value": "E0"
										},
										{
											"begin": 2692,
											"end": 2712,
											"name": "SHL",
											"source": 8
										},
										{
											"begin": 2689,
											"end": 2690,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2682,
											"end": 2713,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2736,
											"end": 2740,
											"name": "PUSH",
											"source": 8,
											"value": "22"
										},
										{
											"begin": 2733,
											"end": 2734,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 2726,
											"end": 2741,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2764,
											"end": 2768,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 2761,
											"end": 2762,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2754,
											"end": 2769,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 2618,
											"end": 2779,
											"name": "tag",
											"source": 8,
											"value": "169"
										},
										{
											"begin": 2618,
											"end": 2779,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2618,
											"end": 2779,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2405,
											"end": 2785,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 2405,
											"end": 2785,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2405,
											"end": 2785,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2405,
											"end": 2785,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 2790,
											"end": 3015,
											"name": "tag",
											"source": 8,
											"value": "88"
										},
										{
											"begin": 2790,
											"end": 3015,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2830,
											"end": 2833,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2861,
											"end": 2862,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2857,
											"end": 2863,
											"name": "NOT",
											"source": 8
										},
										{
											"begin": 2854,
											"end": 2855,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2851,
											"end": 2864,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 2848,
											"end": 2984,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 2848,
											"end": 2984,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "171"
										},
										{
											"begin": 2848,
											"end": 2984,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 2906,
											"end": 2916,
											"name": "PUSH",
											"source": 8,
											"value": "4E487B71"
										},
										{
											"begin": 2901,
											"end": 2904,
											"name": "PUSH",
											"source": 8,
											"value": "E0"
										},
										{
											"begin": 2897,
											"end": 2917,
											"name": "SHL",
											"source": 8
										},
										{
											"begin": 2894,
											"end": 2895,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2887,
											"end": 2918,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2941,
											"end": 2945,
											"name": "PUSH",
											"source": 8,
											"value": "11"
										},
										{
											"begin": 2938,
											"end": 2939,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 2931,
											"end": 2946,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2969,
											"end": 2973,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 2966,
											"end": 2967,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2959,
											"end": 2974,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 2848,
											"end": 2984,
											"name": "tag",
											"source": 8,
											"value": "171"
										},
										{
											"begin": 2848,
											"end": 2984,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3000,
											"end": 3009,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3000,
											"end": 3009,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2790,
											"end": 3015,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"decreaseAllowance(address,uint256)": "a457c2d7",
							"increaseAllowance(address,uint256)": "39509351",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":\"ERC20Upgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6eb2fd1e9894dbe778f4b8131adecebe570689e63cf892f4e21257bfe1252497\",\"dweb:/ipfs/QmXgUGNfZvrn6N2miv3nooSs7Jm34A41qz94fu2GtDFcx8\"]},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"keccak256\":\"0x7c7ac0bc6c340a7f320524b9a4b4b079ee9da3c51258080d4bab237f329a427c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e7000057dd28a5fd92e5687c2ee6044181531bab0fcb0e5003cbe33ae024d06d\",\"dweb:/ipfs/QmZYhnjEQxVqVcLMJMS7VbhuMSCNM4YCgom1wg5borSp18\"]},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://75b47c3aeca7b66ea6752f8be020ec5c1c502de6ec9065272dae23d3a52196e2\",\"dweb:/ipfs/QmUebPMHv16tYKFh5BmBQkMfRFb5b8UZ2RgVwdjxCeufVF\"]},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4c9c634f99dd02d73ce7498b03a6305e251c05eeebb71457306561c1fab0fa7d\",\"dweb:/ipfs/QmbYRBbZHy8YoaQKXdPryiL3CSS7uUaRfRYi1TUj9cTqJQ\"]},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9b4b2110b7f2b3eb32951bc08046fa90feccffa594e1176cb91cdfb0e94726b4\",\"dweb:/ipfs/QmSxLwYjicf9zWFuieRc8WQwE4FisA1Um5jp1iSa731TGt\"]},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d6520943ea55fdf5f0bafb39ed909f64de17051bc954ff3e88c9e5621412c79c\",\"dweb:/ipfs/QmWZ4rAKTQbNG2HxGs46AcTXShsVytKeLs7CUCdCSv5N7a\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 138,
								"contract": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_uint8"
							},
							{
								"astId": 141,
								"contract": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 1280,
								"contract": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_uint256)50_storage"
							},
							{
								"astId": 301,
								"contract": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "_balances",
								"offset": 0,
								"slot": "51",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 307,
								"contract": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "_allowances",
								"offset": 0,
								"slot": "52",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 309,
								"contract": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "53",
								"type": "t_uint256"
							},
							{
								"astId": 311,
								"contract": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "_name",
								"offset": 0,
								"slot": "54",
								"type": "t_string_storage"
							},
							{
								"astId": 313,
								"contract": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "_symbol",
								"offset": 0,
								"slot": "55",
								"type": "t_string_storage"
							},
							{
								"astId": 892,
								"contract": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "56",
								"type": "t_array(t_uint256)45_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_array(t_uint256)45_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[45]",
								"numberOfBytes": "1440"
							},
							"t_array(t_uint256)50_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[50]",
								"numberOfBytes": "1600"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
				"IERC20Upgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":\"IERC20Upgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://75b47c3aeca7b66ea6752f8be020ec5c1c502de6ec9065272dae23d3a52196e2\",\"dweb:/ipfs/QmUebPMHv16tYKFh5BmBQkMfRFb5b8UZ2RgVwdjxCeufVF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
				"IERC20MetadataUpgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._",
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"decimals()": {
								"details": "Returns the decimals places of the token."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":\"IERC20MetadataUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://75b47c3aeca7b66ea6752f8be020ec5c1c502de6ec9065272dae23d3a52196e2\",\"dweb:/ipfs/QmUebPMHv16tYKFh5BmBQkMfRFb5b8UZ2RgVwdjxCeufVF\"]},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4c9c634f99dd02d73ce7498b03a6305e251c05eeebb71457306561c1fab0fa7d\",\"dweb:/ipfs/QmbYRBbZHy8YoaQKXdPryiL3CSS7uUaRfRYi1TUj9cTqJQ\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
				"AddressUpgradeable": {
					"abi": [],
					"devdoc": {
						"details": "Collection of functions related to the address type",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":194:7366  library AddressUpgradeable {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":194:7366  library AddressUpgradeable {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212208630b8cbb7394cb9eb9b53692c2e1d677c40cb9dd45fb91e50cbea1260d43abd64736f6c634300080b0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208630b8cbb7394cb9eb9b53692c2e1d677c40cb9dd45fb91e50cbea1260d43abd64736f6c634300080b0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP7 ADDRESS 0xB8 0xCB 0xB7 CODECOPY 0x4C 0xB9 0xEB SWAP12 MSTORE8 PUSH10 0x2C2E1D677C40CB9DD45F 0xB9 0x1E POP 0xCB 0xEA SLT PUSH1 0xD4 GASPRICE 0xBD PUSH5 0x736F6C6343 STOP ADDMOD SIGNEXTEND STOP CALLER ",
							"sourceMap": "194:7172:5:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;194:7172:5;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208630b8cbb7394cb9eb9b53692c2e1d677c40cb9dd45fb91e50cbea1260d43abd64736f6c634300080b0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP7 ADDRESS 0xB8 0xCB 0xB7 CODECOPY 0x4C 0xB9 0xEB SWAP12 MSTORE8 PUSH10 0x2C2E1D677C40CB9DD45F 0xB9 0x1E POP 0xCB 0xEA SLT PUSH1 0xD4 GASPRICE 0xBD PUSH5 0x736F6C6343 STOP ADDMOD SIGNEXTEND STOP CALLER ",
							"sourceMap": "194:7172:5:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"functionCall(address,bytes memory)": "infinite",
								"functionCall(address,bytes memory,string memory)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256,string memory)": "infinite",
								"functionStaticCall(address,bytes memory)": "infinite",
								"functionStaticCall(address,bytes memory,string memory)": "infinite",
								"isContract(address)": "infinite",
								"sendValue(address payable,uint256)": "infinite",
								"verifyCallResult(bool,bytes memory,string memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 194,
									"end": 7366,
									"name": "PUSH #[$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 7366,
									"name": "PUSH [$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 7366,
									"name": "PUSH",
									"source": 5,
									"value": "B"
								},
								{
									"begin": 194,
									"end": 7366,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 194,
									"end": 7366,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 194,
									"end": 7366,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 194,
									"end": 7366,
									"name": "CODECOPY",
									"source": 5
								},
								{
									"begin": 194,
									"end": 7366,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 194,
									"end": 7366,
									"name": "MLOAD",
									"source": 5
								},
								{
									"begin": 194,
									"end": 7366,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 7366,
									"name": "BYTE",
									"source": 5
								},
								{
									"begin": 194,
									"end": 7366,
									"name": "PUSH",
									"source": 5,
									"value": "73"
								},
								{
									"begin": 194,
									"end": 7366,
									"name": "EQ",
									"source": 5
								},
								{
									"begin": 194,
									"end": 7366,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 194,
									"end": 7366,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 194,
									"end": 7366,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 7366,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 194,
									"end": 7366,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 7366,
									"name": "PUSH",
									"source": 5,
									"value": "4"
								},
								{
									"begin": 194,
									"end": 7366,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 194,
									"end": 7366,
									"name": "PUSH",
									"source": 5,
									"value": "24"
								},
								{
									"begin": 194,
									"end": 7366,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 7366,
									"name": "REVERT",
									"source": 5
								},
								{
									"begin": 194,
									"end": 7366,
									"name": "tag",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 194,
									"end": 7366,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 194,
									"end": 7366,
									"name": "ADDRESS",
									"source": 5
								},
								{
									"begin": 194,
									"end": 7366,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 7366,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 194,
									"end": 7366,
									"name": "PUSH",
									"source": 5,
									"value": "73"
								},
								{
									"begin": 194,
									"end": 7366,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 194,
									"end": 7366,
									"name": "MSTORE8",
									"source": 5
								},
								{
									"begin": 194,
									"end": 7366,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 194,
									"end": 7366,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 194,
									"end": 7366,
									"name": "RETURN",
									"source": 5
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212208630b8cbb7394cb9eb9b53692c2e1d677c40cb9dd45fb91e50cbea1260d43abd64736f6c634300080b0033",
									".code": [
										{
											"begin": 194,
											"end": 7366,
											"name": "PUSHDEPLOYADDRESS",
											"source": 5
										},
										{
											"begin": 194,
											"end": 7366,
											"name": "ADDRESS",
											"source": 5
										},
										{
											"begin": 194,
											"end": 7366,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 194,
											"end": 7366,
											"name": "PUSH",
											"source": 5,
											"value": "80"
										},
										{
											"begin": 194,
											"end": 7366,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 194,
											"end": 7366,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 194,
											"end": 7366,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 194,
											"end": 7366,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 194,
											"end": 7366,
											"name": "REVERT",
											"source": 5
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":\"AddressUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9b4b2110b7f2b3eb32951bc08046fa90feccffa594e1176cb91cdfb0e94726b4\",\"dweb:/ipfs/QmSxLwYjicf9zWFuieRc8WQwE4FisA1Um5jp1iSa731TGt\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
				"ContextUpgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "version",
									"type": "uint8"
								}
							],
							"name": "Initialized",
							"type": "event"
						}
					],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"stateVariables": {
							"__gap": {
								"details": "This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":\"ContextUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6eb2fd1e9894dbe778f4b8131adecebe570689e63cf892f4e21257bfe1252497\",\"dweb:/ipfs/QmXgUGNfZvrn6N2miv3nooSs7Jm34A41qz94fu2GtDFcx8\"]},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9b4b2110b7f2b3eb32951bc08046fa90feccffa594e1176cb91cdfb0e94726b4\",\"dweb:/ipfs/QmSxLwYjicf9zWFuieRc8WQwE4FisA1Um5jp1iSa731TGt\"]},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d6520943ea55fdf5f0bafb39ed909f64de17051bc954ff3e88c9e5621412c79c\",\"dweb:/ipfs/QmWZ4rAKTQbNG2HxGs46AcTXShsVytKeLs7CUCdCSv5N7a\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 138,
								"contract": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_uint8"
							},
							{
								"astId": 141,
								"contract": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 1280,
								"contract": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_uint256)50_storage"
							}
						],
						"types": {
							"t_array(t_uint256)50_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[50]",
								"numberOfBytes": "1600"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/Detake3Token.sol": {
				"Detake3Token": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "version",
									"type": "uint8"
								}
							],
							"name": "Initialized",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "uniqueId",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								}
							],
							"name": "_permitTransfer",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "_taxFee",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "subtractedValue",
									"type": "uint256"
								}
							],
							"name": "decreaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getTokenOwnerAddress",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "addedValue",
									"type": "uint256"
								}
							],
							"name": "increaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "name",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "symbol",
									"type": "string"
								},
								{
									"internalType": "uint8",
									"name": "decimals",
									"type": "uint8"
								},
								{
									"internalType": "uint256",
									"name": "totalSupply",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "taxFee",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "tokenOwnerAddress",
									"type": "address"
								}
							],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "signer",
									"type": "address"
								}
							],
							"name": "mapSigner",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address[]",
									"name": "signers_",
									"type": "address[]"
								}
							],
							"name": "setSigners",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "signers",
							"outputs": [
								{
									"internalType": "address[]",
									"name": "",
									"type": "address[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "uniqueIdExists",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"decreaseAllowance(address,uint256)": {
								"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
							},
							"increaseAllowance(address,uint256)": {
								"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/Detake3Token.sol\":226:3480  contract Detake3Token is ERC20Upgradeable, OwnableUpgradeable {... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/Detake3Token.sol\":226:3480  contract Detake3Token is ERC20Upgradeable, OwnableUpgradeable {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x70a08231\n      gt\n      tag_25\n      jumpi\n      dup1\n      0xa457c2d7\n      gt\n      tag_26\n      jumpi\n      dup1\n      0xa457c2d7\n      eq\n      tag_19\n      jumpi\n      dup1\n      0xa9059cbb\n      eq\n      tag_20\n      jumpi\n      dup1\n      0xb722d0a5\n      eq\n      tag_21\n      jumpi\n      dup1\n      0xdd62ed3e\n      eq\n      tag_22\n      jumpi\n      dup1\n      0xf2fde38b\n      eq\n      tag_23\n      jumpi\n      dup1\n      0xf9342285\n      eq\n      tag_24\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_26:\n      dup1\n      0x70a08231\n      eq\n      tag_14\n      jumpi\n      dup1\n      0x715018a6\n      eq\n      tag_15\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_16\n      jumpi\n      dup1\n      0x95d89b41\n      eq\n      tag_17\n      jumpi\n      dup1\n      0xa3772662\n      eq\n      tag_18\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_25:\n      dup1\n      0x2cd77a5a\n      gt\n      tag_27\n      jumpi\n      dup1\n      0x2cd77a5a\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x313ce567\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x39509351\n      eq\n      tag_10\n      jumpi\n      dup1\n      0x3b124fe7\n      eq\n      tag_11\n      jumpi\n      dup1\n      0x46f0975a\n      eq\n      tag_12\n      jumpi\n      dup1\n      0x55b7dc67\n      eq\n      tag_13\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_27:\n      dup1\n      0x06fdde03\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x07c351dd\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x095ea7b3\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x18160ddd\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x23b872dd\n      eq\n      tag_7\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2493:2591  function name() public view virtual override returns (string memory) {... */\n    tag_3:\n      tag_28\n      tag_29\n      jump\t// in\n    tag_28:\n      mload(0x40)\n      tag_30\n      swap2\n      swap1\n      tag_31\n      jump\t// in\n    tag_30:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/Detake3Token.sol\":1859:1968  function mapSigner(address signer) external view returns (bool) {... */\n    tag_4:\n      tag_32\n      tag_33\n      calldatasize\n      0x04\n      tag_34\n      jump\t// in\n    tag_33:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Detake3Token.sol\":1941:1960  _mapSigners[signer] */\n      and\n        /* \"contracts/Detake3Token.sol\":1917:1921  bool */\n      0x00\n        /* \"contracts/Detake3Token.sol\":1941:1960  _mapSigners[signer] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Detake3Token.sol\":1941:1952  _mapSigners */\n      0x9d\n        /* \"contracts/Detake3Token.sol\":1941:1960  _mapSigners[signer] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      0xff\n      and\n      swap1\n        /* \"contracts/Detake3Token.sol\":1859:1968  function mapSigner(address signer) external view returns (bool) {... */\n      jump\n    tag_32:\n      mload(0x40)\n        /* \"#utility.yul\":1150:1164   */\n      swap1\n      iszero\n        /* \"#utility.yul\":1143:1165   */\n      iszero\n        /* \"#utility.yul\":1125:1166   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1113:1115   */\n      0x20\n        /* \"#utility.yul\":1098:1116   */\n      add\n        /* \"contracts/Detake3Token.sol\":1859:1968  function mapSigner(address signer) external view returns (bool) {... */\n      tag_30\n        /* \"#utility.yul\":985:1172   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4770:4967  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n    tag_5:\n      tag_32\n      tag_39\n      calldatasize\n      0x04\n      tag_40\n      jump\t// in\n    tag_39:\n      tag_41\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3581:3687  function totalSupply() public view virtual override returns (uint256) {... */\n    tag_6:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3668:3680  _totalSupply */\n      sload(0x35)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3581:3687  function totalSupply() public view virtual override returns (uint256) {... */\n    tag_43:\n      mload(0x40)\n        /* \"#utility.yul\":1582:1607   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":1570:1572   */\n      0x20\n        /* \"#utility.yul\":1555:1573   */\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3581:3687  function totalSupply() public view virtual override returns (uint256) {... */\n      tag_30\n        /* \"#utility.yul\":1436:1613   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5529:5815  function transferFrom(... */\n    tag_7:\n      tag_32\n      tag_48\n      calldatasize\n      0x04\n      tag_49\n      jump\t// in\n    tag_48:\n      tag_50\n      jump\t// in\n        /* \"contracts/Detake3Token.sol\":590:1146  function initialize(... */\n    tag_8:\n      tag_52\n      tag_53\n      calldatasize\n      0x04\n      tag_54\n      jump\t// in\n    tag_53:\n      tag_55\n      jump\t// in\n    tag_52:\n      stop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3430:3521  function decimals() public view virtual override returns (uint8) {... */\n    tag_9:\n      mload(0x40)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3512:3514  18 */\n      0x12\n        /* \"#utility.yul\":3959:3995   */\n      dup2\n      mstore\n        /* \"#utility.yul\":3947:3949   */\n      0x20\n        /* \"#utility.yul\":3932:3950   */\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3430:3521  function decimals() public view virtual override returns (uint8) {... */\n      tag_30\n        /* \"#utility.yul\":3817:4001   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6210:6444  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {... */\n    tag_10:\n      tag_32\n      tag_61\n      calldatasize\n      0x04\n      tag_40\n      jump\t// in\n    tag_61:\n      tag_62\n      jump\t// in\n        /* \"contracts/Detake3Token.sol\":381:403  uint256 public _taxFee */\n    tag_11:\n      tag_43\n      sload(0x9a)\n      dup2\n      jump\n        /* \"contracts/Detake3Token.sol\":1510:1604  function signers() external view returns (address[] memory) {... */\n    tag_12:\n      tag_67\n      tag_68\n      jump\t// in\n    tag_67:\n      mload(0x40)\n      tag_30\n      swap2\n      swap1\n      tag_70\n      jump\t// in\n        /* \"contracts/Detake3Token.sol\":2225:3477  function _permitTransfer(... */\n    tag_13:\n      tag_52\n      tag_72\n      calldatasize\n      0x04\n      tag_73\n      jump\t// in\n    tag_72:\n      tag_74\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3745:3870  function balanceOf(address account) public view virtual override returns (uint256) {... */\n    tag_14:\n      tag_43\n      tag_76\n      calldatasize\n      0x04\n      tag_34\n      jump\t// in\n    tag_76:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3845:3863  _balances[account] */\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3819:3826  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3845:3863  _balances[account] */\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3845:3854  _balances */\n      0x33\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3845:3863  _balances[account] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3745:3870  function balanceOf(address account) public view virtual override returns (uint256) {... */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2071:2172  function renounceOwnership() public virtual onlyOwner {... */\n    tag_15:\n      tag_52\n      tag_80\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1441:1526  function owner() public view virtual returns (address) {... */\n    tag_16:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1513:1519  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x65))\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1441:1526  function owner() public view virtual returns (address) {... */\n    tag_81:\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":5229:5261   */\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":5211:5262   */\n      dup2\n      mstore\n        /* \"#utility.yul\":5199:5201   */\n      0x20\n        /* \"#utility.yul\":5184:5202   */\n      add\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1441:1526  function owner() public view virtual returns (address) {... */\n      tag_30\n        /* \"#utility.yul\":5065:5268   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2704:2806  function symbol() public view virtual override returns (string memory) {... */\n    tag_17:\n      tag_28\n      tag_86\n      jump\t// in\n        /* \"contracts/Detake3Token.sol\":1612:1851  function setSigners(address[] memory signers_) external virtual onlyOwner {... */\n    tag_18:\n      tag_52\n      tag_89\n      calldatasize\n      0x04\n      tag_90\n      jump\t// in\n    tag_89:\n      tag_91\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6931:7358  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {... */\n    tag_19:\n      tag_32\n      tag_93\n      calldatasize\n      0x04\n      tag_40\n      jump\t// in\n    tag_93:\n      tag_94\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4066:4255  function transfer(address to, uint256 amount) public virtual override returns (bool) {... */\n    tag_20:\n      tag_32\n      tag_97\n      calldatasize\n      0x04\n      tag_40\n      jump\t// in\n    tag_97:\n      tag_98\n      jump\t// in\n        /* \"contracts/Detake3Token.sol\":1154:1260  function getTokenOwnerAddress() public view returns (address) {... */\n    tag_21:\n        /* \"contracts/Detake3Token.sol\":1234:1252  _tokenOwnerAddress */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x9b))\n        /* \"contracts/Detake3Token.sol\":1154:1260  function getTokenOwnerAddress() public view returns (address) {... */\n      jump(tag_81)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4313:4462  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n    tag_22:\n      tag_43\n      tag_104\n      calldatasize\n      0x04\n      tag_105\n      jump\t// in\n    tag_104:\n      tag_106\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2321:2519  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_23:\n      tag_52\n      tag_109\n      calldatasize\n      0x04\n      tag_34\n      jump\t// in\n    tag_109:\n      tag_110\n      jump\t// in\n        /* \"contracts/Detake3Token.sol\":535:581  mapping(uint256 => bool) public uniqueIdExists */\n    tag_24:\n      tag_32\n      tag_112\n      calldatasize\n      0x04\n      tag_113\n      jump\t// in\n    tag_112:\n      mstore(0x20, 0x9e)\n      0x00\n      swap1\n      dup2\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      0xff\n      and\n      dup2\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2493:2591  function name() public view virtual override returns (string memory) {... */\n    tag_29:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2547:2560  string memory */\n      0x60\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2579:2584  _name */\n      0x36\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2572:2584  return _name */\n      dup1\n      sload\n      tag_117\n      swap1\n      tag_118\n      jump\t// in\n    tag_117:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_119\n      swap1\n      tag_118\n      jump\t// in\n    tag_119:\n      dup1\n      iszero\n      tag_120\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_121\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_120)\n    tag_121:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_122:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_122\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_120:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2493:2591  function name() public view virtual override returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4770:4967  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n    tag_41:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4853:4857  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4907:4939  _approve(owner, spender, amount) */\n      tag_127\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4923:4930  spender */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4932:4938  amount */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4907:4915  _approve */\n      tag_128\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4907:4939  _approve(owner, spender, amount) */\n      jump\t// in\n    tag_127:\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4956:4960  true */\n      0x01\n      swap4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4770:4967  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5529:5815  function transferFrom(... */\n    tag_50:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5656:5660  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5712:5750  _spendAllowance(from, spender, amount) */\n      tag_132\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5728:5732  from */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5743:5749  amount */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5712:5727  _spendAllowance */\n      tag_133\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5712:5750  _spendAllowance(from, spender, amount) */\n      jump\t// in\n    tag_132:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5760:5787  _transfer(from, to, amount) */\n      tag_134\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5770:5774  from */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5776:5778  to */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5780:5786  amount */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5760:5769  _transfer */\n      tag_135\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5760:5787  _transfer(from, to, amount) */\n      jump\t// in\n    tag_134:\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5804:5808  true */\n      0x01\n      swap5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5529:5815  function transferFrom(... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/Detake3Token.sol\":590:1146  function initialize(... */\n    tag_55:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3111:3130  bool isTopLevelCall */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3134:3147  _initializing */\n      sload\n      0x0100\n      swap1\n      div\n      0xff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3133:3147  !_initializing */\n      iszero\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3179:3213  isTopLevelCall && _initialized < 1 */\n      dup1\n      iszero\n      tag_137\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3197:3209  _initialized */\n      sload(0x00)\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3212:3213  1 */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3197:3209  _initialized */\n      0xff\n      swap1\n      swap2\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3197:3213  _initialized < 1 */\n      lt\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3179:3213  isTopLevelCall && _initialized < 1 */\n    tag_137:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3178:3286  (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1) */\n      dup1\n      tag_141\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3258:3262  this */\n      address\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":1476:1495  account.code.length */\n      extcodesize\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":1476:1499  account.code.length > 0 */\n      iszero\n      dup1\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3219:3285  !AddressUpgradeable.isContract(address(this)) && _initialized == 1 */\n      tag_141\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3268:3280  _initialized */\n      and(0xff, sload(0x00))\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3268:3285  _initialized == 1 */\n      eq\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3219:3285  !AddressUpgradeable.isContract(address(this)) && _initialized == 1 */\n    tag_141:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3157:3358  require(... */\n      tag_142\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":7267:7269   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3157:3358  require(... */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":7249:7270   */\n      mstore\n        /* \"#utility.yul\":7306:7308   */\n      0x2e\n        /* \"#utility.yul\":7286:7304   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":7279:7309   */\n      mstore\n        /* \"#utility.yul\":7345:7379   */\n      0x496e697469616c697a61626c653a20636f6e747261637420697320616c726561\n        /* \"#utility.yul\":7325:7343   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":7318:7380   */\n      mstore\n      shl(0x92, 0x191e481a5b9a5d1a585b1a5e9959)\n        /* \"#utility.yul\":7396:7414   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":7389:7433   */\n      mstore\n        /* \"#utility.yul\":7450:7469   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3157:3358  require(... */\n    tag_143:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_142:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3368:3380  _initialized */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3368:3384  _initialized = 1 */\n      dup1\n      sload\n      not(0xff)\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3383:3384  1 */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3368:3384  _initialized = 1 */\n      or\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3394:3459  if (isTopLevelCall) {... */\n      dup1\n      iszero\n      tag_145\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3428:3441  _initializing */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3428:3448  _initializing = true */\n      dup1\n      sload\n      not(0xff00)\n      and\n      0x0100\n      or\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3394:3459  if (isTopLevelCall) {... */\n    tag_145:\n        /* \"contracts/Detake3Token.sol\":823:839  __Ownable_init() */\n      tag_147\n        /* \"contracts/Detake3Token.sol\":823:837  __Ownable_init */\n      tag_148\n        /* \"contracts/Detake3Token.sol\":823:839  __Ownable_init() */\n      jump\t// in\n    tag_147:\n        /* \"contracts/Detake3Token.sol\":850:876  __ERC20_init(name, symbol) */\n      tag_149\n        /* \"contracts/Detake3Token.sol\":863:867  name */\n      dup8\n        /* \"contracts/Detake3Token.sol\":869:875  symbol */\n      dup8\n        /* \"contracts/Detake3Token.sol\":850:862  __ERC20_init */\n      tag_150\n        /* \"contracts/Detake3Token.sol\":850:876  __ERC20_init(name, symbol) */\n      jump\t// in\n    tag_149:\n        /* \"contracts/Detake3Token.sol\":887:899  _name = name */\n      dup7\n      mload\n      tag_151\n      swap1\n        /* \"contracts/Detake3Token.sol\":887:892  _name */\n      0x97\n      swap1\n        /* \"contracts/Detake3Token.sol\":887:899  _name = name */\n      0x20\n      dup11\n      add\n      swap1\n      tag_152\n      jump\t// in\n    tag_151:\n      pop\n        /* \"contracts/Detake3Token.sol\":910:926  _symbol = symbol */\n      dup6\n      mload\n      tag_153\n      swap1\n        /* \"contracts/Detake3Token.sol\":910:917  _symbol */\n      0x98\n      swap1\n        /* \"contracts/Detake3Token.sol\":910:926  _symbol = symbol */\n      0x20\n      dup10\n      add\n      swap1\n      tag_152\n      jump\t// in\n    tag_153:\n      pop\n        /* \"contracts/Detake3Token.sol\":937:946  _decimals */\n      0x99\n        /* \"contracts/Detake3Token.sol\":937:957  _decimals = decimals */\n      dup1\n      sload\n      not(0xff)\n      and\n      0xff\n      dup8\n      and\n      or\n      swap1\n      sstore\n        /* \"contracts/Detake3Token.sol\":968:975  _taxFee */\n      0x9a\n        /* \"contracts/Detake3Token.sol\":968:984  _taxFee = taxFee */\n      dup4\n      swap1\n      sstore\n        /* \"contracts/Detake3Token.sol\":995:1013  _tokenOwnerAddress */\n      0x9b\n        /* \"contracts/Detake3Token.sol\":995:1033  _tokenOwnerAddress = tokenOwnerAddress */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      dup5\n      and\n      or\n      swap1\n      sstore\n        /* \"contracts/Detake3Token.sol\":1101:1138  _mint(tokenOwnerAddress, totalSupply) */\n      tag_154\n        /* \"contracts/Detake3Token.sol\":995:1033  _tokenOwnerAddress = tokenOwnerAddress */\n      dup3\n        /* \"contracts/Detake3Token.sol\":1126:1137  totalSupply */\n      dup6\n        /* \"contracts/Detake3Token.sol\":1101:1106  _mint */\n      tag_155\n        /* \"contracts/Detake3Token.sol\":1101:1138  _mint(tokenOwnerAddress, totalSupply) */\n      jump\t// in\n    tag_154:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3483:3497  isTopLevelCall */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3479:3578  if (isTopLevelCall) {... */\n      iszero\n      tag_156\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3529:3534  false */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3513:3534  _initializing = false */\n      dup1\n      sload\n      not(0xff00)\n      and\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3553:3567  Initialized(1) */\n      mload(0x40)\n      0x01\n        /* \"#utility.yul\":3959:3995   */\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3553:3567  Initialized(1) */\n      0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498\n      swap1\n        /* \"#utility.yul\":3947:3949   */\n      0x20\n        /* \"#utility.yul\":3932:3950   */\n      add\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3553:3567  Initialized(1) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log1\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3479:3578  if (isTopLevelCall) {... */\n    tag_156:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3101:3584  {... */\n      pop\n        /* \"contracts/Detake3Token.sol\":590:1146  function initialize(... */\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6210:6444  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {... */\n    tag_62:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6298:6302  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6352:6416  _approve(owner, spender, allowance(owner, spender) + addedValue) */\n      tag_127\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6368:6375  spender */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6405:6415  addedValue */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6377:6402  allowance(owner, spender) */\n      tag_163\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6368:6375  spender */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6377:6386  allowance */\n      tag_106\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6377:6402  allowance(owner, spender) */\n      jump\t// in\n    tag_163:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6377:6415  allowance(owner, spender) + addedValue */\n      tag_164\n      swap2\n      swap1\n      tag_165\n      jump\t// in\n    tag_164:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6352:6360  _approve */\n      tag_128\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6352:6416  _approve(owner, spender, allowance(owner, spender) + addedValue) */\n      jump\t// in\n        /* \"contracts/Detake3Token.sol\":1510:1604  function signers() external view returns (address[] memory) {... */\n    tag_68:\n        /* \"contracts/Detake3Token.sol\":1552:1568  address[] memory */\n      0x60\n        /* \"contracts/Detake3Token.sol\":1588:1596  _signers */\n      0x9c\n        /* \"contracts/Detake3Token.sol\":1581:1596  return _signers */\n      dup1\n      sload\n      dup1\n      0x20\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      dup1\n      iszero\n      tag_120\n      jumpi\n      0x20\n      mul\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_168:\n      dup2\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      mstore\n      0x01\n      swap1\n      swap2\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_168\n      jumpi\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"contracts/Detake3Token.sol\":1510:1604  function signers() external view returns (address[] memory) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/Detake3Token.sol\":2225:3477  function _permitTransfer(... */\n    tag_74:\n        /* \"contracts/Detake3Token.sol\":2511:2535  uniqueIdExists[uniqueId] */\n      0x00\n      dup4\n      dup2\n      mstore\n        /* \"contracts/Detake3Token.sol\":2511:2525  uniqueIdExists */\n      0x9e\n        /* \"contracts/Detake3Token.sol\":2511:2535  uniqueIdExists[uniqueId] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      0xff\n      and\n        /* \"contracts/Detake3Token.sol\":2510:2535  !uniqueIdExists[uniqueId] */\n      iszero\n        /* \"contracts/Detake3Token.sol\":2502:2556  require(!uniqueIdExists[uniqueId], \"Unique id exists\") */\n      tag_170\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":8146:8148   */\n      0x20\n        /* \"contracts/Detake3Token.sol\":2502:2556  require(!uniqueIdExists[uniqueId], \"Unique id exists\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":8128:8149   */\n      mstore\n        /* \"#utility.yul\":8185:8187   */\n      0x10\n        /* \"#utility.yul\":8165:8183   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":8158:8188   */\n      mstore\n      shl(0x80, 0x556e6971756520696420657869737473)\n        /* \"#utility.yul\":8204:8222   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":8197:8243   */\n      mstore\n        /* \"#utility.yul\":8260:8278   */\n      0x64\n      add\n        /* \"contracts/Detake3Token.sol\":2502:2556  require(!uniqueIdExists[uniqueId], \"Unique id exists\") */\n      tag_143\n        /* \"#utility.yul\":7944:8284   */\n      jump\n        /* \"contracts/Detake3Token.sol\":2502:2556  require(!uniqueIdExists[uniqueId], \"Unique id exists\") */\n    tag_170:\n        /* \"contracts/Detake3Token.sol\":2586:2596  msg.sender */\n      caller\n        /* \"contracts/Detake3Token.sol\":2569:2583  address sender */\n      0x00\n        /* \"contracts/Detake3Token.sol\":2623:2636  super.owner() */\n      tag_173\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1513:1519  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x65))\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1441:1526  function owner() public view virtual returns (address) {... */\n      jump\n        /* \"contracts/Detake3Token.sol\":2623:2636  super.owner() */\n    tag_173:\n        /* \"contracts/Detake3Token.sol\":3230:3254  uniqueIdExists[uniqueId] */\n      0x00\n      dup7\n      dup2\n      mstore\n        /* \"contracts/Detake3Token.sol\":3230:3244  uniqueIdExists */\n      0x9e\n        /* \"contracts/Detake3Token.sol\":3230:3254  uniqueIdExists[uniqueId] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Detake3Token.sol\":3230:3261  uniqueIdExists[uniqueId] = true */\n      dup1\n      sload\n      not(0xff)\n      and\n        /* \"contracts/Detake3Token.sol\":3257:3261  true */\n      0x01\n        /* \"contracts/Detake3Token.sol\":3230:3261  uniqueIdExists[uniqueId] = true */\n      or\n      swap1\n      sstore\n        /* \"contracts/Detake3Token.sol\":2607:2636  address owner = super.owner() */\n      swap1\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Detake3Token.sol\":3276:3291  sender == owner */\n      dup3\n      dup2\n      and\n      swap1\n      dup3\n      and\n      eq\n        /* \"contracts/Detake3Token.sol\":3272:3470  if (sender == owner) {... */\n      iszero\n      tag_174\n      jumpi\n        /* \"contracts/Detake3Token.sol\":3356:3389  super.transfer(recipient, amount) */\n      tag_175\n        /* \"contracts/Detake3Token.sol\":3371:3380  recipient */\n      dup7\n        /* \"contracts/Detake3Token.sol\":3382:3388  amount */\n      dup6\n        /* \"contracts/Detake3Token.sol\":3356:3370  super.transfer */\n      tag_98\n        /* \"contracts/Detake3Token.sol\":3356:3389  super.transfer(recipient, amount) */\n      jump\t// in\n    tag_175:\n      pop\n        /* \"contracts/Detake3Token.sol\":3272:3470  if (sender == owner) {... */\n      jump(tag_177)\n    tag_174:\n        /* \"contracts/Detake3Token.sol\":3422:3458  _transferWithBurn(recipient, amount) */\n      tag_177\n        /* \"contracts/Detake3Token.sol\":3440:3449  recipient */\n      dup7\n        /* \"contracts/Detake3Token.sol\":3451:3457  amount */\n      dup6\n        /* \"contracts/Detake3Token.sol\":3422:3439  _transferWithBurn */\n      tag_178\n        /* \"contracts/Detake3Token.sol\":3422:3458  _transferWithBurn(recipient, amount) */\n      jump\t// in\n    tag_177:\n        /* \"contracts/Detake3Token.sol\":2422:3477  {... */\n      pop\n      pop\n        /* \"contracts/Detake3Token.sol\":2225:3477  function _permitTransfer(... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2071:2172  function renounceOwnership() public virtual onlyOwner {... */\n    tag_80:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1334:1347  _checkOwner() */\n      tag_181\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1334:1345  _checkOwner */\n      tag_182\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1334:1347  _checkOwner() */\n      jump\t// in\n    tag_181:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2135:2165  _transferOwnership(address(0)) */\n      tag_184\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2162:2163  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2135:2153  _transferOwnership */\n      tag_185\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2135:2165  _transferOwnership(address(0)) */\n      jump\t// in\n    tag_184:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2071:2172  function renounceOwnership() public virtual onlyOwner {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2704:2806  function symbol() public view virtual override returns (string memory) {... */\n    tag_86:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2760:2773  string memory */\n      0x60\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2792:2799  _symbol */\n      0x37\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2785:2799  return _symbol */\n      dup1\n      sload\n      tag_117\n      swap1\n      tag_118\n      jump\t// in\n        /* \"contracts/Detake3Token.sol\":1612:1851  function setSigners(address[] memory signers_) external virtual onlyOwner {... */\n    tag_91:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1334:1347  _checkOwner() */\n      tag_194\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1334:1345  _checkOwner */\n      tag_182\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1334:1347  _checkOwner() */\n      jump\t// in\n    tag_194:\n        /* \"contracts/Detake3Token.sol\":1697:1737  _updateMap(_signers, false, _mapSigners) */\n      tag_196\n        /* \"contracts/Detake3Token.sol\":1708:1716  _signers */\n      0x9c\n        /* \"contracts/Detake3Token.sol\":1697:1737  _updateMap(_signers, false, _mapSigners) */\n      dup1\n      sload\n      dup1\n      0x20\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      dup1\n      iszero\n      tag_197\n      jumpi\n      0x20\n      mul\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_198:\n      dup2\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      mstore\n      0x01\n      swap1\n      swap2\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_198\n      jumpi\n    tag_197:\n      pop\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/Detake3Token.sol\":1718:1723  false */\n      0x00\n        /* \"contracts/Detake3Token.sol\":1725:1736  _mapSigners */\n      0x9d\n        /* \"contracts/Detake3Token.sol\":1697:1707  _updateMap */\n      tag_199\n        /* \"contracts/Detake3Token.sol\":1697:1737  _updateMap(_signers, false, _mapSigners) */\n      jump\t// in\n    tag_196:\n        /* \"contracts/Detake3Token.sol\":1748:1763  delete _signers */\n      tag_200\n        /* \"contracts/Detake3Token.sol\":1755:1763  _signers */\n      0x9c\n      0x00\n        /* \"contracts/Detake3Token.sol\":1748:1763  delete _signers */\n      tag_201\n      jump\t// in\n    tag_200:\n        /* \"contracts/Detake3Token.sol\":1774:1793  _signers = signers_ */\n      dup1\n      mload\n      tag_202\n      swap1\n        /* \"contracts/Detake3Token.sol\":1774:1782  _signers */\n      0x9c\n      swap1\n        /* \"contracts/Detake3Token.sol\":1774:1793  _signers = signers_ */\n      0x20\n      dup5\n      add\n      swap1\n      tag_203\n      jump\t// in\n    tag_202:\n      pop\n        /* \"contracts/Detake3Token.sol\":1804:1843  _updateMap(signers_, true, _mapSigners) */\n      tag_204\n        /* \"contracts/Detake3Token.sol\":1815:1823  signers_ */\n      dup2\n        /* \"contracts/Detake3Token.sol\":1825:1829  true */\n      0x01\n        /* \"contracts/Detake3Token.sol\":1831:1842  _mapSigners */\n      0x9d\n        /* \"contracts/Detake3Token.sol\":1804:1814  _updateMap */\n      tag_199\n        /* \"contracts/Detake3Token.sol\":1804:1843  _updateMap(signers_, true, _mapSigners) */\n      jump\t// in\n    tag_204:\n        /* \"contracts/Detake3Token.sol\":1612:1851  function setSigners(address[] memory signers_) external virtual onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6931:7358  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {... */\n    tag_94:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7024:7028  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7024:7028  bool */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7105:7130  allowance(owner, spender) */\n      tag_207\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7122:7129  spender */\n      dup7\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7105:7114  allowance */\n      tag_106\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7105:7130  allowance(owner, spender) */\n      jump\t// in\n    tag_207:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7078:7130  uint256 currentAllowance = allowance(owner, spender) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7168:7183  subtractedValue */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7148:7164  currentAllowance */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7148:7183  currentAllowance >= subtractedValue */\n      lt\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7140:7225  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n      tag_208\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":8491:8493   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7140:7225  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":8473:8494   */\n      mstore\n        /* \"#utility.yul\":8530:8532   */\n      0x25\n        /* \"#utility.yul\":8510:8528   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":8503:8533   */\n      mstore\n        /* \"#utility.yul\":8569:8603   */\n      0x45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77\n        /* \"#utility.yul\":8549:8567   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":8542:8604   */\n      mstore\n      shl(0xd8, 0x207a65726f)\n        /* \"#utility.yul\":8620:8638   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":8613:8648   */\n      mstore\n        /* \"#utility.yul\":8665:8684   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7140:7225  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n      tag_143\n        /* \"#utility.yul\":8289:8690   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7140:7225  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n    tag_208:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7259:7319  _approve(owner, spender, currentAllowance - subtractedValue) */\n      tag_134\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7268:7273  owner */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7275:7282  spender */\n      dup7\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7303:7318  subtractedValue */\n      dup7\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7284:7300  currentAllowance */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7284:7318  currentAllowance - subtractedValue */\n      sub\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7259:7267  _approve */\n      tag_128\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7259:7319  _approve(owner, spender, currentAllowance - subtractedValue) */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4066:4255  function transfer(address to, uint256 amount) public virtual override returns (bool) {... */\n    tag_98:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4145:4149  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4199:4227  _transfer(owner, to, amount) */\n      tag_127\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4216:4218  to */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4220:4226  amount */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4199:4208  _transfer */\n      tag_135\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4199:4227  _transfer(owner, to, amount) */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4313:4462  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n    tag_106:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4428:4446  _allowances[owner] */\n      swap2\n      dup3\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4402:4409  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4428:4446  _allowances[owner] */\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4428:4439  _allowances */\n      0x34\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4428:4446  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4428:4455  _allowances[owner][spender] */\n      swap4\n      swap1\n      swap5\n      and\n      dup3\n      mstore\n      swap2\n      swap1\n      swap2\n      mstore\n      keccak256\n      sload\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4313:4462  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2321:2519  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_110:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1334:1347  _checkOwner() */\n      tag_218\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1334:1345  _checkOwner */\n      tag_182\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1334:1347  _checkOwner() */\n      jump\t// in\n    tag_218:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2409:2431  newOwner != address(0) */\n      dup2\n      and\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2401:2474  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      tag_220\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":8897:8899   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2401:2474  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":8879:8900   */\n      mstore\n        /* \"#utility.yul\":8936:8938   */\n      0x26\n        /* \"#utility.yul\":8916:8934   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":8909:8939   */\n      mstore\n        /* \"#utility.yul\":8975:9009   */\n      0x4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061\n        /* \"#utility.yul\":8955:8973   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":8948:9010   */\n      mstore\n      shl(0xd0, 0x646472657373)\n        /* \"#utility.yul\":9026:9044   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":9019:9055   */\n      mstore\n        /* \"#utility.yul\":9072:9091   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2401:2474  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      tag_143\n        /* \"#utility.yul\":8695:9097   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2401:2474  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n    tag_220:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2484:2512  _transferOwnership(newOwner) */\n      tag_204\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2503:2511  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2484:2502  _transferOwnership */\n      tag_185\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2484:2512  _transferOwnership(newOwner) */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10447:10817  function _approve(... */\n    tag_128:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10578:10597  owner != address(0) */\n      dup4\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10570:10638  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      tag_226\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":9304:9306   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10570:10638  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":9286:9307   */\n      mstore\n        /* \"#utility.yul\":9343:9345   */\n      0x24\n        /* \"#utility.yul\":9323:9341   */\n      dup1\n      dup3\n      add\n        /* \"#utility.yul\":9316:9346   */\n      mstore\n        /* \"#utility.yul\":9382:9416   */\n      0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464\n        /* \"#utility.yul\":9362:9380   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":9355:9417   */\n      mstore\n      shl(0xe0, 0x72657373)\n        /* \"#utility.yul\":9433:9451   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":9426:9460   */\n      mstore\n        /* \"#utility.yul\":9477:9496   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10570:10638  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      tag_143\n        /* \"#utility.yul\":9102:9502   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10570:10638  require(owner != address(0), \"ERC20: approve from the zero address\") */\n    tag_226:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10656:10677  spender != address(0) */\n      dup3\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10648:10716  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      tag_229\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":9709:9711   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10648:10716  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":9691:9712   */\n      mstore\n        /* \"#utility.yul\":9748:9750   */\n      0x22\n        /* \"#utility.yul\":9728:9746   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":9721:9751   */\n      mstore\n        /* \"#utility.yul\":9787:9821   */\n      0x45524332303a20617070726f766520746f20746865207a65726f206164647265\n        /* \"#utility.yul\":9767:9785   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":9760:9822   */\n      mstore\n      shl(0xf0, 0x7373)\n        /* \"#utility.yul\":9838:9856   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":9831:9863   */\n      mstore\n        /* \"#utility.yul\":9880:9899   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10648:10716  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      tag_143\n        /* \"#utility.yul\":9507:9905   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10648:10716  require(spender != address(0), \"ERC20: approve to the zero address\") */\n    tag_229:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10727:10745  _allowances[owner] */\n      dup4\n      dup2\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10727:10738  _allowances */\n      0x34\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10727:10745  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10727:10754  _allowances[owner][spender] */\n      swap5\n      dup8\n      and\n      dup1\n      dup5\n      mstore\n      swap5\n      dup3\n      mstore\n      swap2\n      dup3\n      swap1\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10727:10763  _allowances[owner][spender] = amount */\n      dup6\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10778:10810  Approval(owner, spender, amount) */\n      swap1\n      mload\n        /* \"#utility.yul\":1582:1607   */\n      dup5\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10778:10810  Approval(owner, spender, amount) */\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n      swap2\n        /* \"#utility.yul\":1555:1573   */\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10778:10810  Approval(owner, spender, amount) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10447:10817  function _approve(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11098:11539  function _spendAllowance(... */\n    tag_133:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11228:11252  uint256 currentAllowance */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11255:11280  allowance(owner, spender) */\n      tag_234\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11265:11270  owner */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11272:11279  spender */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11255:11264  allowance */\n      tag_106\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11255:11280  allowance(owner, spender) */\n      jump\t// in\n    tag_234:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11228:11280  uint256 currentAllowance = allowance(owner, spender) */\n      swap1\n      pop\n      not(0x00)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11294:11310  currentAllowance */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11294:11331  currentAllowance != type(uint256).max */\n      eq\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11290:11533  if (currentAllowance != type(uint256).max) {... */\n      tag_239\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11375:11381  amount */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11355:11371  currentAllowance */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11355:11381  currentAllowance >= amount */\n      lt\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11347:11415  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      tag_236\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":10112:10114   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11347:11415  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":10094:10115   */\n      mstore\n        /* \"#utility.yul\":10151:10153   */\n      0x1d\n        /* \"#utility.yul\":10131:10149   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":10124:10154   */\n      mstore\n        /* \"#utility.yul\":10190:10221   */\n      0x45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000\n        /* \"#utility.yul\":10170:10188   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":10163:10222   */\n      mstore\n        /* \"#utility.yul\":10239:10257   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11347:11415  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      tag_143\n        /* \"#utility.yul\":9910:10263   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11347:11415  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n    tag_236:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11457:11508  _approve(owner, spender, currentAllowance - amount) */\n      tag_239\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11466:11471  owner */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11473:11480  spender */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11501:11507  amount */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11482:11498  currentAllowance */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11482:11507  currentAllowance - amount */\n      sub\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11457:11465  _approve */\n      tag_128\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11457:11508  _approve(owner, spender, currentAllowance - amount) */\n      jump\t// in\n    tag_239:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11218:11539  {... */\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11098:11539  function _spendAllowance(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7812:8463  function _transfer(... */\n    tag_135:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7938:7956  from != address(0) */\n      dup4\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7930:7998  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      tag_241\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":10470:10472   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7930:7998  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":10452:10473   */\n      mstore\n        /* \"#utility.yul\":10509:10511   */\n      0x25\n        /* \"#utility.yul\":10489:10507   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":10482:10512   */\n      mstore\n        /* \"#utility.yul\":10548:10582   */\n      0x45524332303a207472616e736665722066726f6d20746865207a65726f206164\n        /* \"#utility.yul\":10528:10546   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":10521:10583   */\n      mstore\n      shl(0xd8, 0x6472657373)\n        /* \"#utility.yul\":10599:10617   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":10592:10627   */\n      mstore\n        /* \"#utility.yul\":10644:10663   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7930:7998  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      tag_143\n        /* \"#utility.yul\":10268:10669   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7930:7998  require(from != address(0), \"ERC20: transfer from the zero address\") */\n    tag_241:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8016:8032  to != address(0) */\n      dup3\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8008:8072  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      tag_244\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":10876:10878   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8008:8072  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":10858:10879   */\n      mstore\n        /* \"#utility.yul\":10915:10917   */\n      0x23\n        /* \"#utility.yul\":10895:10913   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":10888:10918   */\n      mstore\n        /* \"#utility.yul\":10954:10988   */\n      0x45524332303a207472616e7366657220746f20746865207a65726f2061646472\n        /* \"#utility.yul\":10934:10952   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":10927:10989   */\n      mstore\n      shl(0xe8, 0x657373)\n        /* \"#utility.yul\":11005:11023   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":10998:11031   */\n      mstore\n        /* \"#utility.yul\":11048:11067   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8008:8072  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      tag_143\n        /* \"#utility.yul\":10674:11073   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8008:8072  require(to != address(0), \"ERC20: transfer to the zero address\") */\n    tag_244:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8154:8169  _balances[from] */\n      dup4\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8132:8151  uint256 fromBalance */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8154:8169  _balances[from] */\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8154:8163  _balances */\n      0x33\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8154:8169  _balances[from] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8187:8208  fromBalance >= amount */\n      dup2\n      dup2\n      lt\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8179:8251  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      tag_249\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":11280:11282   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8179:8251  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":11262:11283   */\n      mstore\n        /* \"#utility.yul\":11319:11321   */\n      0x26\n        /* \"#utility.yul\":11299:11317   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":11292:11322   */\n      mstore\n        /* \"#utility.yul\":11358:11392   */\n      0x45524332303a207472616e7366657220616d6f756e7420657863656564732062\n        /* \"#utility.yul\":11338:11356   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":11331:11393   */\n      mstore\n      shl(0xd0, 0x616c616e6365)\n        /* \"#utility.yul\":11409:11427   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":11402:11438   */\n      mstore\n        /* \"#utility.yul\":11455:11474   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8179:8251  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      tag_143\n        /* \"#utility.yul\":11078:11480   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8179:8251  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n    tag_249:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8285:8300  _balances[from] */\n      dup1\n      dup6\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8285:8294  _balances */\n      0x33\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8285:8300  _balances[from] */\n      0x20\n      mstore\n      0x40\n      dup1\n      dup3\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8303:8323  fromBalance - amount */\n      dup6\n      dup6\n      sub\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8285:8323  _balances[from] = fromBalance - amount */\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8343:8356  _balances[to] */\n      swap2\n      dup6\n      and\n      dup2\n      mstore\n      swap1\n      dup2\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8343:8366  _balances[to] += amount */\n      dup1\n      sload\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8317:8323  amount */\n      dup5\n      swap3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8285:8300  _balances[from] */\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8343:8366  _balances[to] += amount */\n      tag_252\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8317:8323  amount */\n      dup5\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8343:8366  _balances[to] += amount */\n      tag_165\n      jump\t// in\n    tag_252:\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8397:8399  to */\n      dup3\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8382:8408  Transfer(from, to, amount) */\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8391:8395  from */\n      dup5\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8382:8408  Transfer(from, to, amount) */\n      and\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8401:8407  amount */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8382:8408  Transfer(from, to, amount) */\n      mload(0x40)\n      tag_253\n      swap2\n        /* \"#utility.yul\":1582:1607   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1570:1572   */\n      0x20\n        /* \"#utility.yul\":1555:1573   */\n      add\n      swap1\n        /* \"#utility.yul\":1436:1613   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8382:8408  Transfer(from, to, amount) */\n    tag_253:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8419:8456  _afterTokenTransfer(from, to, amount) */\n      tag_239\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12123:12244  function _beforeTokenTransfer(... */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1003:1098  function __Ownable_init() internal onlyInitializing {... */\n    tag_148:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4910:4923  _initializing */\n      sload(0x00)\n      0x0100\n      swap1\n      div\n      0xff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4902:4971  require(_initializing, \"Initializable: contract is not initializing\") */\n      tag_258\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_143\n      swap1\n      tag_260\n      jump\t// in\n    tag_258:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1065:1091  __Ownable_init_unchained() */\n      tag_184\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1065:1089  __Ownable_init_unchained */\n      tag_263\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1065:1091  __Ownable_init_unchained() */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2116:2263  function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {... */\n    tag_150:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4910:4923  _initializing */\n      sload(0x00)\n      0x0100\n      swap1\n      div\n      0xff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4902:4971  require(_initializing, \"Initializable: contract is not initializing\") */\n      tag_265\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_143\n      swap1\n      tag_260\n      jump\t// in\n    tag_265:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2218:2256  __ERC20_init_unchained(name_, symbol_) */\n      tag_268\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2241:2246  name_ */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2248:2255  symbol_ */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2218:2240  __ERC20_init_unchained */\n      tag_269\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2218:2256  __ERC20_init_unchained(name_, symbol_) */\n      jump\t// in\n    tag_268:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2116:2263  function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8739:9128  function _mint(address account, uint256 amount) internal virtual {... */\n    tag_155:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8822:8843  account != address(0) */\n      dup3\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8814:8879  require(account != address(0), \"ERC20: mint to the zero address\") */\n      tag_271\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":12099:12101   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8814:8879  require(account != address(0), \"ERC20: mint to the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":12081:12102   */\n      mstore\n        /* \"#utility.yul\":12138:12140   */\n      0x1f\n        /* \"#utility.yul\":12118:12136   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":12111:12141   */\n      mstore\n        /* \"#utility.yul\":12177:12210   */\n      0x45524332303a206d696e7420746f20746865207a65726f206164647265737300\n        /* \"#utility.yul\":12157:12175   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":12150:12211   */\n      mstore\n        /* \"#utility.yul\":12228:12246   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8814:8879  require(account != address(0), \"ERC20: mint to the zero address\") */\n      tag_143\n        /* \"#utility.yul\":11897:12252   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8814:8879  require(account != address(0), \"ERC20: mint to the zero address\") */\n    tag_271:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8966:8972  amount */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8950:8962  _totalSupply */\n      0x35\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8950:8972  _totalSupply += amount */\n      dup3\n      dup3\n      sload\n      tag_275\n      swap2\n      swap1\n      tag_165\n      jump\t// in\n    tag_275:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8982:9000  _balances[account] */\n      dup3\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8982:8991  _balances */\n      0x33\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8982:9000  _balances[account] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8982:9010  _balances[account] += amount */\n      dup1\n      sload\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9004:9010  amount */\n      dup4\n      swap3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8982:9000  _balances[account] */\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8982:9010  _balances[account] += amount */\n      tag_276\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9004:9010  amount */\n      dup5\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8982:9010  _balances[account] += amount */\n      tag_165\n      jump\t// in\n    tag_276:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9025:9062  Transfer(address(0), account, amount) */\n      mload(0x40)\n        /* \"#utility.yul\":1582:1607   */\n      dup2\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9025:9062  Transfer(address(0), account, amount) */\n      dup4\n      and\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9042:9043  0 */\n      0x00\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9025:9062  Transfer(address(0), account, amount) */\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n      swap1\n        /* \"#utility.yul\":1570:1572   */\n      0x20\n        /* \"#utility.yul\":1555:1573   */\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9025:9062  Transfer(address(0), account, amount) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2116:2263  function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {... */\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/Detake3Token.sol\":1268:1502  function _transferWithBurn(address to, uint256 amount) private {... */\n    tag_178:\n        /* \"contracts/Detake3Token.sol\":1342:1357  uint256 burnAmt */\n      0x00\n        /* \"contracts/Detake3Token.sol\":1369:1376  _taxFee */\n      sload(0x9a)\n        /* \"contracts/Detake3Token.sol\":1360:1366  amount */\n      dup3\n        /* \"contracts/Detake3Token.sol\":1360:1376  amount / _taxFee */\n      tag_280\n      swap2\n      swap1\n      tag_281\n      jump\t// in\n    tag_280:\n        /* \"contracts/Detake3Token.sol\":1342:1376  uint256 burnAmt = amount / _taxFee */\n      swap1\n      pop\n        /* \"contracts/Detake3Token.sol\":1387:1413  _burn(msg.sender, burnAmt) */\n      tag_282\n        /* \"contracts/Detake3Token.sol\":1393:1403  msg.sender */\n      caller\n        /* \"contracts/Detake3Token.sol\":1405:1412  burnAmt */\n      dup3\n        /* \"contracts/Detake3Token.sol\":1387:1392  _burn */\n      tag_283\n        /* \"contracts/Detake3Token.sol\":1387:1413  _burn(msg.sender, burnAmt) */\n      jump\t// in\n    tag_282:\n        /* \"contracts/Detake3Token.sol\":1424:1438  uint256 newAmt */\n      0x00\n        /* \"contracts/Detake3Token.sol\":1441:1457  amount - burnAmt */\n      tag_284\n        /* \"contracts/Detake3Token.sol\":1450:1457  burnAmt */\n      dup3\n        /* \"contracts/Detake3Token.sol\":1441:1447  amount */\n      dup5\n        /* \"contracts/Detake3Token.sol\":1441:1457  amount - burnAmt */\n      tag_285\n      jump\t// in\n    tag_284:\n        /* \"contracts/Detake3Token.sol\":1424:1457  uint256 newAmt = amount - burnAmt */\n      swap1\n      pop\n        /* \"contracts/Detake3Token.sol\":1468:1494  super.transfer(to, newAmt) */\n      tag_286\n        /* \"contracts/Detake3Token.sol\":1483:1485  to */\n      dup5\n        /* \"contracts/Detake3Token.sol\":1487:1493  newAmt */\n      dup3\n        /* \"contracts/Detake3Token.sol\":1468:1482  super.transfer */\n      tag_98\n        /* \"contracts/Detake3Token.sol\":1468:1494  super.transfer(to, newAmt) */\n      jump\t// in\n    tag_286:\n      pop\n        /* \"contracts/Detake3Token.sol\":1331:1502  {... */\n      pop\n      pop\n        /* \"contracts/Detake3Token.sol\":1268:1502  function _transferWithBurn(address to, uint256 amount) private {... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1599:1729  function _checkOwner() internal view virtual {... */\n    tag_182:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1513:1519  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x65))\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1662:1685  owner() == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1654:1722  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_184\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":12811:12813   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1654:1722  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":12793:12814   */\n      dup2\n      swap1\n      mstore\n        /* \"#utility.yul\":12830:12848   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":12823:12853   */\n      mstore\n        /* \"#utility.yul\":12889:12923   */\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n        /* \"#utility.yul\":12869:12887   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":12862:12924   */\n      mstore\n        /* \"#utility.yul\":12941:12959   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1654:1722  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_143\n        /* \"#utility.yul\":12609:12965   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2673:2860  function _transferOwnership(address newOwner) internal virtual {... */\n    tag_185:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2765:2771  _owner */\n      0x65\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2781:2798  _owner = newOwner */\n      dup4\n      dup2\n      and\n      not(sub(shl(0xa0, 0x01), 0x01))\n      dup4\n      and\n      dup2\n      or\n      swap1\n      swap4\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2813:2853  OwnershipTransferred(oldOwner, newOwner) */\n      mload(0x40)\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2765:2771  _owner */\n      swap2\n      and\n      swap2\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2781:2798  _owner = newOwner */\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2765:2771  _owner */\n      dup3\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2813:2853  OwnershipTransferred(oldOwner, newOwner) */\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2746:2762  address oldOwner */\n      0x00\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2813:2853  OwnershipTransferred(oldOwner, newOwner) */\n      log3\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2736:2860  {... */\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2673:2860  function _transferOwnership(address newOwner) internal virtual {... */\n      pop\n      jump\t// out\n        /* \"contracts/Detake3Token.sol\":1976:2217  function _updateMap(... */\n    tag_199:\n        /* \"contracts/Detake3Token.sol\":2128:2136  uint64 i */\n      0x00\n        /* \"contracts/Detake3Token.sol\":2123:2210  for (uint64 i = 0; i < arr.length; i++) {... */\n    tag_295:\n        /* \"contracts/Detake3Token.sol\":2146:2149  arr */\n      dup4\n        /* \"contracts/Detake3Token.sol\":2146:2156  arr.length */\n      mload\n        /* \"contracts/Detake3Token.sol\":2142:2143  i */\n      dup2\n        /* \"contracts/Detake3Token.sol\":2142:2156  i < arr.length */\n      0xffffffffffffffff\n      and\n      lt\n        /* \"contracts/Detake3Token.sol\":2123:2210  for (uint64 i = 0; i < arr.length; i++) {... */\n      iszero\n      tag_239\n      jumpi\n        /* \"contracts/Detake3Token.sol\":2192:2198  status */\n      dup3\n        /* \"contracts/Detake3Token.sol\":2178:2181  map */\n      dup3\n        /* \"contracts/Detake3Token.sol\":2178:2189  map[arr[i]] */\n      0x00\n        /* \"contracts/Detake3Token.sol\":2182:2185  arr */\n      dup7\n        /* \"contracts/Detake3Token.sol\":2186:2187  i */\n      dup5\n        /* \"contracts/Detake3Token.sol\":2182:2188  arr[i] */\n      0xffffffffffffffff\n      and\n      dup2\n      mload\n      dup2\n      lt\n      tag_299\n      jumpi\n      tag_299\n      tag_300\n      jump\t// in\n    tag_299:\n      0x20\n      swap1\n      dup2\n      mul\n      swap2\n      swap1\n      swap2\n      add\n      dup2\n      add\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Detake3Token.sol\":2178:2189  map[arr[i]] */\n      and\n      dup3\n      mstore\n      dup2\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n      0x40\n      add\n      0x00\n      keccak256\n        /* \"contracts/Detake3Token.sol\":2178:2198  map[arr[i]] = status */\n      dup1\n      sload\n      not(0xff)\n      and\n      swap2\n      iszero\n      iszero\n      swap2\n      swap1\n      swap2\n      or\n      swap1\n      sstore\n        /* \"contracts/Detake3Token.sol\":2158:2161  i++ */\n      dup1\n      tag_301\n      dup2\n      tag_302\n      jump\t// in\n    tag_301:\n      swap2\n      pop\n      pop\n        /* \"contracts/Detake3Token.sol\":2123:2210  for (uint64 i = 0; i < arr.length; i++) {... */\n      jump(tag_295)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12123:12244  function _beforeTokenTransfer(... */\n    tag_248:\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1104:1215  function __Ownable_init_unchained() internal onlyInitializing {... */\n    tag_263:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4910:4923  _initializing */\n      sload(0x00)\n      0x0100\n      swap1\n      div\n      0xff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4902:4971  require(_initializing, \"Initializable: contract is not initializing\") */\n      tag_306\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_143\n      swap1\n      tag_260\n      jump\t// in\n    tag_306:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1176:1208  _transferOwnership(_msgSender()) */\n      tag_184\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1176:1194  _transferOwnership */\n      tag_185\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1176:1208  _transferOwnership(_msgSender()) */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2269:2428  function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {... */\n    tag_269:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4910:4923  _initializing */\n      sload(0x00)\n      0x0100\n      swap1\n      div\n      0xff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4902:4971  require(_initializing, \"Initializable: contract is not initializing\") */\n      tag_312\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_143\n      swap1\n      tag_260\n      jump\t// in\n    tag_312:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2381:2394  _name = name_ */\n      dup2\n      mload\n      tag_315\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2381:2386  _name */\n      0x36\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2381:2394  _name = name_ */\n      0x20\n      dup6\n      add\n      swap1\n      tag_152\n      jump\t// in\n    tag_315:\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2404:2421  _symbol = symbol_ */\n      dup1\n      mload\n      tag_248\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2404:2411  _symbol */\n      0x37\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2404:2421  _symbol = symbol_ */\n      0x20\n      dup5\n      add\n      swap1\n      tag_152\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9448:10024  function _burn(address account, uint256 amount) internal virtual {... */\n    tag_283:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9531:9552  account != address(0) */\n      dup3\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9523:9590  require(account != address(0), \"ERC20: burn from the zero address\") */\n      tag_318\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":13518:13520   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9523:9590  require(account != address(0), \"ERC20: burn from the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":13500:13521   */\n      mstore\n        /* \"#utility.yul\":13557:13559   */\n      0x21\n        /* \"#utility.yul\":13537:13555   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":13530:13560   */\n      mstore\n        /* \"#utility.yul\":13596:13630   */\n      0x45524332303a206275726e2066726f6d20746865207a65726f20616464726573\n        /* \"#utility.yul\":13576:13594   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":13569:13631   */\n      mstore\n      shl(0xf8, 0x73)\n        /* \"#utility.yul\":13647:13665   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":13640:13671   */\n      mstore\n        /* \"#utility.yul\":13688:13707   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9523:9590  require(account != address(0), \"ERC20: burn from the zero address\") */\n      tag_143\n        /* \"#utility.yul\":13316:13713   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9523:9590  require(account != address(0), \"ERC20: burn from the zero address\") */\n    tag_318:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9686:9704  _balances[account] */\n      dup3\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9661:9683  uint256 accountBalance */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9686:9704  _balances[account] */\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9686:9695  _balances */\n      0x33\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9686:9704  _balances[account] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9722:9746  accountBalance >= amount */\n      dup2\n      dup2\n      lt\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9714:9785  require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\") */\n      tag_322\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":13920:13922   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9714:9785  require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":13902:13923   */\n      mstore\n        /* \"#utility.yul\":13959:13961   */\n      0x22\n        /* \"#utility.yul\":13939:13957   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":13932:13962   */\n      mstore\n        /* \"#utility.yul\":13998:14032   */\n      0x45524332303a206275726e20616d6f756e7420657863656564732062616c616e\n        /* \"#utility.yul\":13978:13996   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":13971:14033   */\n      mstore\n      shl(0xf0, 0x6365)\n        /* \"#utility.yul\":14049:14067   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":14042:14074   */\n      mstore\n        /* \"#utility.yul\":14091:14110   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9714:9785  require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\") */\n      tag_143\n        /* \"#utility.yul\":13718:14116   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9714:9785  require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\") */\n    tag_322:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9819:9837  _balances[account] */\n      dup4\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9819:9828  _balances */\n      0x33\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9819:9837  _balances[account] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9840:9863  accountBalance - amount */\n      dup4\n      dup4\n      sub\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9819:9863  _balances[account] = accountBalance - amount */\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9883:9895  _totalSupply */\n      0x35\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9883:9905  _totalSupply -= amount */\n      dup1\n      sload\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9857:9863  amount */\n      dup5\n      swap3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9819:9837  _balances[account] */\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9883:9905  _totalSupply -= amount */\n      tag_325\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9857:9863  amount */\n      dup5\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9883:9905  _totalSupply -= amount */\n      tag_285\n      jump\t// in\n    tag_325:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9921:9958  Transfer(account, address(0), amount) */\n      mload(0x40)\n        /* \"#utility.yul\":1582:1607   */\n      dup3\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9947:9948  0 */\n      0x00\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9921:9958  Transfer(account, address(0), amount) */\n      dup6\n      and\n      swap1\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n      swap1\n        /* \"#utility.yul\":1570:1572   */\n      0x20\n        /* \"#utility.yul\":1555:1573   */\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9921:9958  Transfer(account, address(0), amount) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12123:12244  function _beforeTokenTransfer(... */\n      pop\n      pop\n      pop\n      jump\t// out\n    tag_152:\n      dup3\n      dup1\n      sload\n      tag_328\n      swap1\n      tag_118\n      jump\t// in\n    tag_328:\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n      0x1f\n      add\n      0x20\n      swap1\n      div\n      dup2\n      add\n      swap3\n      dup3\n      tag_330\n      jumpi\n      0x00\n      dup6\n      sstore\n      jump(tag_333)\n    tag_330:\n      dup3\n      0x1f\n      lt\n      tag_331\n      jumpi\n      dup1\n      mload\n      not(0xff)\n      and\n      dup4\n      dup1\n      add\n      or\n      dup6\n      sstore\n      jump(tag_333)\n    tag_331:\n      dup3\n      dup1\n      add\n      0x01\n      add\n      dup6\n      sstore\n      dup3\n      iszero\n      tag_333\n      jumpi\n      swap2\n      dup3\n      add\n    tag_332:\n      dup3\n      dup2\n      gt\n      iszero\n      tag_333\n      jumpi\n      dup3\n      mload\n      dup3\n      sstore\n      swap2\n      0x20\n      add\n      swap2\n      swap1\n      0x01\n      add\n      swap1\n      jump(tag_332)\n    tag_333:\n      pop\n      tag_334\n      swap3\n      swap2\n      pop\n      tag_335\n      jump\t// in\n    tag_334:\n      pop\n      swap1\n      jump\t// out\n    tag_201:\n      pop\n      dup1\n      sload\n      0x00\n      dup3\n      sstore\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n      dup2\n      add\n      swap1\n      tag_204\n      swap2\n      swap1\n      tag_335\n      jump\t// in\n    tag_203:\n      dup3\n      dup1\n      sload\n      dup3\n      dup3\n      sstore\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n      dup2\n      add\n      swap3\n      dup3\n      iszero\n      tag_333\n      jumpi\n      swap2\n      0x20\n      mul\n      dup3\n      add\n    tag_339:\n      dup3\n      dup2\n      gt\n      iszero\n      tag_333\n      jumpi\n      dup3\n      mload\n      dup3\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      swap1\n      swap2\n      and\n      or\n      dup3\n      sstore\n      0x20\n      swap1\n      swap3\n      add\n      swap2\n      0x01\n      swap1\n      swap2\n      add\n      swap1\n      jump(tag_339)\n    tag_335:\n    tag_342:\n      dup1\n      dup3\n      gt\n      iszero\n      tag_334\n      jumpi\n      0x00\n      dup2\n      sstore\n      0x01\n      add\n      jump(tag_342)\n        /* \"#utility.yul\":14:611   */\n    tag_31:\n        /* \"#utility.yul\":126:130   */\n      0x00\n        /* \"#utility.yul\":155:157   */\n      0x20\n        /* \"#utility.yul\":184:186   */\n      dup1\n        /* \"#utility.yul\":173:182   */\n      dup4\n        /* \"#utility.yul\":166:187   */\n      mstore\n        /* \"#utility.yul\":216:222   */\n      dup4\n        /* \"#utility.yul\":210:223   */\n      mload\n        /* \"#utility.yul\":259:265   */\n      dup1\n        /* \"#utility.yul\":254:256   */\n      dup3\n        /* \"#utility.yul\":243:252   */\n      dup6\n        /* \"#utility.yul\":239:257   */\n      add\n        /* \"#utility.yul\":232:266   */\n      mstore\n        /* \"#utility.yul\":284:285   */\n      0x00\n        /* \"#utility.yul\":294:434   */\n    tag_351:\n        /* \"#utility.yul\":308:314   */\n      dup2\n        /* \"#utility.yul\":305:306   */\n      dup2\n        /* \"#utility.yul\":302:315   */\n      lt\n        /* \"#utility.yul\":294:434   */\n      iszero\n      tag_353\n      jumpi\n        /* \"#utility.yul\":403:417   */\n      dup6\n      dup2\n      add\n        /* \"#utility.yul\":399:422   */\n      dup4\n      add\n        /* \"#utility.yul\":393:423   */\n      mload\n        /* \"#utility.yul\":369:386   */\n      dup6\n      dup3\n      add\n        /* \"#utility.yul\":388:390   */\n      0x40\n        /* \"#utility.yul\":365:391   */\n      add\n        /* \"#utility.yul\":358:424   */\n      mstore\n        /* \"#utility.yul\":323:333   */\n      dup3\n      add\n        /* \"#utility.yul\":294:434   */\n      jump(tag_351)\n    tag_353:\n        /* \"#utility.yul\":452:458   */\n      dup2\n        /* \"#utility.yul\":449:450   */\n      dup2\n        /* \"#utility.yul\":446:459   */\n      gt\n        /* \"#utility.yul\":443:534   */\n      iszero\n      tag_354\n      jumpi\n        /* \"#utility.yul\":522:523   */\n      0x00\n        /* \"#utility.yul\":517:519   */\n      0x40\n        /* \"#utility.yul\":508:514   */\n      dup4\n        /* \"#utility.yul\":497:506   */\n      dup8\n        /* \"#utility.yul\":493:515   */\n      add\n        /* \"#utility.yul\":489:520   */\n      add\n        /* \"#utility.yul\":482:524   */\n      mstore\n        /* \"#utility.yul\":443:534   */\n    tag_354:\n      pop\n        /* \"#utility.yul\":595:597   */\n      0x1f\n        /* \"#utility.yul\":574:589   */\n      add\n      not(0x1f)\n        /* \"#utility.yul\":570:599   */\n      and\n        /* \"#utility.yul\":555:600   */\n      swap3\n      swap1\n      swap3\n      add\n        /* \"#utility.yul\":602:604   */\n      0x40\n        /* \"#utility.yul\":551:605   */\n      add\n      swap4\n        /* \"#utility.yul\":14:611   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":616:789   */\n    tag_344:\n        /* \"#utility.yul\":684:704   */\n      dup1\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":733:764   */\n      dup2\n      and\n        /* \"#utility.yul\":723:765   */\n      dup2\n      eq\n        /* \"#utility.yul\":713:783   */\n      tag_356\n      jumpi\n        /* \"#utility.yul\":779:780   */\n      0x00\n        /* \"#utility.yul\":776:777   */\n      dup1\n        /* \"#utility.yul\":769:781   */\n      revert\n        /* \"#utility.yul\":713:783   */\n    tag_356:\n        /* \"#utility.yul\":616:789   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":794:980   */\n    tag_34:\n        /* \"#utility.yul\":853:859   */\n      0x00\n        /* \"#utility.yul\":906:908   */\n      0x20\n        /* \"#utility.yul\":894:903   */\n      dup3\n        /* \"#utility.yul\":885:892   */\n      dup5\n        /* \"#utility.yul\":881:904   */\n      sub\n        /* \"#utility.yul\":877:909   */\n      slt\n        /* \"#utility.yul\":874:926   */\n      iszero\n      tag_358\n      jumpi\n        /* \"#utility.yul\":922:923   */\n      0x00\n        /* \"#utility.yul\":919:920   */\n      dup1\n        /* \"#utility.yul\":912:924   */\n      revert\n        /* \"#utility.yul\":874:926   */\n    tag_358:\n        /* \"#utility.yul\":945:974   */\n      tag_359\n        /* \"#utility.yul\":964:973   */\n      dup3\n        /* \"#utility.yul\":945:974   */\n      tag_344\n      jump\t// in\n    tag_359:\n        /* \"#utility.yul\":935:974   */\n      swap4\n        /* \"#utility.yul\":794:980   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1177:1431   */\n    tag_40:\n        /* \"#utility.yul\":1245:1251   */\n      0x00\n        /* \"#utility.yul\":1253:1259   */\n      dup1\n        /* \"#utility.yul\":1306:1308   */\n      0x40\n        /* \"#utility.yul\":1294:1303   */\n      dup4\n        /* \"#utility.yul\":1285:1292   */\n      dup6\n        /* \"#utility.yul\":1281:1304   */\n      sub\n        /* \"#utility.yul\":1277:1309   */\n      slt\n        /* \"#utility.yul\":1274:1326   */\n      iszero\n      tag_362\n      jumpi\n        /* \"#utility.yul\":1322:1323   */\n      0x00\n        /* \"#utility.yul\":1319:1320   */\n      dup1\n        /* \"#utility.yul\":1312:1324   */\n      revert\n        /* \"#utility.yul\":1274:1326   */\n    tag_362:\n        /* \"#utility.yul\":1345:1374   */\n      tag_363\n        /* \"#utility.yul\":1364:1373   */\n      dup4\n        /* \"#utility.yul\":1345:1374   */\n      tag_344\n      jump\t// in\n    tag_363:\n        /* \"#utility.yul\":1335:1374   */\n      swap5\n        /* \"#utility.yul\":1421:1423   */\n      0x20\n        /* \"#utility.yul\":1406:1424   */\n      swap4\n      swap1\n      swap4\n      add\n        /* \"#utility.yul\":1393:1425   */\n      calldataload\n      swap4\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":1177:1431   */\n      jump\t// out\n        /* \"#utility.yul\":1618:1946   */\n    tag_49:\n        /* \"#utility.yul\":1695:1701   */\n      0x00\n        /* \"#utility.yul\":1703:1709   */\n      dup1\n        /* \"#utility.yul\":1711:1717   */\n      0x00\n        /* \"#utility.yul\":1764:1766   */\n      0x60\n        /* \"#utility.yul\":1752:1761   */\n      dup5\n        /* \"#utility.yul\":1743:1750   */\n      dup7\n        /* \"#utility.yul\":1739:1762   */\n      sub\n        /* \"#utility.yul\":1735:1767   */\n      slt\n        /* \"#utility.yul\":1732:1784   */\n      iszero\n      tag_366\n      jumpi\n        /* \"#utility.yul\":1780:1781   */\n      0x00\n        /* \"#utility.yul\":1777:1778   */\n      dup1\n        /* \"#utility.yul\":1770:1782   */\n      revert\n        /* \"#utility.yul\":1732:1784   */\n    tag_366:\n        /* \"#utility.yul\":1803:1832   */\n      tag_367\n        /* \"#utility.yul\":1822:1831   */\n      dup5\n        /* \"#utility.yul\":1803:1832   */\n      tag_344\n      jump\t// in\n    tag_367:\n        /* \"#utility.yul\":1793:1832   */\n      swap3\n      pop\n        /* \"#utility.yul\":1851:1889   */\n      tag_368\n        /* \"#utility.yul\":1885:1887   */\n      0x20\n        /* \"#utility.yul\":1874:1883   */\n      dup6\n        /* \"#utility.yul\":1870:1888   */\n      add\n        /* \"#utility.yul\":1851:1889   */\n      tag_344\n      jump\t// in\n    tag_368:\n        /* \"#utility.yul\":1841:1889   */\n      swap2\n      pop\n        /* \"#utility.yul\":1936:1938   */\n      0x40\n        /* \"#utility.yul\":1925:1934   */\n      dup5\n        /* \"#utility.yul\":1921:1939   */\n      add\n        /* \"#utility.yul\":1908:1940   */\n      calldataload\n        /* \"#utility.yul\":1898:1940   */\n      swap1\n      pop\n        /* \"#utility.yul\":1618:1946   */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      jump\t// out\n        /* \"#utility.yul\":1951:2078   */\n    tag_345:\n        /* \"#utility.yul\":2012:2022   */\n      0x4e487b71\n        /* \"#utility.yul\":2007:2010   */\n      0xe0\n        /* \"#utility.yul\":2003:2023   */\n      shl\n        /* \"#utility.yul\":2000:2001   */\n      0x00\n        /* \"#utility.yul\":1993:2024   */\n      mstore\n        /* \"#utility.yul\":2043:2047   */\n      0x41\n        /* \"#utility.yul\":2040:2041   */\n      0x04\n        /* \"#utility.yul\":2033:2048   */\n      mstore\n        /* \"#utility.yul\":2067:2071   */\n      0x24\n        /* \"#utility.yul\":2064:2065   */\n      0x00\n        /* \"#utility.yul\":2057:2072   */\n      revert\n        /* \"#utility.yul\":2083:2358   */\n    tag_346:\n        /* \"#utility.yul\":2154:2156   */\n      0x40\n        /* \"#utility.yul\":2148:2157   */\n      mload\n        /* \"#utility.yul\":2219:2221   */\n      0x1f\n        /* \"#utility.yul\":2200:2213   */\n      dup3\n      add\n      not(0x1f)\n        /* \"#utility.yul\":2196:2223   */\n      and\n        /* \"#utility.yul\":2184:2224   */\n      dup2\n      add\n        /* \"#utility.yul\":2254:2272   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":2239:2273   */\n      dup2\n      gt\n        /* \"#utility.yul\":2275:2297   */\n      dup3\n      dup3\n      lt\n        /* \"#utility.yul\":2236:2298   */\n      or\n        /* \"#utility.yul\":2233:2321   */\n      iszero\n      tag_372\n      jumpi\n        /* \"#utility.yul\":2301:2319   */\n      tag_372\n      tag_345\n      jump\t// in\n    tag_372:\n        /* \"#utility.yul\":2337:2339   */\n      0x40\n        /* \"#utility.yul\":2330:2352   */\n      mstore\n        /* \"#utility.yul\":2083:2358   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2363:2894   */\n    tag_347:\n        /* \"#utility.yul\":2406:2411   */\n      0x00\n        /* \"#utility.yul\":2459:2462   */\n      dup3\n        /* \"#utility.yul\":2452:2456   */\n      0x1f\n        /* \"#utility.yul\":2444:2450   */\n      dup4\n        /* \"#utility.yul\":2440:2457   */\n      add\n        /* \"#utility.yul\":2436:2463   */\n      slt\n        /* \"#utility.yul\":2426:2481   */\n      tag_374\n      jumpi\n        /* \"#utility.yul\":2477:2478   */\n      0x00\n        /* \"#utility.yul\":2474:2475   */\n      dup1\n        /* \"#utility.yul\":2467:2479   */\n      revert\n        /* \"#utility.yul\":2426:2481   */\n    tag_374:\n        /* \"#utility.yul\":2513:2519   */\n      dup2\n        /* \"#utility.yul\":2500:2520   */\n      calldataload\n        /* \"#utility.yul\":2539:2557   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":2535:2537   */\n      dup2\n        /* \"#utility.yul\":2532:2558   */\n      gt\n        /* \"#utility.yul\":2529:2581   */\n      iszero\n      tag_376\n      jumpi\n        /* \"#utility.yul\":2561:2579   */\n      tag_376\n      tag_345\n      jump\t// in\n    tag_376:\n        /* \"#utility.yul\":2605:2660   */\n      tag_377\n        /* \"#utility.yul\":2648:2650   */\n      0x1f\n        /* \"#utility.yul\":2629:2642   */\n      dup3\n      add\n      not(0x1f)\n        /* \"#utility.yul\":2625:2652   */\n      and\n        /* \"#utility.yul\":2654:2658   */\n      0x20\n        /* \"#utility.yul\":2621:2659   */\n      add\n        /* \"#utility.yul\":2605:2660   */\n      tag_346\n      jump\t// in\n    tag_377:\n        /* \"#utility.yul\":2685:2687   */\n      dup2\n        /* \"#utility.yul\":2676:2683   */\n      dup2\n        /* \"#utility.yul\":2669:2688   */\n      mstore\n        /* \"#utility.yul\":2731:2734   */\n      dup5\n        /* \"#utility.yul\":2724:2728   */\n      0x20\n        /* \"#utility.yul\":2719:2721   */\n      dup4\n        /* \"#utility.yul\":2711:2717   */\n      dup7\n        /* \"#utility.yul\":2707:2722   */\n      add\n        /* \"#utility.yul\":2703:2729   */\n      add\n        /* \"#utility.yul\":2700:2735   */\n      gt\n        /* \"#utility.yul\":2697:2752   */\n      iszero\n      tag_378\n      jumpi\n        /* \"#utility.yul\":2748:2749   */\n      0x00\n        /* \"#utility.yul\":2745:2746   */\n      dup1\n        /* \"#utility.yul\":2738:2750   */\n      revert\n        /* \"#utility.yul\":2697:2752   */\n    tag_378:\n        /* \"#utility.yul\":2813:2815   */\n      dup2\n        /* \"#utility.yul\":2806:2810   */\n      0x20\n        /* \"#utility.yul\":2798:2804   */\n      dup6\n        /* \"#utility.yul\":2794:2811   */\n      add\n        /* \"#utility.yul\":2787:2791   */\n      0x20\n        /* \"#utility.yul\":2778:2785   */\n      dup4\n        /* \"#utility.yul\":2774:2792   */\n      add\n        /* \"#utility.yul\":2761:2816   */\n      calldatacopy\n        /* \"#utility.yul\":2861:2862   */\n      0x00\n        /* \"#utility.yul\":2836:2852   */\n      swap2\n      dup2\n      add\n        /* \"#utility.yul\":2854:2858   */\n      0x20\n        /* \"#utility.yul\":2832:2859   */\n      add\n        /* \"#utility.yul\":2825:2863   */\n      swap2\n      swap1\n      swap2\n      mstore\n        /* \"#utility.yul\":2840:2847   */\n      swap4\n        /* \"#utility.yul\":2363:2894   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2899:3812   */\n    tag_54:\n        /* \"#utility.yul\":3021:3027   */\n      0x00\n        /* \"#utility.yul\":3029:3035   */\n      dup1\n        /* \"#utility.yul\":3037:3043   */\n      0x00\n        /* \"#utility.yul\":3045:3051   */\n      dup1\n        /* \"#utility.yul\":3053:3059   */\n      0x00\n        /* \"#utility.yul\":3061:3067   */\n      dup1\n        /* \"#utility.yul\":3114:3117   */\n      0xc0\n        /* \"#utility.yul\":3102:3111   */\n      dup8\n        /* \"#utility.yul\":3093:3100   */\n      dup10\n        /* \"#utility.yul\":3089:3112   */\n      sub\n        /* \"#utility.yul\":3085:3118   */\n      slt\n        /* \"#utility.yul\":3082:3135   */\n      iszero\n      tag_380\n      jumpi\n        /* \"#utility.yul\":3131:3132   */\n      0x00\n        /* \"#utility.yul\":3128:3129   */\n      dup1\n        /* \"#utility.yul\":3121:3133   */\n      revert\n        /* \"#utility.yul\":3082:3135   */\n    tag_380:\n        /* \"#utility.yul\":3171:3180   */\n      dup7\n        /* \"#utility.yul\":3158:3181   */\n      calldataload\n        /* \"#utility.yul\":3200:3218   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":3241:3243   */\n      dup1\n        /* \"#utility.yul\":3233:3239   */\n      dup3\n        /* \"#utility.yul\":3230:3244   */\n      gt\n        /* \"#utility.yul\":3227:3261   */\n      iszero\n      tag_381\n      jumpi\n        /* \"#utility.yul\":3257:3258   */\n      0x00\n        /* \"#utility.yul\":3254:3255   */\n      dup1\n        /* \"#utility.yul\":3247:3259   */\n      revert\n        /* \"#utility.yul\":3227:3261   */\n    tag_381:\n        /* \"#utility.yul\":3280:3330   */\n      tag_382\n        /* \"#utility.yul\":3322:3329   */\n      dup11\n        /* \"#utility.yul\":3313:3319   */\n      dup4\n        /* \"#utility.yul\":3302:3311   */\n      dup12\n        /* \"#utility.yul\":3298:3320   */\n      add\n        /* \"#utility.yul\":3280:3330   */\n      tag_347\n      jump\t// in\n    tag_382:\n        /* \"#utility.yul\":3270:3330   */\n      swap8\n      pop\n        /* \"#utility.yul\":3383:3385   */\n      0x20\n        /* \"#utility.yul\":3372:3381   */\n      dup10\n        /* \"#utility.yul\":3368:3386   */\n      add\n        /* \"#utility.yul\":3355:3387   */\n      calldataload\n        /* \"#utility.yul\":3339:3387   */\n      swap2\n      pop\n        /* \"#utility.yul\":3412:3414   */\n      dup1\n        /* \"#utility.yul\":3402:3410   */\n      dup3\n        /* \"#utility.yul\":3399:3415   */\n      gt\n        /* \"#utility.yul\":3396:3432   */\n      iszero\n      tag_383\n      jumpi\n        /* \"#utility.yul\":3428:3429   */\n      0x00\n        /* \"#utility.yul\":3425:3426   */\n      dup1\n        /* \"#utility.yul\":3418:3430   */\n      revert\n        /* \"#utility.yul\":3396:3432   */\n    tag_383:\n      pop\n        /* \"#utility.yul\":3451:3503   */\n      tag_384\n        /* \"#utility.yul\":3495:3502   */\n      dup10\n        /* \"#utility.yul\":3484:3492   */\n      dup3\n        /* \"#utility.yul\":3473:3482   */\n      dup11\n        /* \"#utility.yul\":3469:3493   */\n      add\n        /* \"#utility.yul\":3451:3503   */\n      tag_347\n      jump\t// in\n    tag_384:\n        /* \"#utility.yul\":3441:3503   */\n      swap6\n      pop\n      pop\n        /* \"#utility.yul\":3553:3555   */\n      0x40\n        /* \"#utility.yul\":3542:3551   */\n      dup8\n        /* \"#utility.yul\":3538:3556   */\n      add\n        /* \"#utility.yul\":3525:3557   */\n      calldataload\n        /* \"#utility.yul\":3597:3601   */\n      0xff\n        /* \"#utility.yul\":3590:3595   */\n      dup2\n        /* \"#utility.yul\":3586:3602   */\n      and\n        /* \"#utility.yul\":3579:3584   */\n      dup2\n        /* \"#utility.yul\":3576:3603   */\n      eq\n        /* \"#utility.yul\":3566:3621   */\n      tag_385\n      jumpi\n        /* \"#utility.yul\":3617:3618   */\n      0x00\n        /* \"#utility.yul\":3614:3615   */\n      dup1\n        /* \"#utility.yul\":3607:3619   */\n      revert\n        /* \"#utility.yul\":3566:3621   */\n    tag_385:\n        /* \"#utility.yul\":3640:3645   */\n      swap4\n      pop\n        /* \"#utility.yul\":3692:3694   */\n      0x60\n        /* \"#utility.yul\":3677:3695   */\n      dup8\n      add\n        /* \"#utility.yul\":3664:3696   */\n      calldataload\n      swap3\n      pop\n        /* \"#utility.yul\":3743:3746   */\n      0x80\n        /* \"#utility.yul\":3728:3747   */\n      dup8\n      add\n        /* \"#utility.yul\":3715:3748   */\n      calldataload\n      swap2\n      pop\n        /* \"#utility.yul\":3767:3806   */\n      tag_386\n        /* \"#utility.yul\":3801:3804   */\n      0xa0\n        /* \"#utility.yul\":3786:3805   */\n      dup9\n      add\n        /* \"#utility.yul\":3767:3806   */\n      tag_344\n      jump\t// in\n    tag_386:\n        /* \"#utility.yul\":3757:3806   */\n      swap1\n      pop\n        /* \"#utility.yul\":2899:3812   */\n      swap3\n      swap6\n      pop\n      swap3\n      swap6\n      pop\n      swap3\n      swap6\n      jump\t// out\n        /* \"#utility.yul\":4006:4664   */\n    tag_70:\n        /* \"#utility.yul\":4177:4179   */\n      0x20\n        /* \"#utility.yul\":4229:4250   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":4299:4312   */\n      dup3\n      mload\n        /* \"#utility.yul\":4202:4220   */\n      dup3\n      dup3\n      add\n        /* \"#utility.yul\":4321:4343   */\n      dup2\n      swap1\n      mstore\n        /* \"#utility.yul\":4148:4152   */\n      0x00\n      swap2\n        /* \"#utility.yul\":4177:4179   */\n      swap1\n        /* \"#utility.yul\":4400:4415   */\n      dup5\n      dup3\n      add\n      swap1\n        /* \"#utility.yul\":4374:4376   */\n      0x40\n        /* \"#utility.yul\":4359:4377   */\n      dup6\n      add\n      swap1\n        /* \"#utility.yul\":4148:4152   */\n      dup5\n        /* \"#utility.yul\":4443:4638   */\n    tag_389:\n        /* \"#utility.yul\":4457:4463   */\n      dup2\n        /* \"#utility.yul\":4454:4455   */\n      dup2\n        /* \"#utility.yul\":4451:4464   */\n      lt\n        /* \"#utility.yul\":4443:4638   */\n      iszero\n      tag_391\n      jumpi\n        /* \"#utility.yul\":4522:4535   */\n      dup4\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":4518:4557   */\n      and\n        /* \"#utility.yul\":4506:4558   */\n      dup4\n      mstore\n        /* \"#utility.yul\":4613:4628   */\n      swap3\n      dup5\n      add\n      swap3\n        /* \"#utility.yul\":4578:4590   */\n      swap2\n      dup5\n      add\n      swap2\n        /* \"#utility.yul\":4554:4555   */\n      0x01\n        /* \"#utility.yul\":4472:4481   */\n      add\n        /* \"#utility.yul\":4443:4638   */\n      jump(tag_389)\n    tag_391:\n      pop\n        /* \"#utility.yul\":4655:4658   */\n      swap1\n      swap7\n        /* \"#utility.yul\":4006:4664   */\n      swap6\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4669:5060   */\n    tag_73:\n        /* \"#utility.yul\":4755:4761   */\n      0x00\n        /* \"#utility.yul\":4763:4769   */\n      dup1\n        /* \"#utility.yul\":4771:4777   */\n      0x00\n        /* \"#utility.yul\":4779:4785   */\n      dup1\n        /* \"#utility.yul\":4832:4835   */\n      0x80\n        /* \"#utility.yul\":4820:4829   */\n      dup6\n        /* \"#utility.yul\":4811:4818   */\n      dup8\n        /* \"#utility.yul\":4807:4830   */\n      sub\n        /* \"#utility.yul\":4803:4836   */\n      slt\n        /* \"#utility.yul\":4800:4853   */\n      iszero\n      tag_393\n      jumpi\n        /* \"#utility.yul\":4849:4850   */\n      0x00\n        /* \"#utility.yul\":4846:4847   */\n      dup1\n        /* \"#utility.yul\":4839:4851   */\n      revert\n        /* \"#utility.yul\":4800:4853   */\n    tag_393:\n        /* \"#utility.yul\":4872:4901   */\n      tag_394\n        /* \"#utility.yul\":4891:4900   */\n      dup6\n        /* \"#utility.yul\":4872:4901   */\n      tag_344\n      jump\t// in\n    tag_394:\n        /* \"#utility.yul\":4862:4901   */\n      swap7\n        /* \"#utility.yul\":4948:4950   */\n      0x20\n        /* \"#utility.yul\":4933:4951   */\n      dup7\n      add\n        /* \"#utility.yul\":4920:4952   */\n      calldataload\n      swap7\n      pop\n        /* \"#utility.yul\":4999:5001   */\n      0x40\n        /* \"#utility.yul\":4984:5002   */\n      dup7\n      add\n        /* \"#utility.yul\":4971:5003   */\n      calldataload\n      swap6\n        /* \"#utility.yul\":5050:5052   */\n      0x60\n        /* \"#utility.yul\":5035:5053   */\n      add\n        /* \"#utility.yul\":5022:5054   */\n      calldataload\n      swap5\n      pop\n        /* \"#utility.yul\":4669:5060   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5273:6225   */\n    tag_90:\n        /* \"#utility.yul\":5357:5363   */\n      0x00\n        /* \"#utility.yul\":5388:5390   */\n      0x20\n        /* \"#utility.yul\":5431:5433   */\n      dup1\n        /* \"#utility.yul\":5419:5428   */\n      dup4\n        /* \"#utility.yul\":5410:5417   */\n      dup6\n        /* \"#utility.yul\":5406:5429   */\n      sub\n        /* \"#utility.yul\":5402:5434   */\n      slt\n        /* \"#utility.yul\":5399:5451   */\n      iszero\n      tag_397\n      jumpi\n        /* \"#utility.yul\":5447:5448   */\n      0x00\n        /* \"#utility.yul\":5444:5445   */\n      dup1\n        /* \"#utility.yul\":5437:5449   */\n      revert\n        /* \"#utility.yul\":5399:5451   */\n    tag_397:\n        /* \"#utility.yul\":5487:5496   */\n      dup3\n        /* \"#utility.yul\":5474:5497   */\n      calldataload\n        /* \"#utility.yul\":5516:5534   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":5557:5559   */\n      dup1\n        /* \"#utility.yul\":5549:5555   */\n      dup3\n        /* \"#utility.yul\":5546:5560   */\n      gt\n        /* \"#utility.yul\":5543:5577   */\n      iszero\n      tag_398\n      jumpi\n        /* \"#utility.yul\":5573:5574   */\n      0x00\n        /* \"#utility.yul\":5570:5571   */\n      dup1\n        /* \"#utility.yul\":5563:5575   */\n      revert\n        /* \"#utility.yul\":5543:5577   */\n    tag_398:\n        /* \"#utility.yul\":5611:5617   */\n      dup2\n        /* \"#utility.yul\":5600:5609   */\n      dup6\n        /* \"#utility.yul\":5596:5618   */\n      add\n        /* \"#utility.yul\":5586:5618   */\n      swap2\n      pop\n        /* \"#utility.yul\":5656:5663   */\n      dup6\n        /* \"#utility.yul\":5649:5653   */\n      0x1f\n        /* \"#utility.yul\":5645:5647   */\n      dup4\n        /* \"#utility.yul\":5641:5654   */\n      add\n        /* \"#utility.yul\":5637:5664   */\n      slt\n        /* \"#utility.yul\":5627:5682   */\n      tag_399\n      jumpi\n        /* \"#utility.yul\":5678:5679   */\n      0x00\n        /* \"#utility.yul\":5675:5676   */\n      dup1\n        /* \"#utility.yul\":5668:5680   */\n      revert\n        /* \"#utility.yul\":5627:5682   */\n    tag_399:\n        /* \"#utility.yul\":5714:5716   */\n      dup2\n        /* \"#utility.yul\":5701:5717   */\n      calldataload\n        /* \"#utility.yul\":5736:5738   */\n      dup2\n        /* \"#utility.yul\":5732:5734   */\n      dup2\n        /* \"#utility.yul\":5729:5739   */\n      gt\n        /* \"#utility.yul\":5726:5762   */\n      iszero\n      tag_401\n      jumpi\n        /* \"#utility.yul\":5742:5760   */\n      tag_401\n      tag_345\n      jump\t// in\n    tag_401:\n        /* \"#utility.yul\":5788:5790   */\n      dup1\n        /* \"#utility.yul\":5785:5786   */\n      0x05\n        /* \"#utility.yul\":5781:5791   */\n      shl\n        /* \"#utility.yul\":5771:5791   */\n      swap2\n      pop\n        /* \"#utility.yul\":5811:5839   */\n      tag_402\n        /* \"#utility.yul\":5835:5837   */\n      dup5\n        /* \"#utility.yul\":5831:5833   */\n      dup4\n        /* \"#utility.yul\":5827:5838   */\n      add\n        /* \"#utility.yul\":5811:5839   */\n      tag_346\n      jump\t// in\n    tag_402:\n        /* \"#utility.yul\":5873:5888   */\n      dup2\n      dup2\n      mstore\n        /* \"#utility.yul\":5943:5954   */\n      swap2\n      dup4\n      add\n        /* \"#utility.yul\":5939:5959   */\n      dup5\n      add\n      swap2\n        /* \"#utility.yul\":5904:5916   */\n      dup5\n      dup2\n      add\n      swap1\n        /* \"#utility.yul\":5971:5990   */\n      dup9\n      dup5\n      gt\n        /* \"#utility.yul\":5968:6007   */\n      iszero\n      tag_403\n      jumpi\n        /* \"#utility.yul\":6003:6004   */\n      0x00\n        /* \"#utility.yul\":6000:6001   */\n      dup1\n        /* \"#utility.yul\":5993:6005   */\n      revert\n        /* \"#utility.yul\":5968:6007   */\n    tag_403:\n        /* \"#utility.yul\":6027:6038   */\n      swap4\n      dup6\n      add\n      swap4\n        /* \"#utility.yul\":6047:6195   */\n    tag_404:\n        /* \"#utility.yul\":6063:6069   */\n      dup4\n        /* \"#utility.yul\":6058:6061   */\n      dup6\n        /* \"#utility.yul\":6055:6070   */\n      lt\n        /* \"#utility.yul\":6047:6195   */\n      iszero\n      tag_406\n      jumpi\n        /* \"#utility.yul\":6129:6152   */\n      tag_407\n        /* \"#utility.yul\":6148:6151   */\n      dup6\n        /* \"#utility.yul\":6129:6152   */\n      tag_344\n      jump\t// in\n    tag_407:\n        /* \"#utility.yul\":6117:6153   */\n      dup3\n      mstore\n        /* \"#utility.yul\":6080:6092   */\n      swap4\n      dup6\n      add\n      swap4\n        /* \"#utility.yul\":6173:6185   */\n      swap1\n      dup6\n      add\n      swap1\n        /* \"#utility.yul\":6047:6195   */\n      jump(tag_404)\n    tag_406:\n        /* \"#utility.yul\":6214:6219   */\n      swap9\n        /* \"#utility.yul\":5273:6225   */\n      swap8\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6230:6490   */\n    tag_105:\n        /* \"#utility.yul\":6298:6304   */\n      0x00\n        /* \"#utility.yul\":6306:6312   */\n      dup1\n        /* \"#utility.yul\":6359:6361   */\n      0x40\n        /* \"#utility.yul\":6347:6356   */\n      dup4\n        /* \"#utility.yul\":6338:6345   */\n      dup6\n        /* \"#utility.yul\":6334:6357   */\n      sub\n        /* \"#utility.yul\":6330:6362   */\n      slt\n        /* \"#utility.yul\":6327:6379   */\n      iszero\n      tag_409\n      jumpi\n        /* \"#utility.yul\":6375:6376   */\n      0x00\n        /* \"#utility.yul\":6372:6373   */\n      dup1\n        /* \"#utility.yul\":6365:6377   */\n      revert\n        /* \"#utility.yul\":6327:6379   */\n    tag_409:\n        /* \"#utility.yul\":6398:6427   */\n      tag_410\n        /* \"#utility.yul\":6417:6426   */\n      dup4\n        /* \"#utility.yul\":6398:6427   */\n      tag_344\n      jump\t// in\n    tag_410:\n        /* \"#utility.yul\":6388:6427   */\n      swap2\n      pop\n        /* \"#utility.yul\":6446:6484   */\n      tag_411\n        /* \"#utility.yul\":6480:6482   */\n      0x20\n        /* \"#utility.yul\":6469:6478   */\n      dup5\n        /* \"#utility.yul\":6465:6483   */\n      add\n        /* \"#utility.yul\":6446:6484   */\n      tag_344\n      jump\t// in\n    tag_411:\n        /* \"#utility.yul\":6436:6484   */\n      swap1\n      pop\n        /* \"#utility.yul\":6230:6490   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6495:6675   */\n    tag_113:\n        /* \"#utility.yul\":6554:6560   */\n      0x00\n        /* \"#utility.yul\":6607:6609   */\n      0x20\n        /* \"#utility.yul\":6595:6604   */\n      dup3\n        /* \"#utility.yul\":6586:6593   */\n      dup5\n        /* \"#utility.yul\":6582:6605   */\n      sub\n        /* \"#utility.yul\":6578:6610   */\n      slt\n        /* \"#utility.yul\":6575:6627   */\n      iszero\n      tag_413\n      jumpi\n        /* \"#utility.yul\":6623:6624   */\n      0x00\n        /* \"#utility.yul\":6620:6621   */\n      dup1\n        /* \"#utility.yul\":6613:6625   */\n      revert\n        /* \"#utility.yul\":6575:6627   */\n    tag_413:\n      pop\n        /* \"#utility.yul\":6646:6669   */\n      calldataload\n      swap2\n        /* \"#utility.yul\":6495:6675   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6680:7060   */\n    tag_118:\n        /* \"#utility.yul\":6759:6760   */\n      0x01\n        /* \"#utility.yul\":6755:6767   */\n      dup2\n      dup2\n      shr\n      swap1\n        /* \"#utility.yul\":6802:6814   */\n      dup3\n      and\n      dup1\n        /* \"#utility.yul\":6823:6884   */\n      tag_415\n      jumpi\n        /* \"#utility.yul\":6877:6881   */\n      0x7f\n        /* \"#utility.yul\":6869:6875   */\n      dup3\n        /* \"#utility.yul\":6865:6882   */\n      and\n        /* \"#utility.yul\":6855:6882   */\n      swap2\n      pop\n        /* \"#utility.yul\":6823:6884   */\n    tag_415:\n        /* \"#utility.yul\":6930:6932   */\n      0x20\n        /* \"#utility.yul\":6922:6928   */\n      dup3\n        /* \"#utility.yul\":6919:6933   */\n      lt\n        /* \"#utility.yul\":6899:6917   */\n      dup2\n        /* \"#utility.yul\":6896:6934   */\n      eq\n        /* \"#utility.yul\":6893:7054   */\n      iszero\n      tag_416\n      jumpi\n        /* \"#utility.yul\":6976:6986   */\n      0x4e487b71\n        /* \"#utility.yul\":6971:6974   */\n      0xe0\n        /* \"#utility.yul\":6967:6987   */\n      shl\n        /* \"#utility.yul\":6964:6965   */\n      0x00\n        /* \"#utility.yul\":6957:6988   */\n      mstore\n        /* \"#utility.yul\":7011:7015   */\n      0x22\n        /* \"#utility.yul\":7008:7009   */\n      0x04\n        /* \"#utility.yul\":7001:7016   */\n      mstore\n        /* \"#utility.yul\":7039:7043   */\n      0x24\n        /* \"#utility.yul\":7036:7037   */\n      0x00\n        /* \"#utility.yul\":7029:7044   */\n      revert\n        /* \"#utility.yul\":6893:7054   */\n    tag_416:\n      pop\n        /* \"#utility.yul\":6680:7060   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7679:7806   */\n    tag_348:\n        /* \"#utility.yul\":7740:7750   */\n      0x4e487b71\n        /* \"#utility.yul\":7735:7738   */\n      0xe0\n        /* \"#utility.yul\":7731:7751   */\n      shl\n        /* \"#utility.yul\":7728:7729   */\n      0x00\n        /* \"#utility.yul\":7721:7752   */\n      mstore\n        /* \"#utility.yul\":7771:7775   */\n      0x11\n        /* \"#utility.yul\":7768:7769   */\n      0x04\n        /* \"#utility.yul\":7761:7776   */\n      mstore\n        /* \"#utility.yul\":7795:7799   */\n      0x24\n        /* \"#utility.yul\":7792:7793   */\n      0x00\n        /* \"#utility.yul\":7785:7800   */\n      revert\n        /* \"#utility.yul\":7811:7939   */\n    tag_165:\n        /* \"#utility.yul\":7851:7854   */\n      0x00\n        /* \"#utility.yul\":7882:7883   */\n      dup3\n        /* \"#utility.yul\":7878:7884   */\n      not\n        /* \"#utility.yul\":7875:7876   */\n      dup3\n        /* \"#utility.yul\":7872:7885   */\n      gt\n        /* \"#utility.yul\":7869:7908   */\n      iszero\n      tag_422\n      jumpi\n        /* \"#utility.yul\":7888:7906   */\n      tag_422\n      tag_348\n      jump\t// in\n    tag_422:\n      pop\n        /* \"#utility.yul\":7924:7933   */\n      add\n      swap1\n        /* \"#utility.yul\":7811:7939   */\n      jump\t// out\n        /* \"#utility.yul\":11485:11892   */\n    tag_260:\n        /* \"#utility.yul\":11687:11689   */\n      0x20\n        /* \"#utility.yul\":11669:11690   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":11726:11728   */\n      0x2b\n        /* \"#utility.yul\":11706:11724   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":11699:11729   */\n      mstore\n        /* \"#utility.yul\":11765:11799   */\n      0x496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069\n        /* \"#utility.yul\":11760:11762   */\n      0x40\n        /* \"#utility.yul\":11745:11763   */\n      dup3\n      add\n        /* \"#utility.yul\":11738:11800   */\n      mstore\n      shl(0xa8, 0x6e697469616c697a696e67)\n        /* \"#utility.yul\":11831:11833   */\n      0x60\n        /* \"#utility.yul\":11816:11834   */\n      dup3\n      add\n        /* \"#utility.yul\":11809:11850   */\n      mstore\n        /* \"#utility.yul\":11882:11885   */\n      0x80\n        /* \"#utility.yul\":11867:11886   */\n      add\n      swap1\n        /* \"#utility.yul\":11485:11892   */\n      jump\t// out\n        /* \"#utility.yul\":12257:12474   */\n    tag_281:\n        /* \"#utility.yul\":12297:12298   */\n      0x00\n        /* \"#utility.yul\":12323:12324   */\n      dup3\n        /* \"#utility.yul\":12313:12445   */\n      tag_435\n      jumpi\n        /* \"#utility.yul\":12367:12377   */\n      0x4e487b71\n        /* \"#utility.yul\":12362:12365   */\n      0xe0\n        /* \"#utility.yul\":12358:12378   */\n      shl\n        /* \"#utility.yul\":12355:12356   */\n      0x00\n        /* \"#utility.yul\":12348:12379   */\n      mstore\n        /* \"#utility.yul\":12402:12406   */\n      0x12\n        /* \"#utility.yul\":12399:12400   */\n      0x04\n        /* \"#utility.yul\":12392:12407   */\n      mstore\n        /* \"#utility.yul\":12430:12434   */\n      0x24\n        /* \"#utility.yul\":12427:12428   */\n      0x00\n        /* \"#utility.yul\":12420:12435   */\n      revert\n        /* \"#utility.yul\":12313:12445   */\n    tag_435:\n      pop\n        /* \"#utility.yul\":12459:12468   */\n      div\n      swap1\n        /* \"#utility.yul\":12257:12474   */\n      jump\t// out\n        /* \"#utility.yul\":12479:12604   */\n    tag_285:\n        /* \"#utility.yul\":12519:12523   */\n      0x00\n        /* \"#utility.yul\":12547:12548   */\n      dup3\n        /* \"#utility.yul\":12544:12545   */\n      dup3\n        /* \"#utility.yul\":12541:12549   */\n      lt\n        /* \"#utility.yul\":12538:12572   */\n      iszero\n      tag_438\n      jumpi\n        /* \"#utility.yul\":12552:12570   */\n      tag_438\n      tag_348\n      jump\t// in\n    tag_438:\n      pop\n        /* \"#utility.yul\":12589:12598   */\n      sub\n      swap1\n        /* \"#utility.yul\":12479:12604   */\n      jump\t// out\n        /* \"#utility.yul\":12970:13097   */\n    tag_300:\n        /* \"#utility.yul\":13031:13041   */\n      0x4e487b71\n        /* \"#utility.yul\":13026:13029   */\n      0xe0\n        /* \"#utility.yul\":13022:13042   */\n      shl\n        /* \"#utility.yul\":13019:13020   */\n      0x00\n        /* \"#utility.yul\":13012:13043   */\n      mstore\n        /* \"#utility.yul\":13062:13066   */\n      0x32\n        /* \"#utility.yul\":13059:13060   */\n      0x04\n        /* \"#utility.yul\":13052:13067   */\n      mstore\n        /* \"#utility.yul\":13086:13090   */\n      0x24\n        /* \"#utility.yul\":13083:13084   */\n      0x00\n        /* \"#utility.yul\":13076:13091   */\n      revert\n        /* \"#utility.yul\":13102:13311   */\n    tag_302:\n        /* \"#utility.yul\":13140:13143   */\n      0x00\n        /* \"#utility.yul\":13168:13186   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":13221:13223   */\n      dup1\n        /* \"#utility.yul\":13214:13219   */\n      dup4\n        /* \"#utility.yul\":13210:13224   */\n      and\n        /* \"#utility.yul\":13248:13250   */\n      dup2\n        /* \"#utility.yul\":13239:13246   */\n      dup2\n        /* \"#utility.yul\":13236:13251   */\n      eq\n        /* \"#utility.yul\":13233:13274   */\n      iszero\n      tag_443\n      jumpi\n        /* \"#utility.yul\":13254:13272   */\n      tag_443\n      tag_348\n      jump\t// in\n    tag_443:\n        /* \"#utility.yul\":13303:13304   */\n      0x01\n        /* \"#utility.yul\":13290:13305   */\n      add\n      swap4\n        /* \"#utility.yul\":13102:13311   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n\n    auxdata: 0xa2646970667358221220fd17e96138895d786446795db062db4024e697d3e09e8b837b851d4d79a428df64736f6c634300080b0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b506116ca806100206000396000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c806370a08231116100b8578063a457c2d71161007c578063a457c2d7146102b2578063a9059cbb146102c5578063b722d0a5146102d8578063dd62ed3e146102e9578063f2fde38b146102fc578063f93422851461030f57600080fd5b806370a0823114610241578063715018a61461026a5780638da5cb5b1461027257806395d89b4114610297578063a37726621461029f57600080fd5b80632cd77a5a1161010a5780632cd77a5a146101d9578063313ce567146101ee57806339509351146101fd5780633b124fe71461021057806346f0975a1461021957806355b7dc671461022e57600080fd5b806306fdde031461014757806307c351dd14610165578063095ea7b3146101a157806318160ddd146101b457806323b872dd146101c6575b600080fd5b61014f610332565b60405161015c919061119b565b60405180910390f35b61019161017336600461120c565b6001600160a01b03166000908152609d602052604090205460ff1690565b604051901515815260200161015c565b6101916101af36600461122e565b6103c4565b6035545b60405190815260200161015c565b6101916101d4366004611258565b6103dc565b6101ec6101e736600461134b565b610400565b005b6040516012815260200161015c565b61019161020b36600461122e565b610587565b6101b8609a5481565b6102216105a9565b60405161015c91906113ea565b6101ec61023c366004611437565b61060a565b6101b861024f36600461120c565b6001600160a01b031660009081526033602052604090205490565b6101ec6106c2565b6065546001600160a01b03165b6040516001600160a01b03909116815260200161015c565b61014f6106d6565b6101ec6102ad366004611470565b6106e5565b6101916102c036600461122e565b610784565b6101916102d336600461122e565b6107ff565b609b546001600160a01b031661027f565b6101b86102f736600461151d565b61080d565b6101ec61030a36600461120c565b610838565b61019161031d366004611550565b609e6020526000908152604090205460ff1681565b60606036805461034190611569565b80601f016020809104026020016040519081016040528092919081815260200182805461036d90611569565b80156103ba5780601f1061038f576101008083540402835291602001916103ba565b820191906000526020600020905b81548152906001019060200180831161039d57829003601f168201915b5050505050905090565b6000336103d28185856108ae565b5060019392505050565b6000336103ea8582856109d2565b6103f5858585610a4c565b506001949350505050565b600054610100900460ff16158080156104205750600054600160ff909116105b8061043a5750303b15801561043a575060005460ff166001145b6104a25760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff1916600117905580156104c5576000805461ff0019166101001790555b6104cd610c1a565b6104d78787610c49565b86516104ea9060979060208a019061108f565b5085516104fe90609890602089019061108f565b506099805460ff191660ff8716179055609a839055609b80546001600160a01b0319166001600160a01b0384161790556105388285610c7e565b801561057e576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050565b6000336103d281858561059a838361080d565b6105a491906115ba565b6108ae565b6060609c8054806020026020016040519081016040528092919081815260200182805480156103ba57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116105e3575050505050905090565b6000838152609e602052604090205460ff161561065c5760405162461bcd60e51b815260206004820152601060248201526f556e697175652069642065786973747360801b6044820152606401610499565b3360006106716065546001600160a01b031690565b6000868152609e60205260409020805460ff1916600117905590506001600160a01b0382811690821614156106b0576106aa86856107ff565b506106ba565b6106ba8685610d5d565b505050505050565b6106ca610d98565b6106d46000610df2565b565b60606037805461034190611569565b6106ed610d98565b610754609c80548060200260200160405190810160405280929190818152602001828054801561074657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610728575b50505050506000609d610e44565b610760609c6000611113565b805161077390609c906020840190611131565b50610781816001609d610e44565b50565b60003381610792828661080d565b9050838110156107f25760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610499565b6103f582868684036108ae565b6000336103d2818585610a4c565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b610840610d98565b6001600160a01b0381166108a55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610499565b61078181610df2565b6001600160a01b0383166109105760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610499565b6001600160a01b0382166109715760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610499565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b60006109de848461080d565b90506000198114610a465781811015610a395760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610499565b610a4684848484036108ae565b50505050565b6001600160a01b038316610ab05760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610499565b6001600160a01b038216610b125760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610499565b6001600160a01b03831660009081526033602052604090205481811015610b8a5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610499565b6001600160a01b03808516600090815260336020526040808220858503905591851681529081208054849290610bc19084906115ba565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610c0d91815260200190565b60405180910390a3610a46565b600054610100900460ff16610c415760405162461bcd60e51b8152600401610499906115d2565b6106d4610ec3565b600054610100900460ff16610c705760405162461bcd60e51b8152600401610499906115d2565b610c7a8282610ef3565b5050565b6001600160a01b038216610cd45760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610499565b8060356000828254610ce691906115ba565b90915550506001600160a01b03821660009081526033602052604081208054839290610d139084906115ba565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6000609a5482610d6d919061161d565b9050610d793382610f41565b6000610d85828461163f565b9050610d9184826107ff565b5050505050565b6065546001600160a01b031633146106d45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610499565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60005b83518167ffffffffffffffff161015610a465782826000868467ffffffffffffffff1681518110610e7a57610e7a611656565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580610eb68161166c565b915050610e47565b505050565b600054610100900460ff16610eea5760405162461bcd60e51b8152600401610499906115d2565b6106d433610df2565b600054610100900460ff16610f1a5760405162461bcd60e51b8152600401610499906115d2565b8151610f2d90603690602085019061108f565b508051610ebe90603790602084019061108f565b6001600160a01b038216610fa15760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610499565b6001600160a01b038216600090815260336020526040902054818110156110155760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610499565b6001600160a01b038316600090815260336020526040812083830390556035805484929061104490849061163f565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b82805461109b90611569565b90600052602060002090601f0160209004810192826110bd5760008555611103565b82601f106110d657805160ff1916838001178555611103565b82800160010185558215611103579182015b828111156111035782518255916020019190600101906110e8565b5061110f929150611186565b5090565b50805460008255906000526020600020908101906107819190611186565b828054828255906000526020600020908101928215611103579160200282015b8281111561110357825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190611151565b5b8082111561110f5760008155600101611187565b600060208083528351808285015260005b818110156111c8578581018301518582016040015282016111ac565b818111156111da576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461120757600080fd5b919050565b60006020828403121561121e57600080fd5b611227826111f0565b9392505050565b6000806040838503121561124157600080fd5b61124a836111f0565b946020939093013593505050565b60008060006060848603121561126d57600080fd5b611276846111f0565b9250611284602085016111f0565b9150604084013590509250925092565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156112d3576112d3611294565b604052919050565b600082601f8301126112ec57600080fd5b813567ffffffffffffffff81111561130657611306611294565b611319601f8201601f19166020016112aa565b81815284602083860101111561132e57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060008060c0878903121561136457600080fd5b863567ffffffffffffffff8082111561137c57600080fd5b6113888a838b016112db565b9750602089013591508082111561139e57600080fd5b506113ab89828a016112db565b955050604087013560ff811681146113c257600080fd5b935060608701359250608087013591506113de60a088016111f0565b90509295509295509295565b6020808252825182820181905260009190848201906040850190845b8181101561142b5783516001600160a01b031683529284019291840191600101611406565b50909695505050505050565b6000806000806080858703121561144d57600080fd5b611456856111f0565b966020860135965060408601359560600135945092505050565b6000602080838503121561148357600080fd5b823567ffffffffffffffff8082111561149b57600080fd5b818501915085601f8301126114af57600080fd5b8135818111156114c1576114c1611294565b8060051b91506114d28483016112aa565b81815291830184019184810190888411156114ec57600080fd5b938501935b8385101561151157611502856111f0565b825293850193908501906114f1565b98975050505050505050565b6000806040838503121561153057600080fd5b611539836111f0565b9150611547602084016111f0565b90509250929050565b60006020828403121561156257600080fd5b5035919050565b600181811c9082168061157d57607f821691505b6020821081141561159e57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600082198211156115cd576115cd6115a4565b500190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60008261163a57634e487b7160e01b600052601260045260246000fd5b500490565b600082821015611651576116516115a4565b500390565b634e487b7160e01b600052603260045260246000fd5b600067ffffffffffffffff8083168181141561168a5761168a6115a4565b600101939250505056fea2646970667358221220fd17e96138895d786446795db062db4024e697d3e09e8b837b851d4d79a428df64736f6c634300080b0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x16CA DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x142 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0xB8 JUMPI DUP1 PUSH4 0xA457C2D7 GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x2B2 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x2C5 JUMPI DUP1 PUSH4 0xB722D0A5 EQ PUSH2 0x2D8 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x2E9 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x2FC JUMPI DUP1 PUSH4 0xF9342285 EQ PUSH2 0x30F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0x241 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x26A JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x272 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x297 JUMPI DUP1 PUSH4 0xA3772662 EQ PUSH2 0x29F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2CD77A5A GT PUSH2 0x10A JUMPI DUP1 PUSH4 0x2CD77A5A EQ PUSH2 0x1D9 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x1EE JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x1FD JUMPI DUP1 PUSH4 0x3B124FE7 EQ PUSH2 0x210 JUMPI DUP1 PUSH4 0x46F0975A EQ PUSH2 0x219 JUMPI DUP1 PUSH4 0x55B7DC67 EQ PUSH2 0x22E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x147 JUMPI DUP1 PUSH4 0x7C351DD EQ PUSH2 0x165 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x1A1 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x1B4 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1C6 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x14F PUSH2 0x332 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x15C SWAP2 SWAP1 PUSH2 0x119B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x191 PUSH2 0x173 CALLDATASIZE PUSH1 0x4 PUSH2 0x120C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9D PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x15C JUMP JUMPDEST PUSH2 0x191 PUSH2 0x1AF CALLDATASIZE PUSH1 0x4 PUSH2 0x122E JUMP JUMPDEST PUSH2 0x3C4 JUMP JUMPDEST PUSH1 0x35 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x15C JUMP JUMPDEST PUSH2 0x191 PUSH2 0x1D4 CALLDATASIZE PUSH1 0x4 PUSH2 0x1258 JUMP JUMPDEST PUSH2 0x3DC JUMP JUMPDEST PUSH2 0x1EC PUSH2 0x1E7 CALLDATASIZE PUSH1 0x4 PUSH2 0x134B JUMP JUMPDEST PUSH2 0x400 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x15C JUMP JUMPDEST PUSH2 0x191 PUSH2 0x20B CALLDATASIZE PUSH1 0x4 PUSH2 0x122E JUMP JUMPDEST PUSH2 0x587 JUMP JUMPDEST PUSH2 0x1B8 PUSH1 0x9A SLOAD DUP2 JUMP JUMPDEST PUSH2 0x221 PUSH2 0x5A9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x15C SWAP2 SWAP1 PUSH2 0x13EA JUMP JUMPDEST PUSH2 0x1EC PUSH2 0x23C CALLDATASIZE PUSH1 0x4 PUSH2 0x1437 JUMP JUMPDEST PUSH2 0x60A JUMP JUMPDEST PUSH2 0x1B8 PUSH2 0x24F CALLDATASIZE PUSH1 0x4 PUSH2 0x120C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x1EC PUSH2 0x6C2 JUMP JUMPDEST PUSH1 0x65 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x15C JUMP JUMPDEST PUSH2 0x14F PUSH2 0x6D6 JUMP JUMPDEST PUSH2 0x1EC PUSH2 0x2AD CALLDATASIZE PUSH1 0x4 PUSH2 0x1470 JUMP JUMPDEST PUSH2 0x6E5 JUMP JUMPDEST PUSH2 0x191 PUSH2 0x2C0 CALLDATASIZE PUSH1 0x4 PUSH2 0x122E JUMP JUMPDEST PUSH2 0x784 JUMP JUMPDEST PUSH2 0x191 PUSH2 0x2D3 CALLDATASIZE PUSH1 0x4 PUSH2 0x122E JUMP JUMPDEST PUSH2 0x7FF JUMP JUMPDEST PUSH1 0x9B SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x27F JUMP JUMPDEST PUSH2 0x1B8 PUSH2 0x2F7 CALLDATASIZE PUSH1 0x4 PUSH2 0x151D JUMP JUMPDEST PUSH2 0x80D JUMP JUMPDEST PUSH2 0x1EC PUSH2 0x30A CALLDATASIZE PUSH1 0x4 PUSH2 0x120C JUMP JUMPDEST PUSH2 0x838 JUMP JUMPDEST PUSH2 0x191 PUSH2 0x31D CALLDATASIZE PUSH1 0x4 PUSH2 0x1550 JUMP JUMPDEST PUSH1 0x9E PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x36 DUP1 SLOAD PUSH2 0x341 SWAP1 PUSH2 0x1569 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x36D SWAP1 PUSH2 0x1569 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x3BA JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x38F JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x3BA JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x39D JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x3D2 DUP2 DUP6 DUP6 PUSH2 0x8AE JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x3EA DUP6 DUP3 DUP6 PUSH2 0x9D2 JUMP JUMPDEST PUSH2 0x3F5 DUP6 DUP6 DUP6 PUSH2 0xA4C JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 DUP1 ISZERO PUSH2 0x420 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xFF SWAP1 SWAP2 AND LT JUMPDEST DUP1 PUSH2 0x43A JUMPI POP ADDRESS EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x43A JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND PUSH1 0x1 EQ JUMPDEST PUSH2 0x4A2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP1 ISZERO PUSH2 0x4C5 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE JUMPDEST PUSH2 0x4CD PUSH2 0xC1A JUMP JUMPDEST PUSH2 0x4D7 DUP8 DUP8 PUSH2 0xC49 JUMP JUMPDEST DUP7 MLOAD PUSH2 0x4EA SWAP1 PUSH1 0x97 SWAP1 PUSH1 0x20 DUP11 ADD SWAP1 PUSH2 0x108F JUMP JUMPDEST POP DUP6 MLOAD PUSH2 0x4FE SWAP1 PUSH1 0x98 SWAP1 PUSH1 0x20 DUP10 ADD SWAP1 PUSH2 0x108F JUMP JUMPDEST POP PUSH1 0x99 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0xFF DUP8 AND OR SWAP1 SSTORE PUSH1 0x9A DUP4 SWAP1 SSTORE PUSH1 0x9B DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND OR SWAP1 SSTORE PUSH2 0x538 DUP3 DUP6 PUSH2 0xC7E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x57E JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x3D2 DUP2 DUP6 DUP6 PUSH2 0x59A DUP4 DUP4 PUSH2 0x80D JUMP JUMPDEST PUSH2 0x5A4 SWAP2 SWAP1 PUSH2 0x15BA JUMP JUMPDEST PUSH2 0x8AE JUMP JUMPDEST PUSH1 0x60 PUSH1 0x9C DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x3BA JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x5E3 JUMPI POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x9E PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x65C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x556E6971756520696420657869737473 PUSH1 0x80 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x499 JUMP JUMPDEST CALLER PUSH1 0x0 PUSH2 0x671 PUSH1 0x65 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x9E PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND SWAP1 DUP3 AND EQ ISZERO PUSH2 0x6B0 JUMPI PUSH2 0x6AA DUP7 DUP6 PUSH2 0x7FF JUMP JUMPDEST POP PUSH2 0x6BA JUMP JUMPDEST PUSH2 0x6BA DUP7 DUP6 PUSH2 0xD5D JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x6CA PUSH2 0xD98 JUMP JUMPDEST PUSH2 0x6D4 PUSH1 0x0 PUSH2 0xDF2 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x60 PUSH1 0x37 DUP1 SLOAD PUSH2 0x341 SWAP1 PUSH2 0x1569 JUMP JUMPDEST PUSH2 0x6ED PUSH2 0xD98 JUMP JUMPDEST PUSH2 0x754 PUSH1 0x9C DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x746 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x728 JUMPI JUMPDEST POP POP POP POP POP PUSH1 0x0 PUSH1 0x9D PUSH2 0xE44 JUMP JUMPDEST PUSH2 0x760 PUSH1 0x9C PUSH1 0x0 PUSH2 0x1113 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x773 SWAP1 PUSH1 0x9C SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH2 0x1131 JUMP JUMPDEST POP PUSH2 0x781 DUP2 PUSH1 0x1 PUSH1 0x9D PUSH2 0xE44 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 CALLER DUP2 PUSH2 0x792 DUP3 DUP7 PUSH2 0x80D JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x7F2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x499 JUMP JUMPDEST PUSH2 0x3F5 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x8AE JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x3D2 DUP2 DUP6 DUP6 PUSH2 0xA4C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x840 PUSH2 0xD98 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x8A5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x499 JUMP JUMPDEST PUSH2 0x781 DUP2 PUSH2 0xDF2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x910 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x499 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x971 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x499 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9DE DUP5 DUP5 PUSH2 0x80D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 NOT DUP2 EQ PUSH2 0xA46 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0xA39 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x499 JUMP JUMPDEST PUSH2 0xA46 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x8AE JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xAB0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x499 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xB12 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x499 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0xB8A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x499 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP2 DUP6 AND DUP2 MSTORE SWAP1 DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0xBC1 SWAP1 DUP5 SWAP1 PUSH2 0x15BA JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0xC0D SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0xA46 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0xC41 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x499 SWAP1 PUSH2 0x15D2 JUMP JUMPDEST PUSH2 0x6D4 PUSH2 0xEC3 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0xC70 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x499 SWAP1 PUSH2 0x15D2 JUMP JUMPDEST PUSH2 0xC7A DUP3 DUP3 PUSH2 0xEF3 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xCD4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x499 JUMP JUMPDEST DUP1 PUSH1 0x35 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xCE6 SWAP2 SWAP1 PUSH2 0x15BA JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0xD13 SWAP1 DUP5 SWAP1 PUSH2 0x15BA JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH1 0x0 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x9A SLOAD DUP3 PUSH2 0xD6D SWAP2 SWAP1 PUSH2 0x161D JUMP JUMPDEST SWAP1 POP PUSH2 0xD79 CALLER DUP3 PUSH2 0xF41 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD85 DUP3 DUP5 PUSH2 0x163F JUMP JUMPDEST SWAP1 POP PUSH2 0xD91 DUP5 DUP3 PUSH2 0x7FF JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x65 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x6D4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x499 JUMP JUMPDEST PUSH1 0x65 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF AND LT ISZERO PUSH2 0xA46 JUMPI DUP3 DUP3 PUSH1 0x0 DUP7 DUP5 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MLOAD DUP2 LT PUSH2 0xE7A JUMPI PUSH2 0xE7A PUSH2 0x1656 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE DUP1 PUSH2 0xEB6 DUP2 PUSH2 0x166C JUMP JUMPDEST SWAP2 POP POP PUSH2 0xE47 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0xEEA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x499 SWAP1 PUSH2 0x15D2 JUMP JUMPDEST PUSH2 0x6D4 CALLER PUSH2 0xDF2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0xF1A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x499 SWAP1 PUSH2 0x15D2 JUMP JUMPDEST DUP2 MLOAD PUSH2 0xF2D SWAP1 PUSH1 0x36 SWAP1 PUSH1 0x20 DUP6 ADD SWAP1 PUSH2 0x108F JUMP JUMPDEST POP DUP1 MLOAD PUSH2 0xEBE SWAP1 PUSH1 0x37 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH2 0x108F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xFA1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E2066726F6D20746865207A65726F20616464726573 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x73 PUSH1 0xF8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x499 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x1015 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E20616D6F756E7420657863656564732062616C616E PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x6365 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x499 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP4 DUP4 SUB SWAP1 SSTORE PUSH1 0x35 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x1044 SWAP1 DUP5 SWAP1 PUSH2 0x163F JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH2 0x109B SWAP1 PUSH2 0x1569 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0x10BD JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0x1103 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0x10D6 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x1103 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x1103 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x1103 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x10E8 JUMP JUMPDEST POP PUSH2 0x110F SWAP3 SWAP2 POP PUSH2 0x1186 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST POP DUP1 SLOAD PUSH1 0x0 DUP3 SSTORE SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP1 PUSH2 0x781 SWAP2 SWAP1 PUSH2 0x1186 JUMP JUMPDEST DUP3 DUP1 SLOAD DUP3 DUP3 SSTORE SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP3 DUP3 ISZERO PUSH2 0x1103 JUMPI SWAP2 PUSH1 0x20 MUL DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x1103 JUMPI DUP3 MLOAD DUP3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND OR DUP3 SSTORE PUSH1 0x20 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x1151 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x110F JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x1187 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x11C8 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x11AC JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x11DA JUMPI PUSH1 0x0 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1207 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x121E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1227 DUP3 PUSH2 0x11F0 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1241 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x124A DUP4 PUSH2 0x11F0 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x126D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1276 DUP5 PUSH2 0x11F0 JUMP JUMPDEST SWAP3 POP PUSH2 0x1284 PUSH1 0x20 DUP6 ADD PUSH2 0x11F0 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x12D3 JUMPI PUSH2 0x12D3 PUSH2 0x1294 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x12EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1306 JUMPI PUSH2 0x1306 PUSH2 0x1294 JUMP JUMPDEST PUSH2 0x1319 PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD PUSH2 0x12AA JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x132E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x1364 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x137C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1388 DUP11 DUP4 DUP12 ADD PUSH2 0x12DB JUMP JUMPDEST SWAP8 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x139E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x13AB DUP10 DUP3 DUP11 ADD PUSH2 0x12DB JUMP JUMPDEST SWAP6 POP POP PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x13C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD SWAP2 POP PUSH2 0x13DE PUSH1 0xA0 DUP9 ADD PUSH2 0x11F0 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x142B JUMPI DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x1406 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x144D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1456 DUP6 PUSH2 0x11F0 JUMP JUMPDEST SWAP7 PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP7 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP6 PUSH1 0x60 ADD CALLDATALOAD SWAP5 POP SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1483 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x149B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x14AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x14C1 JUMPI PUSH2 0x14C1 PUSH2 0x1294 JUMP JUMPDEST DUP1 PUSH1 0x5 SHL SWAP2 POP PUSH2 0x14D2 DUP5 DUP4 ADD PUSH2 0x12AA JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 DUP4 ADD DUP5 ADD SWAP2 DUP5 DUP2 ADD SWAP1 DUP9 DUP5 GT ISZERO PUSH2 0x14EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 DUP6 ADD SWAP4 JUMPDEST DUP4 DUP6 LT ISZERO PUSH2 0x1511 JUMPI PUSH2 0x1502 DUP6 PUSH2 0x11F0 JUMP JUMPDEST DUP3 MSTORE SWAP4 DUP6 ADD SWAP4 SWAP1 DUP6 ADD SWAP1 PUSH2 0x14F1 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1530 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1539 DUP4 PUSH2 0x11F0 JUMP JUMPDEST SWAP2 POP PUSH2 0x1547 PUSH1 0x20 DUP5 ADD PUSH2 0x11F0 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1562 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x157D JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x159E JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x15CD JUMPI PUSH2 0x15CD PUSH2 0x15A4 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2B SWAP1 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x40 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x163A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x1651 JUMPI PUSH2 0x1651 PUSH2 0x15A4 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP4 AND DUP2 DUP2 EQ ISZERO PUSH2 0x168A JUMPI PUSH2 0x168A PUSH2 0x15A4 JUMP JUMPDEST PUSH1 0x1 ADD SWAP4 SWAP3 POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 REVERT OR 0xE9 PUSH2 0x3889 0x5D PUSH25 0x6446795DB062DB4024E697D3E09E8B837B851D4D79A428DF64 PUSH20 0x6F6C634300080B00330000000000000000000000 ",
							"sourceMap": "226:3254:7:-:0;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@__ERC20_init_329": {
									"entryPoint": 3145,
									"id": 329,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@__ERC20_init_unchained_347": {
									"entryPoint": 3827,
									"id": 347,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@__Ownable_init_26": {
									"entryPoint": 3098,
									"id": 26,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@__Ownable_init_unchained_37": {
									"entryPoint": 3779,
									"id": 37,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_afterTokenTransfer_887": {
									"entryPoint": null,
									"id": 887,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_approve_822": {
									"entryPoint": 2222,
									"id": 822,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_beforeTokenTransfer_876": {
									"entryPoint": 3774,
									"id": 876,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_burn_777": {
									"entryPoint": 3905,
									"id": 777,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_checkOwner_68": {
									"entryPoint": 3480,
									"id": 68,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_mint_705": {
									"entryPoint": 3198,
									"id": 705,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_msgSender_1266": {
									"entryPoint": null,
									"id": 1266,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_permitTransfer_1540": {
									"entryPoint": 1546,
									"id": 1540,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@_spendAllowance_865": {
									"entryPoint": 2514,
									"id": 865,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_taxFee_1297": {
									"entryPoint": null,
									"id": 1297,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_transferOwnership_125": {
									"entryPoint": 3570,
									"id": 125,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_transferWithBurn_1402": {
									"entryPoint": 3421,
									"id": 1402,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_transfer_649": {
									"entryPoint": 2636,
									"id": 649,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_updateMap_1485": {
									"entryPoint": 3652,
									"id": 1485,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@allowance_444": {
									"entryPoint": 2061,
									"id": 444,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@approve_469": {
									"entryPoint": 964,
									"id": 469,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@balanceOf_401": {
									"entryPoint": null,
									"id": 401,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@decimals_377": {
									"entryPoint": null,
									"id": 377,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@decreaseAllowance_572": {
									"entryPoint": 1924,
									"id": 572,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@getTokenOwnerAddress_1369": {
									"entryPoint": null,
									"id": 1369,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@increaseAllowance_531": {
									"entryPoint": 1415,
									"id": 531,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@initialize_1361": {
									"entryPoint": 1024,
									"id": 1361,
									"parameterSlots": 6,
									"returnSlots": 0
								},
								"@isContract_1014": {
									"entryPoint": null,
									"id": 1014,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@mapSigner_1451": {
									"entryPoint": null,
									"id": 1451,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@name_357": {
									"entryPoint": 818,
									"id": 357,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@owner_54": {
									"entryPoint": null,
									"id": 54,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@renounceOwnership_82": {
									"entryPoint": 1730,
									"id": 82,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@setSigners_1439": {
									"entryPoint": 1765,
									"id": 1439,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@signers_1411": {
									"entryPoint": 1449,
									"id": 1411,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@symbol_367": {
									"entryPoint": 1750,
									"id": 367,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@totalSupply_387": {
									"entryPoint": null,
									"id": 387,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@transferFrom_502": {
									"entryPoint": 988,
									"id": 502,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@transferOwnership_105": {
									"entryPoint": 2104,
									"id": 105,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@transfer_426": {
									"entryPoint": 2047,
									"id": 426,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@uniqueIdExists_1310": {
									"entryPoint": null,
									"id": 1310,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"abi_decode_address": {
									"entryPoint": 4592,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_decode_string": {
									"entryPoint": 4827,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 4620,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_address": {
									"entryPoint": 5405,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_addresst_addresst_uint256": {
									"entryPoint": 4696,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"abi_decode_tuple_t_addresst_uint256": {
									"entryPoint": 4654,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_addresst_uint256t_uint256t_uint256": {
									"entryPoint": 5175,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 4
								},
								"abi_decode_tuple_t_array$_t_address_$dyn_memory_ptr": {
									"entryPoint": 5232,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_uint8t_uint256t_uint256t_address": {
									"entryPoint": 4939,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 6
								},
								"abi_decode_tuple_t_uint256": {
									"entryPoint": 5456,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr__to_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed": {
									"entryPoint": 5098,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 4507,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_188268226e967b97bf30adf89a0df618e65d0f4d1c829a35f07843e0a6c57f7b__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 5586,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"allocate_memory": {
									"entryPoint": 4778,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 5562,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_div_t_uint256": {
									"entryPoint": 5661,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_sub_t_uint256": {
									"entryPoint": 5695,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"extract_byte_array_length": {
									"entryPoint": 5481,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"increment_t_uint64": {
									"entryPoint": 5740,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"panic_error_0x11": {
									"entryPoint": 5540,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x32": {
									"entryPoint": 5718,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x41": {
									"entryPoint": 4756,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:14118:8",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:8",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "135:476:8",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "145:12:8",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "155:2:8",
																"type": "",
																"value": "32"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "149:2:8",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "173:9:8"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "184:2:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "166:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "166:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "166:21:8"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "196:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "216:6:8"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "210:5:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "210:13:8"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "200:6:8",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "243:9:8"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "254:2:8"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "239:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "239:18:8"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "259:6:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "232:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "232:34:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "232:34:8"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "275:10:8",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "284:1:8",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "279:1:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "344:90:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "headStart",
																									"nodeType": "YulIdentifier",
																									"src": "373:9:8"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "384:1:8"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "369:3:8"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "369:17:8"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "388:2:8",
																							"type": "",
																							"value": "64"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "365:3:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "365:26:8"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "value0",
																											"nodeType": "YulIdentifier",
																											"src": "407:6:8"
																										},
																										{
																											"name": "i",
																											"nodeType": "YulIdentifier",
																											"src": "415:1:8"
																										}
																									],
																									"functionName": {
																										"name": "add",
																										"nodeType": "YulIdentifier",
																										"src": "403:3:8"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "403:14:8"
																								},
																								{
																									"name": "_1",
																									"nodeType": "YulIdentifier",
																									"src": "419:2:8"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "399:3:8"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "399:23:8"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "393:5:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "393:30:8"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "358:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "358:66:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "358:66:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "305:1:8"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "308:6:8"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "302:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "302:13:8"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "316:19:8",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "318:15:8",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "327:1:8"
																				},
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "330:2:8"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "323:3:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "323:10:8"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "318:1:8"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "298:3:8",
																"statements": []
															},
															"src": "294:140:8"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "468:66:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "headStart",
																									"nodeType": "YulIdentifier",
																									"src": "497:9:8"
																								},
																								{
																									"name": "length",
																									"nodeType": "YulIdentifier",
																									"src": "508:6:8"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "493:3:8"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "493:22:8"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "517:2:8",
																							"type": "",
																							"value": "64"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "489:3:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "489:31:8"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "522:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "482:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "482:42:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "482:42:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "449:1:8"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "452:6:8"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "446:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "446:13:8"
															},
															"nodeType": "YulIf",
															"src": "443:91:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "543:62:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "559:9:8"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "578:6:8"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "586:2:8",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "574:3:8"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "574:15:8"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "595:2:8",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "591:3:8"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "591:7:8"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "570:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "570:29:8"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "555:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "555:45:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "602:2:8",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "551:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "551:54:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "543:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "104:9:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "115:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "126:4:8",
														"type": ""
													}
												],
												"src": "14:597:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "665:124:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "675:29:8",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "697:6:8"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "684:12:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "684:20:8"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "675:5:8"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "767:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "776:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "779:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "769:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "769:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "769:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "726:5:8"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "737:5:8"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "752:3:8",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "757:1:8",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "748:3:8"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "748:11:8"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "761:1:8",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "744:3:8"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "744:19:8"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "733:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "733:31:8"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "723:2:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "723:42:8"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "716:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "716:50:8"
															},
															"nodeType": "YulIf",
															"src": "713:70:8"
														}
													]
												},
												"name": "abi_decode_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "644:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "655:5:8",
														"type": ""
													}
												],
												"src": "616:173:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "864:116:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "910:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "919:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "922:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "912:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "912:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "912:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "885:7:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "894:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "881:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "881:23:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "906:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "877:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "877:32:8"
															},
															"nodeType": "YulIf",
															"src": "874:52:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "935:39:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "964:9:8"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "945:18:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "945:29:8"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "935:6:8"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "830:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "841:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "853:6:8",
														"type": ""
													}
												],
												"src": "794:186:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1080:92:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1090:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1102:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1113:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1098:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1098:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1090:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1132:9:8"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "1157:6:8"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "1150:6:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1150:14:8"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "1143:6:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1143:22:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1125:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1125:41:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1125:41:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1049:9:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1060:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1071:4:8",
														"type": ""
													}
												],
												"src": "985:187:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1264:167:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1310:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1319:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1322:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1312:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1312:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1312:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1285:7:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1294:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1281:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1281:23:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1306:2:8",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1277:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1277:32:8"
															},
															"nodeType": "YulIf",
															"src": "1274:52:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1335:39:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1364:9:8"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "1345:18:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1345:29:8"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1335:6:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1383:42:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1410:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1421:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1406:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1406:18:8"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1393:12:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1393:32:8"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1383:6:8"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1222:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1233:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1245:6:8",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1253:6:8",
														"type": ""
													}
												],
												"src": "1177:254:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1537:76:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1547:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1559:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1570:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1555:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1555:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1547:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1589:9:8"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1600:6:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1582:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1582:25:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1582:25:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1506:9:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1517:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1528:4:8",
														"type": ""
													}
												],
												"src": "1436:177:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1722:224:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1768:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1777:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1780:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1770:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1770:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1770:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1743:7:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1752:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1739:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1739:23:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1764:2:8",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1735:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1735:32:8"
															},
															"nodeType": "YulIf",
															"src": "1732:52:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1793:39:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1822:9:8"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "1803:18:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1803:29:8"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1793:6:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1841:48:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1874:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1885:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1870:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1870:18:8"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "1851:18:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1851:38:8"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1841:6:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1898:42:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1925:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1936:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1921:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1921:18:8"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1908:12:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1908:32:8"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "1898:6:8"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1672:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1683:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1695:6:8",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1703:6:8",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "1711:6:8",
														"type": ""
													}
												],
												"src": "1618:328:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1983:95:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2000:1:8",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2007:3:8",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2012:10:8",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "2003:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2003:20:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1993:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1993:31:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1993:31:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2040:1:8",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2043:4:8",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2033:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2033:15:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2033:15:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2064:1:8",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2067:4:8",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "2057:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2057:15:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2057:15:8"
														}
													]
												},
												"name": "panic_error_0x41",
												"nodeType": "YulFunctionDefinition",
												"src": "1951:127:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2128:230:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2138:19:8",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2154:2:8",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "2148:5:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2148:9:8"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "2138:6:8"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2166:58:8",
															"value": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "2188:6:8"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "size",
																						"nodeType": "YulIdentifier",
																						"src": "2204:4:8"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "2210:2:8",
																						"type": "",
																						"value": "31"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2200:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2200:13:8"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "2219:2:8",
																						"type": "",
																						"value": "31"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nodeType": "YulIdentifier",
																					"src": "2215:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2215:7:8"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "2196:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2196:27:8"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2184:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2184:40:8"
															},
															"variables": [
																{
																	"name": "newFreePtr",
																	"nodeType": "YulTypedName",
																	"src": "2170:10:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2299:22:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "2301:16:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2301:18:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2301:18:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "2242:10:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2254:18:8",
																				"type": "",
																				"value": "0xffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "2239:2:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2239:34:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "2278:10:8"
																			},
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "2290:6:8"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "2275:2:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2275:22:8"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "2236:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2236:62:8"
															},
															"nodeType": "YulIf",
															"src": "2233:88:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2337:2:8",
																		"type": "",
																		"value": "64"
																	},
																	{
																		"name": "newFreePtr",
																		"nodeType": "YulIdentifier",
																		"src": "2341:10:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2330:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2330:22:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2330:22:8"
														}
													]
												},
												"name": "allocate_memory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "size",
														"nodeType": "YulTypedName",
														"src": "2108:4:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "2117:6:8",
														"type": ""
													}
												],
												"src": "2083:275:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2416:478:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2465:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2474:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2477:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2467:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2467:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2467:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "2444:6:8"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "2452:4:8",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2440:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2440:17:8"
																			},
																			{
																				"name": "end",
																				"nodeType": "YulIdentifier",
																				"src": "2459:3:8"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "2436:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2436:27:8"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "2429:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2429:35:8"
															},
															"nodeType": "YulIf",
															"src": "2426:55:8"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2490:30:8",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "2513:6:8"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2500:12:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2500:20:8"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "2494:2:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2559:22:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "2561:16:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2561:18:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2561:18:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "2535:2:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2539:18:8",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "2532:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2532:26:8"
															},
															"nodeType": "YulIf",
															"src": "2529:52:8"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2590:70:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "_1",
																								"nodeType": "YulIdentifier",
																								"src": "2633:2:8"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "2637:4:8",
																								"type": "",
																								"value": "0x1f"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "2629:3:8"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "2629:13:8"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "2648:2:8",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "2644:3:8"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "2644:7:8"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "2625:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2625:27:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2654:4:8",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2621:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2621:38:8"
																	}
																],
																"functionName": {
																	"name": "allocate_memory",
																	"nodeType": "YulIdentifier",
																	"src": "2605:15:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2605:55:8"
															},
															"variables": [
																{
																	"name": "array_1",
																	"nodeType": "YulTypedName",
																	"src": "2594:7:8",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "array_1",
																		"nodeType": "YulIdentifier",
																		"src": "2676:7:8"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "2685:2:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2669:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2669:19:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2669:19:8"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2736:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2745:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2748:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2738:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2738:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2738:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "2711:6:8"
																					},
																					{
																						"name": "_1",
																						"nodeType": "YulIdentifier",
																						"src": "2719:2:8"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2707:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2707:15:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2724:4:8",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2703:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2703:26:8"
																	},
																	{
																		"name": "end",
																		"nodeType": "YulIdentifier",
																		"src": "2731:3:8"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "2700:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2700:35:8"
															},
															"nodeType": "YulIf",
															"src": "2697:55:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "array_1",
																				"nodeType": "YulIdentifier",
																				"src": "2778:7:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2787:4:8",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2774:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2774:18:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "2798:6:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2806:4:8",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2794:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2794:17:8"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "2813:2:8"
																	}
																],
																"functionName": {
																	"name": "calldatacopy",
																	"nodeType": "YulIdentifier",
																	"src": "2761:12:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2761:55:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2761:55:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "array_1",
																						"nodeType": "YulIdentifier",
																						"src": "2840:7:8"
																					},
																					{
																						"name": "_1",
																						"nodeType": "YulIdentifier",
																						"src": "2849:2:8"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2836:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2836:16:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2854:4:8",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2832:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2832:27:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2861:1:8",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2825:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2825:38:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2825:38:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2872:16:8",
															"value": {
																"name": "array_1",
																"nodeType": "YulIdentifier",
																"src": "2881:7:8"
															},
															"variableNames": [
																{
																	"name": "array",
																	"nodeType": "YulIdentifier",
																	"src": "2872:5:8"
																}
															]
														}
													]
												},
												"name": "abi_decode_string",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "2390:6:8",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "2398:3:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "array",
														"nodeType": "YulTypedName",
														"src": "2406:5:8",
														"type": ""
													}
												],
												"src": "2363:531:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3072:740:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3119:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3128:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3131:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3121:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3121:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3121:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3093:7:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3102:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3089:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3089:23:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3114:3:8",
																		"type": "",
																		"value": "192"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "3085:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3085:33:8"
															},
															"nodeType": "YulIf",
															"src": "3082:53:8"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3144:37:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3171:9:8"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3158:12:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3158:23:8"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "3148:6:8",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3190:28:8",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "3200:18:8",
																"type": "",
																"value": "0xffffffffffffffff"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "3194:2:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3245:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3254:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3257:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3247:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3247:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3247:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "3233:6:8"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "3241:2:8"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "3230:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3230:14:8"
															},
															"nodeType": "YulIf",
															"src": "3227:34:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3270:60:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3302:9:8"
																			},
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "3313:6:8"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3298:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3298:22:8"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "3322:7:8"
																	}
																],
																"functionName": {
																	"name": "abi_decode_string",
																	"nodeType": "YulIdentifier",
																	"src": "3280:17:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3280:50:8"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "3270:6:8"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3339:48:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3372:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3383:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3368:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3368:18:8"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3355:12:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3355:32:8"
															},
															"variables": [
																{
																	"name": "offset_1",
																	"nodeType": "YulTypedName",
																	"src": "3343:8:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3416:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3425:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3428:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3418:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3418:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3418:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset_1",
																		"nodeType": "YulIdentifier",
																		"src": "3402:8:8"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "3412:2:8"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "3399:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3399:16:8"
															},
															"nodeType": "YulIf",
															"src": "3396:36:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3441:62:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3473:9:8"
																			},
																			{
																				"name": "offset_1",
																				"nodeType": "YulIdentifier",
																				"src": "3484:8:8"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3469:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3469:24:8"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "3495:7:8"
																	}
																],
																"functionName": {
																	"name": "abi_decode_string",
																	"nodeType": "YulIdentifier",
																	"src": "3451:17:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3451:52:8"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "3441:6:8"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3512:45:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3542:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3553:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3538:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3538:18:8"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3525:12:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3525:32:8"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "3516:5:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3605:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3614:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3617:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3607:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3607:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3607:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "3579:5:8"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "3590:5:8"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "3597:4:8",
																						"type": "",
																						"value": "0xff"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "3586:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3586:16:8"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "3576:2:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3576:27:8"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "3569:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3569:35:8"
															},
															"nodeType": "YulIf",
															"src": "3566:55:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3630:15:8",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "3640:5:8"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "3630:6:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "3654:42:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3681:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3692:2:8",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3677:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3677:18:8"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3664:12:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3664:32:8"
															},
															"variableNames": [
																{
																	"name": "value3",
																	"nodeType": "YulIdentifier",
																	"src": "3654:6:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "3705:43:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3732:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3743:3:8",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3728:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3728:19:8"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3715:12:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3715:33:8"
															},
															"variableNames": [
																{
																	"name": "value4",
																	"nodeType": "YulIdentifier",
																	"src": "3705:6:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "3757:49:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3790:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3801:3:8",
																				"type": "",
																				"value": "160"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3786:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3786:19:8"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "3767:18:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3767:39:8"
															},
															"variableNames": [
																{
																	"name": "value5",
																	"nodeType": "YulIdentifier",
																	"src": "3757:6:8"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_uint8t_uint256t_uint256t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2998:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "3009:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3021:6:8",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "3029:6:8",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "3037:6:8",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "3045:6:8",
														"type": ""
													},
													{
														"name": "value4",
														"nodeType": "YulTypedName",
														"src": "3053:6:8",
														"type": ""
													},
													{
														"name": "value5",
														"nodeType": "YulTypedName",
														"src": "3061:6:8",
														"type": ""
													}
												],
												"src": "2899:913:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3914:87:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3924:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3936:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3947:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3932:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3932:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3924:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3966:9:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "3981:6:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3989:4:8",
																				"type": "",
																				"value": "0xff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "3977:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3977:17:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3959:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3959:36:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3959:36:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3883:9:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3894:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3905:4:8",
														"type": ""
													}
												],
												"src": "3817:184:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4157:507:8",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4167:12:8",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "4177:2:8",
																"type": "",
																"value": "32"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "4171:2:8",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4188:32:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4206:9:8"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "4217:2:8"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4202:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4202:18:8"
															},
															"variables": [
																{
																	"name": "tail_1",
																	"nodeType": "YulTypedName",
																	"src": "4192:6:8",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4236:9:8"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "4247:2:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4229:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4229:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4229:21:8"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4259:17:8",
															"value": {
																"name": "tail_1",
																"nodeType": "YulIdentifier",
																"src": "4270:6:8"
															},
															"variables": [
																{
																	"name": "pos",
																	"nodeType": "YulTypedName",
																	"src": "4263:3:8",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4285:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "4305:6:8"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "4299:5:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4299:13:8"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "4289:6:8",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "tail_1",
																		"nodeType": "YulIdentifier",
																		"src": "4328:6:8"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "4336:6:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4321:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4321:22:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4321:22:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4352:25:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4363:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4374:2:8",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4359:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4359:18:8"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "4352:3:8"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4386:29:8",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "4404:6:8"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "4412:2:8"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4400:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4400:15:8"
															},
															"variables": [
																{
																	"name": "srcPtr",
																	"nodeType": "YulTypedName",
																	"src": "4390:6:8",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4424:10:8",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "4433:1:8",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "4428:1:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4492:146:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "pos",
																					"nodeType": "YulIdentifier",
																					"src": "4513:3:8"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "srcPtr",
																									"nodeType": "YulIdentifier",
																									"src": "4528:6:8"
																								}
																							],
																							"functionName": {
																								"name": "mload",
																								"nodeType": "YulIdentifier",
																								"src": "4522:5:8"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "4522:13:8"
																						},
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"kind": "number",
																											"nodeType": "YulLiteral",
																											"src": "4545:3:8",
																											"type": "",
																											"value": "160"
																										},
																										{
																											"kind": "number",
																											"nodeType": "YulLiteral",
																											"src": "4550:1:8",
																											"type": "",
																											"value": "1"
																										}
																									],
																									"functionName": {
																										"name": "shl",
																										"nodeType": "YulIdentifier",
																										"src": "4541:3:8"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "4541:11:8"
																								},
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "4554:1:8",
																									"type": "",
																									"value": "1"
																								}
																							],
																							"functionName": {
																								"name": "sub",
																								"nodeType": "YulIdentifier",
																								"src": "4537:3:8"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "4537:19:8"
																						}
																					],
																					"functionName": {
																						"name": "and",
																						"nodeType": "YulIdentifier",
																						"src": "4518:3:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "4518:39:8"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "4506:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4506:52:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4506:52:8"
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "4571:19:8",
																		"value": {
																			"arguments": [
																				{
																					"name": "pos",
																					"nodeType": "YulIdentifier",
																					"src": "4582:3:8"
																				},
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "4587:2:8"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "4578:3:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4578:12:8"
																		},
																		"variableNames": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "4571:3:8"
																			}
																		]
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "4603:25:8",
																		"value": {
																			"arguments": [
																				{
																					"name": "srcPtr",
																					"nodeType": "YulIdentifier",
																					"src": "4617:6:8"
																				},
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "4625:2:8"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "4613:3:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4613:15:8"
																		},
																		"variableNames": [
																			{
																				"name": "srcPtr",
																				"nodeType": "YulIdentifier",
																				"src": "4603:6:8"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "4454:1:8"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "4457:6:8"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "4451:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4451:13:8"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "4465:18:8",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "4467:14:8",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "4476:1:8"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4479:1:8",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "4472:3:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4472:9:8"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "4467:1:8"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "4447:3:8",
																"statements": []
															},
															"src": "4443:195:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4647:11:8",
															"value": {
																"name": "pos",
																"nodeType": "YulIdentifier",
																"src": "4655:3:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4647:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr__to_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4126:9:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4137:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4148:4:8",
														"type": ""
													}
												],
												"src": "4006:658:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4790:270:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4837:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4846:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4849:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4839:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4839:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4839:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4811:7:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4820:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "4807:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4807:23:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4832:3:8",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "4803:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4803:33:8"
															},
															"nodeType": "YulIf",
															"src": "4800:53:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4862:39:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4891:9:8"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "4872:18:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4872:29:8"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "4862:6:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4910:42:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4937:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4948:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4933:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4933:18:8"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "4920:12:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4920:32:8"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "4910:6:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4961:42:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4988:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4999:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4984:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4984:18:8"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "4971:12:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4971:32:8"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "4961:6:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5012:42:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5039:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5050:2:8",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5035:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5035:18:8"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "5022:12:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5022:32:8"
															},
															"variableNames": [
																{
																	"name": "value3",
																	"nodeType": "YulIdentifier",
																	"src": "5012:6:8"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256t_uint256t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4732:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "4743:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4755:6:8",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "4763:6:8",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "4771:6:8",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "4779:6:8",
														"type": ""
													}
												],
												"src": "4669:391:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5166:102:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5176:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5188:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5199:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5184:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5184:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5176:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5218:9:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "5233:6:8"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "5249:3:8",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "5254:1:8",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "5245:3:8"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "5245:11:8"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "5258:1:8",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "5241:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5241:19:8"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "5229:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5229:32:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5211:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5211:51:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5211:51:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5135:9:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5146:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5157:4:8",
														"type": ""
													}
												],
												"src": "5065:203:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5368:857:8",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5378:12:8",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "5388:2:8",
																"type": "",
																"value": "32"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "5382:2:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5435:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5444:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5447:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5437:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5437:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5437:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5410:7:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5419:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "5406:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5406:23:8"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "5431:2:8"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "5402:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5402:32:8"
															},
															"nodeType": "YulIf",
															"src": "5399:52:8"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5460:37:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5487:9:8"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "5474:12:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5474:23:8"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "5464:6:8",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5506:28:8",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "5516:18:8",
																"type": "",
																"value": "0xffffffffffffffff"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "5510:2:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5561:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5570:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5573:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5563:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5563:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5563:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "5549:6:8"
																	},
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "5557:2:8"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "5546:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5546:14:8"
															},
															"nodeType": "YulIf",
															"src": "5543:34:8"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5586:32:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5600:9:8"
																	},
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "5611:6:8"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5596:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5596:22:8"
															},
															"variables": [
																{
																	"name": "_3",
																	"nodeType": "YulTypedName",
																	"src": "5590:2:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5666:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5675:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5678:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5668:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5668:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5668:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_3",
																						"nodeType": "YulIdentifier",
																						"src": "5645:2:8"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "5649:4:8",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "5641:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5641:13:8"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5656:7:8"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "5637:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5637:27:8"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "5630:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5630:35:8"
															},
															"nodeType": "YulIf",
															"src": "5627:55:8"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5691:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "_3",
																		"nodeType": "YulIdentifier",
																		"src": "5714:2:8"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "5701:12:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5701:16:8"
															},
															"variables": [
																{
																	"name": "_4",
																	"nodeType": "YulTypedName",
																	"src": "5695:2:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5740:22:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "5742:16:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5742:18:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5742:18:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "_4",
																		"nodeType": "YulIdentifier",
																		"src": "5732:2:8"
																	},
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "5736:2:8"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "5729:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5729:10:8"
															},
															"nodeType": "YulIf",
															"src": "5726:36:8"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5771:20:8",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5785:1:8",
																		"type": "",
																		"value": "5"
																	},
																	{
																		"name": "_4",
																		"nodeType": "YulIdentifier",
																		"src": "5788:2:8"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "5781:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5781:10:8"
															},
															"variables": [
																{
																	"name": "_5",
																	"nodeType": "YulTypedName",
																	"src": "5775:2:8",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5800:39:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "_5",
																				"nodeType": "YulIdentifier",
																				"src": "5831:2:8"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "5835:2:8"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5827:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5827:11:8"
																	}
																],
																"functionName": {
																	"name": "allocate_memory",
																	"nodeType": "YulIdentifier",
																	"src": "5811:15:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5811:28:8"
															},
															"variables": [
																{
																	"name": "dst",
																	"nodeType": "YulTypedName",
																	"src": "5804:3:8",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5848:16:8",
															"value": {
																"name": "dst",
																"nodeType": "YulIdentifier",
																"src": "5861:3:8"
															},
															"variables": [
																{
																	"name": "dst_1",
																	"nodeType": "YulTypedName",
																	"src": "5852:5:8",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "dst",
																		"nodeType": "YulIdentifier",
																		"src": "5880:3:8"
																	},
																	{
																		"name": "_4",
																		"nodeType": "YulIdentifier",
																		"src": "5885:2:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5873:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5873:15:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5873:15:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5897:19:8",
															"value": {
																"arguments": [
																	{
																		"name": "dst",
																		"nodeType": "YulIdentifier",
																		"src": "5908:3:8"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "5913:2:8"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5904:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5904:12:8"
															},
															"variableNames": [
																{
																	"name": "dst",
																	"nodeType": "YulIdentifier",
																	"src": "5897:3:8"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5925:34:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "_3",
																				"nodeType": "YulIdentifier",
																				"src": "5947:2:8"
																			},
																			{
																				"name": "_5",
																				"nodeType": "YulIdentifier",
																				"src": "5951:2:8"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5943:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5943:11:8"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "5956:2:8"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5939:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5939:20:8"
															},
															"variables": [
																{
																	"name": "srcEnd",
																	"nodeType": "YulTypedName",
																	"src": "5929:6:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5991:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6000:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6003:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5993:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5993:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5993:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "srcEnd",
																		"nodeType": "YulIdentifier",
																		"src": "5974:6:8"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "5982:7:8"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "5971:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5971:19:8"
															},
															"nodeType": "YulIf",
															"src": "5968:39:8"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6016:22:8",
															"value": {
																"arguments": [
																	{
																		"name": "_3",
																		"nodeType": "YulIdentifier",
																		"src": "6031:2:8"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "6035:2:8"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6027:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6027:11:8"
															},
															"variables": [
																{
																	"name": "src",
																	"nodeType": "YulTypedName",
																	"src": "6020:3:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6103:92:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "dst",
																					"nodeType": "YulIdentifier",
																					"src": "6124:3:8"
																				},
																				{
																					"arguments": [
																						{
																							"name": "src",
																							"nodeType": "YulIdentifier",
																							"src": "6148:3:8"
																						}
																					],
																					"functionName": {
																						"name": "abi_decode_address",
																						"nodeType": "YulIdentifier",
																						"src": "6129:18:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "6129:23:8"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "6117:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6117:36:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6117:36:8"
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "6166:19:8",
																		"value": {
																			"arguments": [
																				{
																					"name": "dst",
																					"nodeType": "YulIdentifier",
																					"src": "6177:3:8"
																				},
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "6182:2:8"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "6173:3:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6173:12:8"
																		},
																		"variableNames": [
																			{
																				"name": "dst",
																				"nodeType": "YulIdentifier",
																				"src": "6166:3:8"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "src",
																		"nodeType": "YulIdentifier",
																		"src": "6058:3:8"
																	},
																	{
																		"name": "srcEnd",
																		"nodeType": "YulIdentifier",
																		"src": "6063:6:8"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "6055:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6055:15:8"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "6071:23:8",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "6073:19:8",
																		"value": {
																			"arguments": [
																				{
																					"name": "src",
																					"nodeType": "YulIdentifier",
																					"src": "6084:3:8"
																				},
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "6089:2:8"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "6080:3:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6080:12:8"
																		},
																		"variableNames": [
																			{
																				"name": "src",
																				"nodeType": "YulIdentifier",
																				"src": "6073:3:8"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "6051:3:8",
																"statements": []
															},
															"src": "6047:148:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6204:15:8",
															"value": {
																"name": "dst_1",
																"nodeType": "YulIdentifier",
																"src": "6214:5:8"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "6204:6:8"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_array$_t_address_$dyn_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5334:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "5345:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5357:6:8",
														"type": ""
													}
												],
												"src": "5273:952:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6317:173:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6363:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6372:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6375:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "6365:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6365:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6365:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "6338:7:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6347:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "6334:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6334:23:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6359:2:8",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "6330:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6330:32:8"
															},
															"nodeType": "YulIf",
															"src": "6327:52:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6388:39:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6417:9:8"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "6398:18:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6398:29:8"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "6388:6:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6436:48:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6469:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6480:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6465:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6465:18:8"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "6446:18:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6446:38:8"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "6436:6:8"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6275:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "6286:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "6298:6:8",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "6306:6:8",
														"type": ""
													}
												],
												"src": "6230:260:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6565:110:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6611:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6620:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6623:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "6613:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6613:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6613:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "6586:7:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6595:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "6582:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6582:23:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6607:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "6578:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6578:32:8"
															},
															"nodeType": "YulIf",
															"src": "6575:52:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6636:33:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6659:9:8"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "6646:12:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6646:23:8"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "6636:6:8"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6531:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "6542:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "6554:6:8",
														"type": ""
													}
												],
												"src": "6495:180:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6735:325:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6745:22:8",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6759:1:8",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "6762:4:8"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6755:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6755:12:8"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "6745:6:8"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6776:38:8",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "6806:4:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6812:1:8",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "6802:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6802:12:8"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "6780:18:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6853:31:8",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "6855:27:8",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "6869:6:8"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6877:4:8",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "6865:3:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6865:17:8"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "6855:6:8"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "6833:18:8"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "6826:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6826:26:8"
															},
															"nodeType": "YulIf",
															"src": "6823:61:8"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6943:111:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6964:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "6971:3:8",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "6976:10:8",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "6967:3:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "6967:20:8"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "6957:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6957:31:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6957:31:8"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "7008:1:8",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "7011:4:8",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "7001:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7001:15:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "7001:15:8"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "7036:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "7039:4:8",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "7029:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7029:15:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "7029:15:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "6899:18:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "6922:6:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6930:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "6919:2:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6919:14:8"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "6896:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6896:38:8"
															},
															"nodeType": "YulIf",
															"src": "6893:161:8"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "6715:4:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "6724:6:8",
														"type": ""
													}
												],
												"src": "6680:380:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7239:236:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7256:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7267:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7249:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "7249:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7249:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7290:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7301:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7286:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7286:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7306:2:8",
																		"type": "",
																		"value": "46"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7279:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "7279:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7279:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7329:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7340:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7325:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7325:18:8"
																	},
																	{
																		"hexValue": "496e697469616c697a61626c653a20636f6e747261637420697320616c726561",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7345:34:8",
																		"type": "",
																		"value": "Initializable: contract is alrea"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7318:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "7318:62:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7318:62:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7400:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7411:2:8",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7396:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7396:18:8"
																	},
																	{
																		"hexValue": "647920696e697469616c697a6564",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7416:16:8",
																		"type": "",
																		"value": "dy initialized"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7389:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "7389:44:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7389:44:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7442:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7454:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7465:3:8",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7450:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "7450:19:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7442:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7216:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7230:4:8",
														"type": ""
													}
												],
												"src": "7065:410:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7587:87:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7597:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7609:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7620:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7605:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "7605:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7597:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7639:9:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "7654:6:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7662:4:8",
																				"type": "",
																				"value": "0xff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "7650:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7650:17:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7632:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "7632:36:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7632:36:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7556:9:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "7567:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7578:4:8",
														"type": ""
													}
												],
												"src": "7480:194:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7711:95:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7728:1:8",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7735:3:8",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7740:10:8",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7731:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7731:20:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7721:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "7721:31:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7721:31:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7768:1:8",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7771:4:8",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7761:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "7761:15:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7761:15:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7792:1:8",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7795:4:8",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "7785:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "7785:15:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7785:15:8"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "7679:127:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7859:80:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7886:22:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "7888:16:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7888:18:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "7888:18:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "7875:1:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "7882:1:8"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "7878:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7878:6:8"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "7872:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "7872:13:8"
															},
															"nodeType": "YulIf",
															"src": "7869:39:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7917:16:8",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "7928:1:8"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "7931:1:8"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7924:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "7924:9:8"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "7917:3:8"
																}
															]
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "7842:1:8",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "7845:1:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "7851:3:8",
														"type": ""
													}
												],
												"src": "7811:128:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8118:166:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8135:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8146:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8128:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "8128:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8128:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8169:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8180:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8165:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8165:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8185:2:8",
																		"type": "",
																		"value": "16"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8158:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "8158:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8158:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8208:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8219:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8204:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8204:18:8"
																	},
																	{
																		"hexValue": "556e6971756520696420657869737473",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8224:18:8",
																		"type": "",
																		"value": "Unique id exists"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8197:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "8197:46:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8197:46:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8252:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8264:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8275:2:8",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8260:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "8260:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8252:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_188268226e967b97bf30adf89a0df618e65d0f4d1c829a35f07843e0a6c57f7b__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8095:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8109:4:8",
														"type": ""
													}
												],
												"src": "7944:340:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8463:227:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8480:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8491:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8473:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "8473:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8473:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8514:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8525:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8510:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8510:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8530:2:8",
																		"type": "",
																		"value": "37"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8503:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "8503:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8503:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8553:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8564:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8549:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8549:18:8"
																	},
																	{
																		"hexValue": "45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8569:34:8",
																		"type": "",
																		"value": "ERC20: decreased allowance below"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8542:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "8542:62:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8542:62:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8624:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8635:2:8",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8620:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8620:18:8"
																	},
																	{
																		"hexValue": "207a65726f",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8640:7:8",
																		"type": "",
																		"value": " zero"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8613:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "8613:35:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8613:35:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8657:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8669:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8680:3:8",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8665:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "8665:19:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8657:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8440:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8454:4:8",
														"type": ""
													}
												],
												"src": "8289:401:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8869:228:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8886:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8897:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8879:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "8879:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8879:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8920:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8931:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8916:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8916:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8936:2:8",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8909:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "8909:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8909:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8959:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8970:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8955:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8955:18:8"
																	},
																	{
																		"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8975:34:8",
																		"type": "",
																		"value": "Ownable: new owner is the zero a"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8948:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "8948:62:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8948:62:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9030:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9041:2:8",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9026:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9026:18:8"
																	},
																	{
																		"hexValue": "646472657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "9046:8:8",
																		"type": "",
																		"value": "ddress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9019:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "9019:36:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9019:36:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9064:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9076:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9087:3:8",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9072:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "9072:19:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9064:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8846:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8860:4:8",
														"type": ""
													}
												],
												"src": "8695:402:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9276:226:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9293:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9304:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9286:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "9286:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9286:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9327:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9338:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9323:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9323:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9343:2:8",
																		"type": "",
																		"value": "36"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9316:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "9316:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9316:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9366:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9377:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9362:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9362:18:8"
																	},
																	{
																		"hexValue": "45524332303a20617070726f76652066726f6d20746865207a65726f20616464",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "9382:34:8",
																		"type": "",
																		"value": "ERC20: approve from the zero add"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9355:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "9355:62:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9355:62:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9437:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9448:2:8",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9433:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9433:18:8"
																	},
																	{
																		"hexValue": "72657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "9453:6:8",
																		"type": "",
																		"value": "ress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9426:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "9426:34:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9426:34:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9469:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9481:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9492:3:8",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9477:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "9477:19:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9469:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9253:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9267:4:8",
														"type": ""
													}
												],
												"src": "9102:400:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9681:224:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9698:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9709:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9691:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "9691:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9691:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9732:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9743:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9728:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9728:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9748:2:8",
																		"type": "",
																		"value": "34"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9721:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "9721:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9721:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9771:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9782:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9767:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9767:18:8"
																	},
																	{
																		"hexValue": "45524332303a20617070726f766520746f20746865207a65726f206164647265",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "9787:34:8",
																		"type": "",
																		"value": "ERC20: approve to the zero addre"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9760:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "9760:62:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9760:62:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9842:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9853:2:8",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9838:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9838:18:8"
																	},
																	{
																		"hexValue": "7373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "9858:4:8",
																		"type": "",
																		"value": "ss"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9831:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "9831:32:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9831:32:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9872:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9884:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9895:3:8",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9880:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "9880:19:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9872:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9658:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9672:4:8",
														"type": ""
													}
												],
												"src": "9507:398:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10084:179:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10101:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10112:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10094:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "10094:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10094:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10135:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10146:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10131:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10131:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10151:2:8",
																		"type": "",
																		"value": "29"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10124:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "10124:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10124:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10174:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10185:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10170:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10170:18:8"
																	},
																	{
																		"hexValue": "45524332303a20696e73756666696369656e7420616c6c6f77616e6365",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "10190:31:8",
																		"type": "",
																		"value": "ERC20: insufficient allowance"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10163:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "10163:59:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10163:59:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10231:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10243:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10254:2:8",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10239:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "10239:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10231:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "10061:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "10075:4:8",
														"type": ""
													}
												],
												"src": "9910:353:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10442:227:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10459:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10470:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10452:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "10452:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10452:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10493:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10504:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10489:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10489:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10509:2:8",
																		"type": "",
																		"value": "37"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10482:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "10482:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10482:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10532:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10543:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10528:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10528:18:8"
																	},
																	{
																		"hexValue": "45524332303a207472616e736665722066726f6d20746865207a65726f206164",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "10548:34:8",
																		"type": "",
																		"value": "ERC20: transfer from the zero ad"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10521:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "10521:62:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10521:62:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10603:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10614:2:8",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10599:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10599:18:8"
																	},
																	{
																		"hexValue": "6472657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "10619:7:8",
																		"type": "",
																		"value": "dress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10592:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "10592:35:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10592:35:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10636:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10648:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10659:3:8",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10644:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "10644:19:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10636:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "10419:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "10433:4:8",
														"type": ""
													}
												],
												"src": "10268:401:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10848:225:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10865:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10876:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10858:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "10858:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10858:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10899:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10910:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10895:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10895:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10915:2:8",
																		"type": "",
																		"value": "35"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10888:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "10888:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10888:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10938:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10949:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10934:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10934:18:8"
																	},
																	{
																		"hexValue": "45524332303a207472616e7366657220746f20746865207a65726f2061646472",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "10954:34:8",
																		"type": "",
																		"value": "ERC20: transfer to the zero addr"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10927:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "10927:62:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10927:62:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11009:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11020:2:8",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11005:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11005:18:8"
																	},
																	{
																		"hexValue": "657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "11025:5:8",
																		"type": "",
																		"value": "ess"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10998:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "10998:33:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10998:33:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "11040:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11052:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11063:3:8",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11048:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "11048:19:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "11040:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "10825:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "10839:4:8",
														"type": ""
													}
												],
												"src": "10674:399:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11252:228:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11269:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11280:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11262:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "11262:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11262:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11303:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11314:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11299:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11299:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11319:2:8",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11292:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "11292:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11292:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11342:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11353:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11338:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11338:18:8"
																	},
																	{
																		"hexValue": "45524332303a207472616e7366657220616d6f756e7420657863656564732062",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "11358:34:8",
																		"type": "",
																		"value": "ERC20: transfer amount exceeds b"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11331:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "11331:62:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11331:62:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11413:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11424:2:8",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11409:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11409:18:8"
																	},
																	{
																		"hexValue": "616c616e6365",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "11429:8:8",
																		"type": "",
																		"value": "alance"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11402:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "11402:36:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11402:36:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "11447:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11459:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11470:3:8",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11455:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "11455:19:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "11447:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "11229:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "11243:4:8",
														"type": ""
													}
												],
												"src": "11078:402:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11659:233:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11676:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11687:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11669:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "11669:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11669:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11710:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11721:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11706:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11706:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11726:2:8",
																		"type": "",
																		"value": "43"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11699:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "11699:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11699:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11749:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11760:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11745:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11745:18:8"
																	},
																	{
																		"hexValue": "496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "11765:34:8",
																		"type": "",
																		"value": "Initializable: contract is not i"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11738:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "11738:62:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11738:62:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11820:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11831:2:8",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11816:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11816:18:8"
																	},
																	{
																		"hexValue": "6e697469616c697a696e67",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "11836:13:8",
																		"type": "",
																		"value": "nitializing"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11809:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "11809:41:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11809:41:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "11859:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11871:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11882:3:8",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11867:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "11867:19:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "11859:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "11636:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "11650:4:8",
														"type": ""
													}
												],
												"src": "11485:407:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12071:181:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12088:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12099:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12081:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "12081:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12081:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12122:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12133:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12118:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12118:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12138:2:8",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12111:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "12111:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12111:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12161:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12172:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12157:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12157:18:8"
																	},
																	{
																		"hexValue": "45524332303a206d696e7420746f20746865207a65726f2061646472657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "12177:33:8",
																		"type": "",
																		"value": "ERC20: mint to the zero address"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12150:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "12150:61:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12150:61:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "12220:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12232:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12243:2:8",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "12228:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "12228:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "12220:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "12048:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "12062:4:8",
														"type": ""
													}
												],
												"src": "11897:355:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12303:171:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "12334:111:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "12355:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "12362:3:8",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "12367:10:8",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "12358:3:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "12358:20:8"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "12348:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "12348:31:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "12348:31:8"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "12399:1:8",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "12402:4:8",
																					"type": "",
																					"value": "0x12"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "12392:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "12392:15:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "12392:15:8"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "12427:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "12430:4:8",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "12420:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "12420:15:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "12420:15:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "12323:1:8"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "12316:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "12316:9:8"
															},
															"nodeType": "YulIf",
															"src": "12313:132:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "12454:14:8",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "12463:1:8"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "12466:1:8"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "12459:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "12459:9:8"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "12454:1:8"
																}
															]
														}
													]
												},
												"name": "checked_div_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "12288:1:8",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "12291:1:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "r",
														"nodeType": "YulTypedName",
														"src": "12297:1:8",
														"type": ""
													}
												],
												"src": "12257:217:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12528:76:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "12550:22:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "12552:16:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "12552:18:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "12552:18:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "12544:1:8"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "12547:1:8"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "12541:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "12541:8:8"
															},
															"nodeType": "YulIf",
															"src": "12538:34:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "12581:17:8",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "12593:1:8"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "12596:1:8"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "12589:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "12589:9:8"
															},
															"variableNames": [
																{
																	"name": "diff",
																	"nodeType": "YulIdentifier",
																	"src": "12581:4:8"
																}
															]
														}
													]
												},
												"name": "checked_sub_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "12510:1:8",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "12513:1:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "diff",
														"nodeType": "YulTypedName",
														"src": "12519:4:8",
														"type": ""
													}
												],
												"src": "12479:125:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12783:182:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12800:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12811:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12793:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "12793:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12793:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12834:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12845:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12830:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12830:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12850:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12823:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "12823:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12823:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12873:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12884:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12869:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12869:18:8"
																	},
																	{
																		"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "12889:34:8",
																		"type": "",
																		"value": "Ownable: caller is not the owner"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12862:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "12862:62:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12862:62:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "12933:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12945:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12956:2:8",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "12941:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "12941:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "12933:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "12760:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "12774:4:8",
														"type": ""
													}
												],
												"src": "12609:356:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13002:95:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13019:1:8",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13026:3:8",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13031:10:8",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "13022:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13022:20:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13012:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "13012:31:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13012:31:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13059:1:8",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13062:4:8",
																		"type": "",
																		"value": "0x32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13052:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "13052:15:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13052:15:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13083:1:8",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13086:4:8",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "13076:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "13076:15:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13076:15:8"
														}
													]
												},
												"name": "panic_error_0x32",
												"nodeType": "YulFunctionDefinition",
												"src": "12970:127:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13148:163:8",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "13158:28:8",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "13168:18:8",
																"type": "",
																"value": "0xffffffffffffffff"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "13162:2:8",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "13195:29:8",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "13214:5:8"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "13221:2:8"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "13210:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "13210:14:8"
															},
															"variables": [
																{
																	"name": "value_1",
																	"nodeType": "YulTypedName",
																	"src": "13199:7:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "13252:22:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "13254:16:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "13254:18:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "13254:18:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "value_1",
																		"nodeType": "YulIdentifier",
																		"src": "13239:7:8"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "13248:2:8"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "13236:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "13236:15:8"
															},
															"nodeType": "YulIf",
															"src": "13233:41:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "13283:22:8",
															"value": {
																"arguments": [
																	{
																		"name": "value_1",
																		"nodeType": "YulIdentifier",
																		"src": "13294:7:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13303:1:8",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "13290:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "13290:15:8"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nodeType": "YulIdentifier",
																	"src": "13283:3:8"
																}
															]
														}
													]
												},
												"name": "increment_t_uint64",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "13130:5:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nodeType": "YulTypedName",
														"src": "13140:3:8",
														"type": ""
													}
												],
												"src": "13102:209:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13490:223:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "13507:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13518:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13500:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "13500:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13500:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13541:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13552:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13537:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13537:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13557:2:8",
																		"type": "",
																		"value": "33"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13530:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "13530:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13530:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13580:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13591:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13576:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13576:18:8"
																	},
																	{
																		"hexValue": "45524332303a206275726e2066726f6d20746865207a65726f20616464726573",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "13596:34:8",
																		"type": "",
																		"value": "ERC20: burn from the zero addres"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13569:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "13569:62:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13569:62:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13651:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13662:2:8",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13647:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13647:18:8"
																	},
																	{
																		"hexValue": "73",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "13667:3:8",
																		"type": "",
																		"value": "s"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13640:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "13640:31:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13640:31:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "13680:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "13692:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13703:3:8",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "13688:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "13688:19:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "13680:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "13467:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "13481:4:8",
														"type": ""
													}
												],
												"src": "13316:397:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13892:224:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "13909:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13920:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13902:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "13902:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13902:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13943:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13954:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13939:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13939:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13959:2:8",
																		"type": "",
																		"value": "34"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13932:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "13932:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13932:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13982:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13993:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13978:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13978:18:8"
																	},
																	{
																		"hexValue": "45524332303a206275726e20616d6f756e7420657863656564732062616c616e",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "13998:34:8",
																		"type": "",
																		"value": "ERC20: burn amount exceeds balan"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13971:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "13971:62:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13971:62:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14053:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14064:2:8",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14049:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14049:18:8"
																	},
																	{
																		"hexValue": "6365",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "14069:4:8",
																		"type": "",
																		"value": "ce"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14042:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "14042:32:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14042:32:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "14083:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "14095:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14106:3:8",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "14091:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "14091:19:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "14083:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "13869:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "13883:4:8",
														"type": ""
													}
												],
												"src": "13718:398:8"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        mstore(headStart, _1)\n        let length := mload(value0)\n        mstore(add(headStart, _1), length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, _1) }\n        {\n            mstore(add(add(headStart, i), 64), mload(add(add(value0, i), _1)))\n        }\n        if gt(i, length)\n        {\n            mstore(add(add(headStart, length), 64), 0)\n        }\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function allocate_memory(size) -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function abi_decode_string(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        if gt(_1, 0xffffffffffffffff) { panic_error_0x41() }\n        let array_1 := allocate_memory(add(and(add(_1, 0x1f), not(31)), 0x20))\n        mstore(array_1, _1)\n        if gt(add(add(offset, _1), 0x20), end) { revert(0, 0) }\n        calldatacopy(add(array_1, 0x20), add(offset, 0x20), _1)\n        mstore(add(add(array_1, _1), 0x20), 0)\n        array := array_1\n    }\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_uint8t_uint256t_uint256t_address(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 192) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        value0 := abi_decode_string(add(headStart, offset), dataEnd)\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_string(add(headStart, offset_1), dataEnd)\n        let value := calldataload(add(headStart, 64))\n        if iszero(eq(value, and(value, 0xff))) { revert(0, 0) }\n        value2 := value\n        value3 := calldataload(add(headStart, 96))\n        value4 := calldataload(add(headStart, 128))\n        value5 := abi_decode_address(add(headStart, 160))\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr__to_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        let tail_1 := add(headStart, _1)\n        mstore(headStart, _1)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        pos := add(headStart, 64)\n        let srcPtr := add(value0, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, and(mload(srcPtr), sub(shl(160, 1), 1)))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        tail := pos\n    }\n    function abi_decode_tuple_t_addresst_uint256t_uint256t_uint256(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_memory_ptr(headStart, dataEnd) -> value0\n    {\n        let _1 := 32\n        if slt(sub(dataEnd, headStart), _1) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _2 := 0xffffffffffffffff\n        if gt(offset, _2) { revert(0, 0) }\n        let _3 := add(headStart, offset)\n        if iszero(slt(add(_3, 0x1f), dataEnd)) { revert(0, 0) }\n        let _4 := calldataload(_3)\n        if gt(_4, _2) { panic_error_0x41() }\n        let _5 := shl(5, _4)\n        let dst := allocate_memory(add(_5, _1))\n        let dst_1 := dst\n        mstore(dst, _4)\n        dst := add(dst, _1)\n        let srcEnd := add(add(_3, _5), _1)\n        if gt(srcEnd, dataEnd) { revert(0, 0) }\n        let src := add(_3, _1)\n        for { } lt(src, srcEnd) { src := add(src, _1) }\n        {\n            mstore(dst, abi_decode_address(src))\n            dst := add(dst, _1)\n        }\n        value0 := dst_1\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"Initializable: contract is alrea\")\n        mstore(add(headStart, 96), \"dy initialized\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function abi_encode_tuple_t_stringliteral_188268226e967b97bf30adf89a0df618e65d0f4d1c829a35f07843e0a6c57f7b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 16)\n        mstore(add(headStart, 64), \"Unique id exists\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: decreased allowance below\")\n        mstore(add(headStart, 96), \" zero\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC20: approve from the zero add\")\n        mstore(add(headStart, 96), \"ress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ERC20: approve to the zero addre\")\n        mstore(add(headStart, 96), \"ss\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"ERC20: insufficient allowance\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: transfer from the zero ad\")\n        mstore(add(headStart, 96), \"dress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 35)\n        mstore(add(headStart, 64), \"ERC20: transfer to the zero addr\")\n        mstore(add(headStart, 96), \"ess\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"ERC20: transfer amount exceeds b\")\n        mstore(add(headStart, 96), \"alance\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 43)\n        mstore(add(headStart, 64), \"Initializable: contract is not i\")\n        mstore(add(headStart, 96), \"nitializing\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"ERC20: mint to the zero address\")\n        tail := add(headStart, 96)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function increment_t_uint64(value) -> ret\n    {\n        let _1 := 0xffffffffffffffff\n        let value_1 := and(value, _1)\n        if eq(value_1, _1) { panic_error_0x11() }\n        ret := add(value_1, 1)\n    }\n    function abi_encode_tuple_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"ERC20: burn from the zero addres\")\n        mstore(add(headStart, 96), \"s\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ERC20: burn amount exceeds balan\")\n        mstore(add(headStart, 96), \"ce\")\n        tail := add(headStart, 128)\n    }\n}",
									"id": 8,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x142 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0xB8 JUMPI DUP1 PUSH4 0xA457C2D7 GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x2B2 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x2C5 JUMPI DUP1 PUSH4 0xB722D0A5 EQ PUSH2 0x2D8 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x2E9 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x2FC JUMPI DUP1 PUSH4 0xF9342285 EQ PUSH2 0x30F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0x241 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x26A JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x272 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x297 JUMPI DUP1 PUSH4 0xA3772662 EQ PUSH2 0x29F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2CD77A5A GT PUSH2 0x10A JUMPI DUP1 PUSH4 0x2CD77A5A EQ PUSH2 0x1D9 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x1EE JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x1FD JUMPI DUP1 PUSH4 0x3B124FE7 EQ PUSH2 0x210 JUMPI DUP1 PUSH4 0x46F0975A EQ PUSH2 0x219 JUMPI DUP1 PUSH4 0x55B7DC67 EQ PUSH2 0x22E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x147 JUMPI DUP1 PUSH4 0x7C351DD EQ PUSH2 0x165 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x1A1 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x1B4 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1C6 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x14F PUSH2 0x332 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x15C SWAP2 SWAP1 PUSH2 0x119B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x191 PUSH2 0x173 CALLDATASIZE PUSH1 0x4 PUSH2 0x120C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9D PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x15C JUMP JUMPDEST PUSH2 0x191 PUSH2 0x1AF CALLDATASIZE PUSH1 0x4 PUSH2 0x122E JUMP JUMPDEST PUSH2 0x3C4 JUMP JUMPDEST PUSH1 0x35 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x15C JUMP JUMPDEST PUSH2 0x191 PUSH2 0x1D4 CALLDATASIZE PUSH1 0x4 PUSH2 0x1258 JUMP JUMPDEST PUSH2 0x3DC JUMP JUMPDEST PUSH2 0x1EC PUSH2 0x1E7 CALLDATASIZE PUSH1 0x4 PUSH2 0x134B JUMP JUMPDEST PUSH2 0x400 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x15C JUMP JUMPDEST PUSH2 0x191 PUSH2 0x20B CALLDATASIZE PUSH1 0x4 PUSH2 0x122E JUMP JUMPDEST PUSH2 0x587 JUMP JUMPDEST PUSH2 0x1B8 PUSH1 0x9A SLOAD DUP2 JUMP JUMPDEST PUSH2 0x221 PUSH2 0x5A9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x15C SWAP2 SWAP1 PUSH2 0x13EA JUMP JUMPDEST PUSH2 0x1EC PUSH2 0x23C CALLDATASIZE PUSH1 0x4 PUSH2 0x1437 JUMP JUMPDEST PUSH2 0x60A JUMP JUMPDEST PUSH2 0x1B8 PUSH2 0x24F CALLDATASIZE PUSH1 0x4 PUSH2 0x120C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x1EC PUSH2 0x6C2 JUMP JUMPDEST PUSH1 0x65 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x15C JUMP JUMPDEST PUSH2 0x14F PUSH2 0x6D6 JUMP JUMPDEST PUSH2 0x1EC PUSH2 0x2AD CALLDATASIZE PUSH1 0x4 PUSH2 0x1470 JUMP JUMPDEST PUSH2 0x6E5 JUMP JUMPDEST PUSH2 0x191 PUSH2 0x2C0 CALLDATASIZE PUSH1 0x4 PUSH2 0x122E JUMP JUMPDEST PUSH2 0x784 JUMP JUMPDEST PUSH2 0x191 PUSH2 0x2D3 CALLDATASIZE PUSH1 0x4 PUSH2 0x122E JUMP JUMPDEST PUSH2 0x7FF JUMP JUMPDEST PUSH1 0x9B SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x27F JUMP JUMPDEST PUSH2 0x1B8 PUSH2 0x2F7 CALLDATASIZE PUSH1 0x4 PUSH2 0x151D JUMP JUMPDEST PUSH2 0x80D JUMP JUMPDEST PUSH2 0x1EC PUSH2 0x30A CALLDATASIZE PUSH1 0x4 PUSH2 0x120C JUMP JUMPDEST PUSH2 0x838 JUMP JUMPDEST PUSH2 0x191 PUSH2 0x31D CALLDATASIZE PUSH1 0x4 PUSH2 0x1550 JUMP JUMPDEST PUSH1 0x9E PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x36 DUP1 SLOAD PUSH2 0x341 SWAP1 PUSH2 0x1569 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x36D SWAP1 PUSH2 0x1569 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x3BA JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x38F JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x3BA JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x39D JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x3D2 DUP2 DUP6 DUP6 PUSH2 0x8AE JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x3EA DUP6 DUP3 DUP6 PUSH2 0x9D2 JUMP JUMPDEST PUSH2 0x3F5 DUP6 DUP6 DUP6 PUSH2 0xA4C JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 DUP1 ISZERO PUSH2 0x420 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xFF SWAP1 SWAP2 AND LT JUMPDEST DUP1 PUSH2 0x43A JUMPI POP ADDRESS EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x43A JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND PUSH1 0x1 EQ JUMPDEST PUSH2 0x4A2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP1 ISZERO PUSH2 0x4C5 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE JUMPDEST PUSH2 0x4CD PUSH2 0xC1A JUMP JUMPDEST PUSH2 0x4D7 DUP8 DUP8 PUSH2 0xC49 JUMP JUMPDEST DUP7 MLOAD PUSH2 0x4EA SWAP1 PUSH1 0x97 SWAP1 PUSH1 0x20 DUP11 ADD SWAP1 PUSH2 0x108F JUMP JUMPDEST POP DUP6 MLOAD PUSH2 0x4FE SWAP1 PUSH1 0x98 SWAP1 PUSH1 0x20 DUP10 ADD SWAP1 PUSH2 0x108F JUMP JUMPDEST POP PUSH1 0x99 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0xFF DUP8 AND OR SWAP1 SSTORE PUSH1 0x9A DUP4 SWAP1 SSTORE PUSH1 0x9B DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND OR SWAP1 SSTORE PUSH2 0x538 DUP3 DUP6 PUSH2 0xC7E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x57E JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x3D2 DUP2 DUP6 DUP6 PUSH2 0x59A DUP4 DUP4 PUSH2 0x80D JUMP JUMPDEST PUSH2 0x5A4 SWAP2 SWAP1 PUSH2 0x15BA JUMP JUMPDEST PUSH2 0x8AE JUMP JUMPDEST PUSH1 0x60 PUSH1 0x9C DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x3BA JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x5E3 JUMPI POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x9E PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x65C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x556E6971756520696420657869737473 PUSH1 0x80 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x499 JUMP JUMPDEST CALLER PUSH1 0x0 PUSH2 0x671 PUSH1 0x65 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x9E PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND SWAP1 DUP3 AND EQ ISZERO PUSH2 0x6B0 JUMPI PUSH2 0x6AA DUP7 DUP6 PUSH2 0x7FF JUMP JUMPDEST POP PUSH2 0x6BA JUMP JUMPDEST PUSH2 0x6BA DUP7 DUP6 PUSH2 0xD5D JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x6CA PUSH2 0xD98 JUMP JUMPDEST PUSH2 0x6D4 PUSH1 0x0 PUSH2 0xDF2 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x60 PUSH1 0x37 DUP1 SLOAD PUSH2 0x341 SWAP1 PUSH2 0x1569 JUMP JUMPDEST PUSH2 0x6ED PUSH2 0xD98 JUMP JUMPDEST PUSH2 0x754 PUSH1 0x9C DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x746 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x728 JUMPI JUMPDEST POP POP POP POP POP PUSH1 0x0 PUSH1 0x9D PUSH2 0xE44 JUMP JUMPDEST PUSH2 0x760 PUSH1 0x9C PUSH1 0x0 PUSH2 0x1113 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x773 SWAP1 PUSH1 0x9C SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH2 0x1131 JUMP JUMPDEST POP PUSH2 0x781 DUP2 PUSH1 0x1 PUSH1 0x9D PUSH2 0xE44 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 CALLER DUP2 PUSH2 0x792 DUP3 DUP7 PUSH2 0x80D JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x7F2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x499 JUMP JUMPDEST PUSH2 0x3F5 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x8AE JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x3D2 DUP2 DUP6 DUP6 PUSH2 0xA4C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x840 PUSH2 0xD98 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x8A5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x499 JUMP JUMPDEST PUSH2 0x781 DUP2 PUSH2 0xDF2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x910 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x499 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x971 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x499 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9DE DUP5 DUP5 PUSH2 0x80D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 NOT DUP2 EQ PUSH2 0xA46 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0xA39 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x499 JUMP JUMPDEST PUSH2 0xA46 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x8AE JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xAB0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x499 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xB12 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x499 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0xB8A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x499 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP2 DUP6 AND DUP2 MSTORE SWAP1 DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0xBC1 SWAP1 DUP5 SWAP1 PUSH2 0x15BA JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0xC0D SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0xA46 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0xC41 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x499 SWAP1 PUSH2 0x15D2 JUMP JUMPDEST PUSH2 0x6D4 PUSH2 0xEC3 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0xC70 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x499 SWAP1 PUSH2 0x15D2 JUMP JUMPDEST PUSH2 0xC7A DUP3 DUP3 PUSH2 0xEF3 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xCD4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x499 JUMP JUMPDEST DUP1 PUSH1 0x35 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xCE6 SWAP2 SWAP1 PUSH2 0x15BA JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0xD13 SWAP1 DUP5 SWAP1 PUSH2 0x15BA JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH1 0x0 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x9A SLOAD DUP3 PUSH2 0xD6D SWAP2 SWAP1 PUSH2 0x161D JUMP JUMPDEST SWAP1 POP PUSH2 0xD79 CALLER DUP3 PUSH2 0xF41 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD85 DUP3 DUP5 PUSH2 0x163F JUMP JUMPDEST SWAP1 POP PUSH2 0xD91 DUP5 DUP3 PUSH2 0x7FF JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x65 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x6D4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x499 JUMP JUMPDEST PUSH1 0x65 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF AND LT ISZERO PUSH2 0xA46 JUMPI DUP3 DUP3 PUSH1 0x0 DUP7 DUP5 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MLOAD DUP2 LT PUSH2 0xE7A JUMPI PUSH2 0xE7A PUSH2 0x1656 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE DUP1 PUSH2 0xEB6 DUP2 PUSH2 0x166C JUMP JUMPDEST SWAP2 POP POP PUSH2 0xE47 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0xEEA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x499 SWAP1 PUSH2 0x15D2 JUMP JUMPDEST PUSH2 0x6D4 CALLER PUSH2 0xDF2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0xF1A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x499 SWAP1 PUSH2 0x15D2 JUMP JUMPDEST DUP2 MLOAD PUSH2 0xF2D SWAP1 PUSH1 0x36 SWAP1 PUSH1 0x20 DUP6 ADD SWAP1 PUSH2 0x108F JUMP JUMPDEST POP DUP1 MLOAD PUSH2 0xEBE SWAP1 PUSH1 0x37 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH2 0x108F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xFA1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E2066726F6D20746865207A65726F20616464726573 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x73 PUSH1 0xF8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x499 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x1015 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E20616D6F756E7420657863656564732062616C616E PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x6365 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x499 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP4 DUP4 SUB SWAP1 SSTORE PUSH1 0x35 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x1044 SWAP1 DUP5 SWAP1 PUSH2 0x163F JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH2 0x109B SWAP1 PUSH2 0x1569 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0x10BD JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0x1103 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0x10D6 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x1103 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x1103 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x1103 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x10E8 JUMP JUMPDEST POP PUSH2 0x110F SWAP3 SWAP2 POP PUSH2 0x1186 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST POP DUP1 SLOAD PUSH1 0x0 DUP3 SSTORE SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP1 PUSH2 0x781 SWAP2 SWAP1 PUSH2 0x1186 JUMP JUMPDEST DUP3 DUP1 SLOAD DUP3 DUP3 SSTORE SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP3 DUP3 ISZERO PUSH2 0x1103 JUMPI SWAP2 PUSH1 0x20 MUL DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x1103 JUMPI DUP3 MLOAD DUP3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND OR DUP3 SSTORE PUSH1 0x20 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x1151 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x110F JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x1187 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x11C8 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x11AC JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x11DA JUMPI PUSH1 0x0 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1207 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x121E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1227 DUP3 PUSH2 0x11F0 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1241 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x124A DUP4 PUSH2 0x11F0 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x126D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1276 DUP5 PUSH2 0x11F0 JUMP JUMPDEST SWAP3 POP PUSH2 0x1284 PUSH1 0x20 DUP6 ADD PUSH2 0x11F0 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x12D3 JUMPI PUSH2 0x12D3 PUSH2 0x1294 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x12EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1306 JUMPI PUSH2 0x1306 PUSH2 0x1294 JUMP JUMPDEST PUSH2 0x1319 PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD PUSH2 0x12AA JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x132E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x1364 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x137C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1388 DUP11 DUP4 DUP12 ADD PUSH2 0x12DB JUMP JUMPDEST SWAP8 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x139E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x13AB DUP10 DUP3 DUP11 ADD PUSH2 0x12DB JUMP JUMPDEST SWAP6 POP POP PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x13C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD SWAP2 POP PUSH2 0x13DE PUSH1 0xA0 DUP9 ADD PUSH2 0x11F0 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x142B JUMPI DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x1406 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x144D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1456 DUP6 PUSH2 0x11F0 JUMP JUMPDEST SWAP7 PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP7 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP6 PUSH1 0x60 ADD CALLDATALOAD SWAP5 POP SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1483 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x149B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x14AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x14C1 JUMPI PUSH2 0x14C1 PUSH2 0x1294 JUMP JUMPDEST DUP1 PUSH1 0x5 SHL SWAP2 POP PUSH2 0x14D2 DUP5 DUP4 ADD PUSH2 0x12AA JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 DUP4 ADD DUP5 ADD SWAP2 DUP5 DUP2 ADD SWAP1 DUP9 DUP5 GT ISZERO PUSH2 0x14EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 DUP6 ADD SWAP4 JUMPDEST DUP4 DUP6 LT ISZERO PUSH2 0x1511 JUMPI PUSH2 0x1502 DUP6 PUSH2 0x11F0 JUMP JUMPDEST DUP3 MSTORE SWAP4 DUP6 ADD SWAP4 SWAP1 DUP6 ADD SWAP1 PUSH2 0x14F1 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1530 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1539 DUP4 PUSH2 0x11F0 JUMP JUMPDEST SWAP2 POP PUSH2 0x1547 PUSH1 0x20 DUP5 ADD PUSH2 0x11F0 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1562 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x157D JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x159E JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x15CD JUMPI PUSH2 0x15CD PUSH2 0x15A4 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2B SWAP1 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x40 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x163A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x1651 JUMPI PUSH2 0x1651 PUSH2 0x15A4 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP4 AND DUP2 DUP2 EQ ISZERO PUSH2 0x168A JUMPI PUSH2 0x168A PUSH2 0x15A4 JUMP JUMPDEST PUSH1 0x1 ADD SWAP4 SWAP3 POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 REVERT OR 0xE9 PUSH2 0x3889 0x5D PUSH25 0x6446795DB062DB4024E697D3E09E8B837B851D4D79A428DF64 PUSH20 0x6F6C634300080B00330000000000000000000000 ",
							"sourceMap": "226:3254:7:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2493:98:2;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1859:109:7;;;;;;:::i;:::-;-1:-1:-1;;;;;1941:19:7;1917:4;1941:19;;;:11;:19;;;;;;;;;1859:109;;;;1150:14:8;;1143:22;1125:41;;1113:2;1098:18;1859:109:7;985:187:8;4770:197:2;;;;;;:::i;:::-;;:::i;3581:106::-;3668:12;;3581:106;;;1582:25:8;;;1570:2;1555:18;3581:106:2;1436:177:8;5529:286:2;;;;;;:::i;:::-;;:::i;590:556:7:-;;;;;;:::i;:::-;;:::i;:::-;;3430:91:2;;;3512:2;3959:36:8;;3947:2;3932:18;3430:91:2;3817:184:8;6210:234:2;;;;;;:::i;:::-;;:::i;381:22:7:-;;;;;;1510:94;;;:::i;:::-;;;;;;;:::i;2225:1252::-;;;;;;:::i;:::-;;:::i;3745:125:2:-;;;;;;:::i;:::-;-1:-1:-1;;;;;3845:18:2;3819:7;3845:18;;;:9;:18;;;;;;;3745:125;2071:101:0;;;:::i;1441:85::-;1513:6;;-1:-1:-1;;;;;1513:6:0;1441:85;;;-1:-1:-1;;;;;5229:32:8;;;5211:51;;5199:2;5184:18;1441:85:0;5065:203:8;2704:102:2;;;:::i;1612:239:7:-;;;;;;:::i;:::-;;:::i;6931:427:2:-;;;;;;:::i;:::-;;:::i;4066:189::-;;;;;;:::i;:::-;;:::i;1154:106:7:-;1234:18;;-1:-1:-1;;;;;1234:18:7;1154:106;;4313:149:2;;;;;;:::i;:::-;;:::i;2321:198:0:-;;;;;;:::i;:::-;;:::i;535:46:7:-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;2493:98:2;2547:13;2579:5;2572:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2493:98;:::o;4770:197::-;4853:4;929:10:6;4907:32:2;929:10:6;4923:7:2;4932:6;4907:8;:32::i;:::-;-1:-1:-1;4956:4:2;;4770:197;-1:-1:-1;;;4770:197:2:o;5529:286::-;5656:4;929:10:6;5712:38:2;5728:4;929:10:6;5743:6:2;5712:15;:38::i;:::-;5760:27;5770:4;5776:2;5780:6;5760:9;:27::i;:::-;-1:-1:-1;5804:4:2;;5529:286;-1:-1:-1;;;;5529:286:2:o;590:556:7:-;3111:19:1;3134:13;;;;;;3133:14;;3179:34;;;;-1:-1:-1;3197:12:1;;3212:1;3197:12;;;;:16;3179:34;3178:108;;;-1:-1:-1;3258:4:1;1476:19:5;:23;;;3219:66:1;;-1:-1:-1;3268:12:1;;;;;:17;3219:66;3157:201;;;;-1:-1:-1;;;3157:201:1;;7267:2:8;3157:201:1;;;7249:21:8;7306:2;7286:18;;;7279:30;7345:34;7325:18;;;7318:62;-1:-1:-1;;;7396:18:8;;;7389:44;7450:19;;3157:201:1;;;;;;;;;3368:12;:16;;-1:-1:-1;;3368:16:1;3383:1;3368:16;;;3394:65;;;;3428:13;:20;;-1:-1:-1;;3428:20:1;;;;;3394:65;823:16:7::1;:14;:16::i;:::-;850:26;863:4;869:6;850:12;:26::i;:::-;887:12:::0;;::::1;::::0;:5:::1;::::0;:12:::1;::::0;::::1;::::0;::::1;:::i;:::-;-1:-1:-1::0;910:16:7;;::::1;::::0;:7:::1;::::0;:16:::1;::::0;::::1;::::0;::::1;:::i;:::-;-1:-1:-1::0;937:9:7::1;:20:::0;;-1:-1:-1;;937:20:7::1;;::::0;::::1;;::::0;;968:7:::1;:16:::0;;;995:18:::1;:38:::0;;-1:-1:-1;;;;;;995:38:7::1;-1:-1:-1::0;;;;;995:38:7;::::1;;::::0;;1101:37:::1;995:38:::0;1126:11;1101:5:::1;:37::i;:::-;3483:14:1::0;3479:99;;;3529:5;3513:21;;-1:-1:-1;;3513:21:1;;;3553:14;;-1:-1:-1;3959:36:8;;3553:14:1;;3947:2:8;3932:18;3553:14:1;;;;;;;3479:99;3101:483;590:556:7;;;;;;:::o;6210:234:2:-;6298:4;929:10:6;6352:64:2;929:10:6;6368:7:2;6405:10;6377:25;929:10:6;6368:7:2;6377:9;:25::i;:::-;:38;;;;:::i;:::-;6352:8;:64::i;1510:94:7:-;1552:16;1588:8;1581:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1581:15:7;;;;;;;;;;;;;;;;;;;;;;1510:94;:::o;2225:1252::-;2511:24;;;;:14;:24;;;;;;;;2510:25;2502:54;;;;-1:-1:-1;;;2502:54:7;;8146:2:8;2502:54:7;;;8128:21:8;8185:2;8165:18;;;8158:30;-1:-1:-1;;;8204:18:8;;;8197:46;8260:18;;2502:54:7;7944:340:8;2502:54:7;2586:10;2569:14;2623:13;1513:6:0;;-1:-1:-1;;;;;1513:6:0;;1441:85;2623:13:7;3230:24;;;;:14;:24;;;;;:31;;-1:-1:-1;;3230:31:7;3257:4;3230:31;;;2607:29;-1:-1:-1;;;;;;3276:15:7;;;;;;;3272:198;;;3356:33;3371:9;3382:6;3356:14;:33::i;:::-;;3272:198;;;3422:36;3440:9;3451:6;3422:17;:36::i;:::-;2422:1055;;2225:1252;;;;:::o;2071:101:0:-;1334:13;:11;:13::i;:::-;2135:30:::1;2162:1;2135:18;:30::i;:::-;2071:101::o:0;2704:102:2:-;2760:13;2792:7;2785:14;;;;;:::i;1612:239:7:-;1334:13:0;:11;:13::i;:::-;1697:40:7::1;1708:8;1697:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;;-1:-1:-1;;;;;1697:40:7::1;::::0;;;;;::::1;::::0;::::1;;::::0;;::::1;;;;;;;;;1718:5;1725:11;1697:10;:40::i;:::-;1748:15;1755:8;;1748:15;:::i;:::-;1774:19:::0;;::::1;::::0;:8:::1;::::0;:19:::1;::::0;::::1;::::0;::::1;:::i;:::-;;1804:39;1815:8;1825:4;1831:11;1804:10;:39::i;:::-;1612:239:::0;:::o;6931:427:2:-;7024:4;929:10:6;7024:4:2;7105:25;929:10:6;7122:7:2;7105:9;:25::i;:::-;7078:52;;7168:15;7148:16;:35;;7140:85;;;;-1:-1:-1;;;7140:85:2;;8491:2:8;7140:85:2;;;8473:21:8;8530:2;8510:18;;;8503:30;8569:34;8549:18;;;8542:62;-1:-1:-1;;;8620:18:8;;;8613:35;8665:19;;7140:85:2;8289:401:8;7140:85:2;7259:60;7268:5;7275:7;7303:15;7284:16;:34;7259:8;:60::i;4066:189::-;4145:4;929:10:6;4199:28:2;929:10:6;4216:2:2;4220:6;4199:9;:28::i;4313:149::-;-1:-1:-1;;;;;4428:18:2;;;4402:7;4428:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;4313:149::o;2321:198:0:-;1334:13;:11;:13::i;:::-;-1:-1:-1;;;;;2409:22:0;::::1;2401:73;;;::::0;-1:-1:-1;;;2401:73:0;;8897:2:8;2401:73:0::1;::::0;::::1;8879:21:8::0;8936:2;8916:18;;;8909:30;8975:34;8955:18;;;8948:62;-1:-1:-1;;;9026:18:8;;;9019:36;9072:19;;2401:73:0::1;8695:402:8::0;2401:73:0::1;2484:28;2503:8;2484:18;:28::i;10447:370:2:-:0;-1:-1:-1;;;;;10578:19:2;;10570:68;;;;-1:-1:-1;;;10570:68:2;;9304:2:8;10570:68:2;;;9286:21:8;9343:2;9323:18;;;9316:30;9382:34;9362:18;;;9355:62;-1:-1:-1;;;9433:18:8;;;9426:34;9477:19;;10570:68:2;9102:400:8;10570:68:2;-1:-1:-1;;;;;10656:21:2;;10648:68;;;;-1:-1:-1;;;10648:68:2;;9709:2:8;10648:68:2;;;9691:21:8;9748:2;9728:18;;;9721:30;9787:34;9767:18;;;9760:62;-1:-1:-1;;;9838:18:8;;;9831:32;9880:19;;10648:68:2;9507:398:8;10648:68:2;-1:-1:-1;;;;;10727:18:2;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;10778:32;;1582:25:8;;;10778:32:2;;1555:18:8;10778:32:2;;;;;;;10447:370;;;:::o;11098:441::-;11228:24;11255:25;11265:5;11272:7;11255:9;:25::i;:::-;11228:52;;-1:-1:-1;;11294:16:2;:37;11290:243;;11375:6;11355:16;:26;;11347:68;;;;-1:-1:-1;;;11347:68:2;;10112:2:8;11347:68:2;;;10094:21:8;10151:2;10131:18;;;10124:30;10190:31;10170:18;;;10163:59;10239:18;;11347:68:2;9910:353:8;11347:68:2;11457:51;11466:5;11473:7;11501:6;11482:16;:25;11457:8;:51::i;:::-;11218:321;11098:441;;;:::o;7812:651::-;-1:-1:-1;;;;;7938:18:2;;7930:68;;;;-1:-1:-1;;;7930:68:2;;10470:2:8;7930:68:2;;;10452:21:8;10509:2;10489:18;;;10482:30;10548:34;10528:18;;;10521:62;-1:-1:-1;;;10599:18:8;;;10592:35;10644:19;;7930:68:2;10268:401:8;7930:68:2;-1:-1:-1;;;;;8016:16:2;;8008:64;;;;-1:-1:-1;;;8008:64:2;;10876:2:8;8008:64:2;;;10858:21:8;10915:2;10895:18;;;10888:30;10954:34;10934:18;;;10927:62;-1:-1:-1;;;11005:18:8;;;10998:33;11048:19;;8008:64:2;10674:399:8;8008:64:2;-1:-1:-1;;;;;8154:15:2;;8132:19;8154:15;;;:9;:15;;;;;;8187:21;;;;8179:72;;;;-1:-1:-1;;;8179:72:2;;11280:2:8;8179:72:2;;;11262:21:8;11319:2;11299:18;;;11292:30;11358:34;11338:18;;;11331:62;-1:-1:-1;;;11409:18:8;;;11402:36;11455:19;;8179:72:2;11078:402:8;8179:72:2;-1:-1:-1;;;;;8285:15:2;;;;;;;:9;:15;;;;;;8303:20;;;8285:38;;8343:13;;;;;;;;:23;;8317:6;;8285:15;8343:23;;8317:6;;8343:23;:::i;:::-;;;;;;;;8397:2;-1:-1:-1;;;;;8382:26:2;8391:4;-1:-1:-1;;;;;8382:26:2;;8401:6;8382:26;;;;1582:25:8;;1570:2;1555:18;;1436:177;8382:26:2;;;;;;;;8419:37;12123:121;1003:95:0;4910:13:1;;;;;;;4902:69;;;;-1:-1:-1;;;4902:69:1;;;;;;;:::i;:::-;1065:26:0::1;:24;:26::i;2116:147:2:-:0;4910:13:1;;;;;;;4902:69;;;;-1:-1:-1;;;4902:69:1;;;;;;;:::i;:::-;2218:38:2::1;2241:5;2248:7;2218:22;:38::i;:::-;2116:147:::0;;:::o;8739:389::-;-1:-1:-1;;;;;8822:21:2;;8814:65;;;;-1:-1:-1;;;8814:65:2;;12099:2:8;8814:65:2;;;12081:21:8;12138:2;12118:18;;;12111:30;12177:33;12157:18;;;12150:61;12228:18;;8814:65:2;11897:355:8;8814:65:2;8966:6;8950:12;;:22;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;;;8982:18:2;;;;;;:9;:18;;;;;:28;;9004:6;;8982:18;:28;;9004:6;;8982:28;:::i;:::-;;;;-1:-1:-1;;9025:37:2;;1582:25:8;;;-1:-1:-1;;;;;9025:37:2;;;9042:1;;9025:37;;1570:2:8;1555:18;9025:37:2;;;;;;;2116:147;;:::o;1268:234:7:-;1342:15;1369:7;;1360:6;:16;;;;:::i;:::-;1342:34;;1387:26;1393:10;1405:7;1387:5;:26::i;:::-;1424:14;1441:16;1450:7;1441:6;:16;:::i;:::-;1424:33;;1468:26;1483:2;1487:6;1468:14;:26::i;:::-;;1331:171;;1268:234;;:::o;1599:130:0:-;1513:6;;-1:-1:-1;;;;;1513:6:0;929:10:6;1662:23:0;1654:68;;;;-1:-1:-1;;;1654:68:0;;12811:2:8;1654:68:0;;;12793:21:8;;;12830:18;;;12823:30;12889:34;12869:18;;;12862:62;12941:18;;1654:68:0;12609:356:8;2673:187:0;2765:6;;;-1:-1:-1;;;;;2781:17:0;;;-1:-1:-1;;;;;;2781:17:0;;;;;;;2813:40;;2765:6;;;2781:17;2765:6;;2813:40;;2746:16;;2813:40;2736:124;2673:187;:::o;1976:241:7:-;2128:8;2123:87;2146:3;:10;2142:1;:14;;;2123:87;;;2192:6;2178:3;:11;2182:3;2186:1;2182:6;;;;;;;;;;:::i;:::-;;;;;;;;;;;;-1:-1:-1;;;;;2178:11:7;;;;;;;;;;;-1:-1:-1;2178:11:7;:20;;-1:-1:-1;;2178:20:7;;;;;;;;;;2158:3;;;;:::i;:::-;;;;2123:87;;12123:121:2;;;;:::o;1104:111:0:-;4910:13:1;;;;;;;4902:69;;;;-1:-1:-1;;;4902:69:1;;;;;;;:::i;:::-;1176:32:0::1;929:10:6::0;1176:18:0::1;:32::i;2269:159:2:-:0;4910:13:1;;;;;;;4902:69;;;;-1:-1:-1;;;4902:69:1;;;;;;;:::i;:::-;2381:13:2;;::::1;::::0;:5:::1;::::0;:13:::1;::::0;::::1;::::0;::::1;:::i;:::-;-1:-1:-1::0;2404:17:2;;::::1;::::0;:7:::1;::::0;:17:::1;::::0;::::1;::::0;::::1;:::i;9448:576::-:0;-1:-1:-1;;;;;9531:21:2;;9523:67;;;;-1:-1:-1;;;9523:67:2;;13518:2:8;9523:67:2;;;13500:21:8;13557:2;13537:18;;;13530:30;13596:34;13576:18;;;13569:62;-1:-1:-1;;;13647:18:8;;;13640:31;13688:19;;9523:67:2;13316:397:8;9523:67:2;-1:-1:-1;;;;;9686:18:2;;9661:22;9686:18;;;:9;:18;;;;;;9722:24;;;;9714:71;;;;-1:-1:-1;;;9714:71:2;;13920:2:8;9714:71:2;;;13902:21:8;13959:2;13939:18;;;13932:30;13998:34;13978:18;;;13971:62;-1:-1:-1;;;14049:18:8;;;14042:32;14091:19;;9714:71:2;13718:398:8;9714:71:2;-1:-1:-1;;;;;9819:18:2;;;;;;:9;:18;;;;;9840:23;;;9819:44;;9883:12;:22;;9857:6;;9819:18;9883:22;;9857:6;;9883:22;:::i;:::-;;;;-1:-1:-1;;9921:37:2;;1582:25:8;;;9947:1:2;;-1:-1:-1;;;;;9921:37:2;;;;;1570:2:8;1555:18;9921:37:2;;;;;;;12123:121;;;:::o;-1:-1:-1:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14:597:8;126:4;155:2;184;173:9;166:21;216:6;210:13;259:6;254:2;243:9;239:18;232:34;284:1;294:140;308:6;305:1;302:13;294:140;;;403:14;;;399:23;;393:30;369:17;;;388:2;365:26;358:66;323:10;;294:140;;;452:6;449:1;446:13;443:91;;;522:1;517:2;508:6;497:9;493:22;489:31;482:42;443:91;-1:-1:-1;595:2:8;574:15;-1:-1:-1;;570:29:8;555:45;;;;602:2;551:54;;14:597;-1:-1:-1;;;14:597:8:o;616:173::-;684:20;;-1:-1:-1;;;;;733:31:8;;723:42;;713:70;;779:1;776;769:12;713:70;616:173;;;:::o;794:186::-;853:6;906:2;894:9;885:7;881:23;877:32;874:52;;;922:1;919;912:12;874:52;945:29;964:9;945:29;:::i;:::-;935:39;794:186;-1:-1:-1;;;794:186:8:o;1177:254::-;1245:6;1253;1306:2;1294:9;1285:7;1281:23;1277:32;1274:52;;;1322:1;1319;1312:12;1274:52;1345:29;1364:9;1345:29;:::i;:::-;1335:39;1421:2;1406:18;;;;1393:32;;-1:-1:-1;;;1177:254:8:o;1618:328::-;1695:6;1703;1711;1764:2;1752:9;1743:7;1739:23;1735:32;1732:52;;;1780:1;1777;1770:12;1732:52;1803:29;1822:9;1803:29;:::i;:::-;1793:39;;1851:38;1885:2;1874:9;1870:18;1851:38;:::i;:::-;1841:48;;1936:2;1925:9;1921:18;1908:32;1898:42;;1618:328;;;;;:::o;1951:127::-;2012:10;2007:3;2003:20;2000:1;1993:31;2043:4;2040:1;2033:15;2067:4;2064:1;2057:15;2083:275;2154:2;2148:9;2219:2;2200:13;;-1:-1:-1;;2196:27:8;2184:40;;2254:18;2239:34;;2275:22;;;2236:62;2233:88;;;2301:18;;:::i;:::-;2337:2;2330:22;2083:275;;-1:-1:-1;2083:275:8:o;2363:531::-;2406:5;2459:3;2452:4;2444:6;2440:17;2436:27;2426:55;;2477:1;2474;2467:12;2426:55;2513:6;2500:20;2539:18;2535:2;2532:26;2529:52;;;2561:18;;:::i;:::-;2605:55;2648:2;2629:13;;-1:-1:-1;;2625:27:8;2654:4;2621:38;2605:55;:::i;:::-;2685:2;2676:7;2669:19;2731:3;2724:4;2719:2;2711:6;2707:15;2703:26;2700:35;2697:55;;;2748:1;2745;2738:12;2697:55;2813:2;2806:4;2798:6;2794:17;2787:4;2778:7;2774:18;2761:55;2861:1;2836:16;;;2854:4;2832:27;2825:38;;;;2840:7;2363:531;-1:-1:-1;;;2363:531:8:o;2899:913::-;3021:6;3029;3037;3045;3053;3061;3114:3;3102:9;3093:7;3089:23;3085:33;3082:53;;;3131:1;3128;3121:12;3082:53;3171:9;3158:23;3200:18;3241:2;3233:6;3230:14;3227:34;;;3257:1;3254;3247:12;3227:34;3280:50;3322:7;3313:6;3302:9;3298:22;3280:50;:::i;:::-;3270:60;;3383:2;3372:9;3368:18;3355:32;3339:48;;3412:2;3402:8;3399:16;3396:36;;;3428:1;3425;3418:12;3396:36;;3451:52;3495:7;3484:8;3473:9;3469:24;3451:52;:::i;:::-;3441:62;;;3553:2;3542:9;3538:18;3525:32;3597:4;3590:5;3586:16;3579:5;3576:27;3566:55;;3617:1;3614;3607:12;3566:55;3640:5;-1:-1:-1;3692:2:8;3677:18;;3664:32;;-1:-1:-1;3743:3:8;3728:19;;3715:33;;-1:-1:-1;3767:39:8;3801:3;3786:19;;3767:39;:::i;:::-;3757:49;;2899:913;;;;;;;;:::o;4006:658::-;4177:2;4229:21;;;4299:13;;4202:18;;;4321:22;;;4148:4;;4177:2;4400:15;;;;4374:2;4359:18;;;4148:4;4443:195;4457:6;4454:1;4451:13;4443:195;;;4522:13;;-1:-1:-1;;;;;4518:39:8;4506:52;;4613:15;;;;4578:12;;;;4554:1;4472:9;4443:195;;;-1:-1:-1;4655:3:8;;4006:658;-1:-1:-1;;;;;;4006:658:8:o;4669:391::-;4755:6;4763;4771;4779;4832:3;4820:9;4811:7;4807:23;4803:33;4800:53;;;4849:1;4846;4839:12;4800:53;4872:29;4891:9;4872:29;:::i;:::-;4862:39;4948:2;4933:18;;4920:32;;-1:-1:-1;4999:2:8;4984:18;;4971:32;;5050:2;5035:18;5022:32;;-1:-1:-1;4669:391:8;-1:-1:-1;;;4669:391:8:o;5273:952::-;5357:6;5388:2;5431;5419:9;5410:7;5406:23;5402:32;5399:52;;;5447:1;5444;5437:12;5399:52;5487:9;5474:23;5516:18;5557:2;5549:6;5546:14;5543:34;;;5573:1;5570;5563:12;5543:34;5611:6;5600:9;5596:22;5586:32;;5656:7;5649:4;5645:2;5641:13;5637:27;5627:55;;5678:1;5675;5668:12;5627:55;5714:2;5701:16;5736:2;5732;5729:10;5726:36;;;5742:18;;:::i;:::-;5788:2;5785:1;5781:10;5771:20;;5811:28;5835:2;5831;5827:11;5811:28;:::i;:::-;5873:15;;;5943:11;;;5939:20;;;5904:12;;;;5971:19;;;5968:39;;;6003:1;6000;5993:12;5968:39;6027:11;;;;6047:148;6063:6;6058:3;6055:15;6047:148;;;6129:23;6148:3;6129:23;:::i;:::-;6117:36;;6080:12;;;;6173;;;;6047:148;;;6214:5;5273:952;-1:-1:-1;;;;;;;;5273:952:8:o;6230:260::-;6298:6;6306;6359:2;6347:9;6338:7;6334:23;6330:32;6327:52;;;6375:1;6372;6365:12;6327:52;6398:29;6417:9;6398:29;:::i;:::-;6388:39;;6446:38;6480:2;6469:9;6465:18;6446:38;:::i;:::-;6436:48;;6230:260;;;;;:::o;6495:180::-;6554:6;6607:2;6595:9;6586:7;6582:23;6578:32;6575:52;;;6623:1;6620;6613:12;6575:52;-1:-1:-1;6646:23:8;;6495:180;-1:-1:-1;6495:180:8:o;6680:380::-;6759:1;6755:12;;;;6802;;;6823:61;;6877:4;6869:6;6865:17;6855:27;;6823:61;6930:2;6922:6;6919:14;6899:18;6896:38;6893:161;;;6976:10;6971:3;6967:20;6964:1;6957:31;7011:4;7008:1;7001:15;7039:4;7036:1;7029:15;6893:161;;6680:380;;;:::o;7679:127::-;7740:10;7735:3;7731:20;7728:1;7721:31;7771:4;7768:1;7761:15;7795:4;7792:1;7785:15;7811:128;7851:3;7882:1;7878:6;7875:1;7872:13;7869:39;;;7888:18;;:::i;:::-;-1:-1:-1;7924:9:8;;7811:128::o;11485:407::-;11687:2;11669:21;;;11726:2;11706:18;;;11699:30;11765:34;11760:2;11745:18;;11738:62;-1:-1:-1;;;11831:2:8;11816:18;;11809:41;11882:3;11867:19;;11485:407::o;12257:217::-;12297:1;12323;12313:132;;12367:10;12362:3;12358:20;12355:1;12348:31;12402:4;12399:1;12392:15;12430:4;12427:1;12420:15;12313:132;-1:-1:-1;12459:9:8;;12257:217::o;12479:125::-;12519:4;12547:1;12544;12541:8;12538:34;;;12552:18;;:::i;:::-;-1:-1:-1;12589:9:8;;12479:125::o;12970:127::-;13031:10;13026:3;13022:20;13019:1;13012:31;13062:4;13059:1;13052:15;13086:4;13083:1;13076:15;13102:209;13140:3;13168:18;13221:2;13214:5;13210:14;13248:2;13239:7;13236:15;13233:41;;;13254:18;;:::i;:::-;13303:1;13290:15;;13102:209;-1:-1:-1;;;13102:209:8:o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "1166800",
								"executionCost": "1214",
								"totalCost": "1168014"
							},
							"external": {
								"_permitTransfer(address,uint256,uint256,uint256)": "infinite",
								"_taxFee()": "2384",
								"allowance(address,address)": "infinite",
								"approve(address,uint256)": "24669",
								"balanceOf(address)": "2560",
								"decimals()": "222",
								"decreaseAllowance(address,uint256)": "26972",
								"getTokenOwnerAddress()": "2397",
								"increaseAllowance(address,uint256)": "27045",
								"initialize(string,string,uint8,uint256,uint256,address)": "infinite",
								"mapSigner(address)": "2595",
								"name()": "infinite",
								"owner()": "2387",
								"renounceOwnership()": "infinite",
								"setSigners(address[])": "infinite",
								"signers()": "infinite",
								"symbol()": "infinite",
								"totalSupply()": "2371",
								"transfer(address,uint256)": "51220",
								"transferFrom(address,address,uint256)": "infinite",
								"transferOwnership(address)": "28446",
								"uniqueIdExists(uint256)": "2582"
							},
							"internal": {
								"_transferWithBurn(address,uint256)": "infinite",
								"_updateMap(address[] memory,bool,mapping(address => bool))": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 226,
									"end": 3480,
									"name": "PUSH",
									"source": 7,
									"value": "80"
								},
								{
									"begin": 226,
									"end": 3480,
									"name": "PUSH",
									"source": 7,
									"value": "40"
								},
								{
									"begin": 226,
									"end": 3480,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 226,
									"end": 3480,
									"name": "CALLVALUE",
									"source": 7
								},
								{
									"begin": 226,
									"end": 3480,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 226,
									"end": 3480,
									"name": "ISZERO",
									"source": 7
								},
								{
									"begin": 226,
									"end": 3480,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 226,
									"end": 3480,
									"name": "JUMPI",
									"source": 7
								},
								{
									"begin": 226,
									"end": 3480,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 226,
									"end": 3480,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 226,
									"end": 3480,
									"name": "REVERT",
									"source": 7
								},
								{
									"begin": 226,
									"end": 3480,
									"name": "tag",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 226,
									"end": 3480,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 226,
									"end": 3480,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 226,
									"end": 3480,
									"name": "PUSH #[$]",
									"source": 7,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 226,
									"end": 3480,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 226,
									"end": 3480,
									"name": "PUSH [$]",
									"source": 7,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 226,
									"end": 3480,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 226,
									"end": 3480,
									"name": "CODECOPY",
									"source": 7
								},
								{
									"begin": 226,
									"end": 3480,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 226,
									"end": 3480,
									"name": "RETURN",
									"source": 7
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220fd17e96138895d786446795db062db4024e697d3e09e8b837b851d4d79a428df64736f6c634300080b0033",
									".code": [
										{
											"begin": 226,
											"end": 3480,
											"name": "PUSH",
											"source": 7,
											"value": "80"
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "CALLVALUE",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "tag",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "PUSH",
											"source": 7,
											"value": "E0"
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "SHR",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "PUSH",
											"source": 7,
											"value": "70A08231"
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "25"
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "PUSH",
											"source": 7,
											"value": "A457C2D7"
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "26"
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "PUSH",
											"source": 7,
											"value": "A457C2D7"
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "19"
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "PUSH",
											"source": 7,
											"value": "A9059CBB"
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "PUSH",
											"source": 7,
											"value": "B722D0A5"
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "21"
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "PUSH",
											"source": 7,
											"value": "DD62ED3E"
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "22"
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "PUSH",
											"source": 7,
											"value": "F2FDE38B"
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "23"
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "PUSH",
											"source": 7,
											"value": "F9342285"
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "tag",
											"source": 7,
											"value": "26"
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "PUSH",
											"source": 7,
											"value": "70A08231"
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "14"
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "PUSH",
											"source": 7,
											"value": "715018A6"
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "15"
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "PUSH",
											"source": 7,
											"value": "8DA5CB5B"
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "16"
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "PUSH",
											"source": 7,
											"value": "95D89B41"
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "17"
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "PUSH",
											"source": 7,
											"value": "A3772662"
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "18"
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "tag",
											"source": 7,
											"value": "25"
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "PUSH",
											"source": 7,
											"value": "2CD77A5A"
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "27"
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "PUSH",
											"source": 7,
											"value": "2CD77A5A"
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "8"
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "PUSH",
											"source": 7,
											"value": "313CE567"
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "9"
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "PUSH",
											"source": 7,
											"value": "39509351"
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "10"
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "PUSH",
											"source": 7,
											"value": "3B124FE7"
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "11"
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "PUSH",
											"source": 7,
											"value": "46F0975A"
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "12"
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "PUSH",
											"source": 7,
											"value": "55B7DC67"
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "13"
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "tag",
											"source": 7,
											"value": "27"
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "PUSH",
											"source": 7,
											"value": "6FDDE03"
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "3"
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "PUSH",
											"source": 7,
											"value": "7C351DD"
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "PUSH",
											"source": 7,
											"value": "95EA7B3"
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "5"
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "PUSH",
											"source": 7,
											"value": "18160DDD"
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "6"
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "PUSH",
											"source": 7,
											"value": "23B872DD"
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "7"
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "tag",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 226,
											"end": 3480,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "tag",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "28"
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "29"
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "tag",
											"source": 2,
											"value": "28"
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "30"
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "31"
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "tag",
											"source": 2,
											"value": "30"
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 1859,
											"end": 1968,
											"name": "tag",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 1859,
											"end": 1968,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1859,
											"end": 1968,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "32"
										},
										{
											"begin": 1859,
											"end": 1968,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "33"
										},
										{
											"begin": 1859,
											"end": 1968,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 1859,
											"end": 1968,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 1859,
											"end": 1968,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "34"
										},
										{
											"begin": 1859,
											"end": 1968,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1859,
											"end": 1968,
											"name": "tag",
											"source": 7,
											"value": "33"
										},
										{
											"begin": 1859,
											"end": 1968,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1941,
											"end": 1960,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 1917,
											"end": 1921,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1941,
											"end": 1960,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1941,
											"end": 1960,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1941,
											"end": 1960,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1941,
											"end": 1952,
											"name": "PUSH",
											"source": 7,
											"value": "9D"
										},
										{
											"begin": 1941,
											"end": 1960,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1941,
											"end": 1960,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1941,
											"end": 1960,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1941,
											"end": 1960,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1941,
											"end": 1960,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 1941,
											"end": 1960,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 1941,
											"end": 1960,
											"name": "PUSH",
											"source": 7,
											"value": "FF"
										},
										{
											"begin": 1941,
											"end": 1960,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 1941,
											"end": 1960,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1859,
											"end": 1968,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1859,
											"end": 1968,
											"name": "tag",
											"source": 7,
											"value": "32"
										},
										{
											"begin": 1859,
											"end": 1968,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1859,
											"end": 1968,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1859,
											"end": 1968,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1150,
											"end": 1164,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1150,
											"end": 1164,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1143,
											"end": 1165,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1125,
											"end": 1166,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1125,
											"end": 1166,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1113,
											"end": 1115,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1098,
											"end": 1116,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1859,
											"end": 1968,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "30"
										},
										{
											"begin": 985,
											"end": 1172,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "tag",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "39"
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "tag",
											"source": 2,
											"value": "39"
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "41"
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3581,
											"end": 3687,
											"name": "tag",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 3581,
											"end": 3687,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3668,
											"end": 3680,
											"name": "PUSH",
											"source": 2,
											"value": "35"
										},
										{
											"begin": 3668,
											"end": 3680,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 3581,
											"end": 3687,
											"name": "tag",
											"source": 2,
											"value": "43"
										},
										{
											"begin": 3581,
											"end": 3687,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3581,
											"end": 3687,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3581,
											"end": 3687,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1582,
											"end": 1607,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1582,
											"end": 1607,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1582,
											"end": 1607,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1570,
											"end": 1572,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1555,
											"end": 1573,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3581,
											"end": 3687,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "30"
										},
										{
											"begin": 1436,
											"end": 1613,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "tag",
											"source": 2,
											"value": "7"
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "48"
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "49"
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "tag",
											"source": 2,
											"value": "48"
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "50"
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 590,
											"end": 1146,
											"name": "tag",
											"source": 7,
											"value": "8"
										},
										{
											"begin": 590,
											"end": 1146,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 590,
											"end": 1146,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "52"
										},
										{
											"begin": 590,
											"end": 1146,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "53"
										},
										{
											"begin": 590,
											"end": 1146,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 590,
											"end": 1146,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 590,
											"end": 1146,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "54"
										},
										{
											"begin": 590,
											"end": 1146,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 590,
											"end": 1146,
											"name": "tag",
											"source": 7,
											"value": "53"
										},
										{
											"begin": 590,
											"end": 1146,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 590,
											"end": 1146,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "55"
										},
										{
											"begin": 590,
											"end": 1146,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 590,
											"end": 1146,
											"name": "tag",
											"source": 7,
											"value": "52"
										},
										{
											"begin": 590,
											"end": 1146,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 590,
											"end": 1146,
											"name": "STOP",
											"source": 7
										},
										{
											"begin": 3430,
											"end": 3521,
											"name": "tag",
											"source": 2,
											"value": "9"
										},
										{
											"begin": 3430,
											"end": 3521,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3430,
											"end": 3521,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3430,
											"end": 3521,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3512,
											"end": 3514,
											"name": "PUSH",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 3959,
											"end": 3995,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3959,
											"end": 3995,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3947,
											"end": 3949,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 3932,
											"end": 3950,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3430,
											"end": 3521,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "30"
										},
										{
											"begin": 3817,
											"end": 4001,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "tag",
											"source": 2,
											"value": "10"
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "61"
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "tag",
											"source": 2,
											"value": "61"
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "62"
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 381,
											"end": 403,
											"name": "tag",
											"source": 7,
											"value": "11"
										},
										{
											"begin": 381,
											"end": 403,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 381,
											"end": 403,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "43"
										},
										{
											"begin": 381,
											"end": 403,
											"name": "PUSH",
											"source": 7,
											"value": "9A"
										},
										{
											"begin": 381,
											"end": 403,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 381,
											"end": 403,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 381,
											"end": 403,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1510,
											"end": 1604,
											"name": "tag",
											"source": 7,
											"value": "12"
										},
										{
											"begin": 1510,
											"end": 1604,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1510,
											"end": 1604,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "67"
										},
										{
											"begin": 1510,
											"end": 1604,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "68"
										},
										{
											"begin": 1510,
											"end": 1604,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1510,
											"end": 1604,
											"name": "tag",
											"source": 7,
											"value": "67"
										},
										{
											"begin": 1510,
											"end": 1604,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1510,
											"end": 1604,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1510,
											"end": 1604,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1510,
											"end": 1604,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "30"
										},
										{
											"begin": 1510,
											"end": 1604,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1510,
											"end": 1604,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1510,
											"end": 1604,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "70"
										},
										{
											"begin": 1510,
											"end": 1604,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2225,
											"end": 3477,
											"name": "tag",
											"source": 7,
											"value": "13"
										},
										{
											"begin": 2225,
											"end": 3477,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2225,
											"end": 3477,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "52"
										},
										{
											"begin": 2225,
											"end": 3477,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "72"
										},
										{
											"begin": 2225,
											"end": 3477,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 2225,
											"end": 3477,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 2225,
											"end": 3477,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "73"
										},
										{
											"begin": 2225,
											"end": 3477,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2225,
											"end": 3477,
											"name": "tag",
											"source": 7,
											"value": "72"
										},
										{
											"begin": 2225,
											"end": 3477,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2225,
											"end": 3477,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "74"
										},
										{
											"begin": 2225,
											"end": 3477,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "tag",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "43"
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "76"
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "34"
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "tag",
											"source": 2,
											"value": "76"
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3845,
											"end": 3863,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3819,
											"end": 3826,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3845,
											"end": 3863,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3845,
											"end": 3863,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3845,
											"end": 3863,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3845,
											"end": 3854,
											"name": "PUSH",
											"source": 2,
											"value": "33"
										},
										{
											"begin": 3845,
											"end": 3863,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3845,
											"end": 3863,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3845,
											"end": 3863,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3845,
											"end": 3863,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3845,
											"end": 3863,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 3845,
											"end": 3863,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 3845,
											"end": 3863,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2071,
											"end": 2172,
											"name": "tag",
											"source": 0,
											"value": "15"
										},
										{
											"begin": 2071,
											"end": 2172,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2071,
											"end": 2172,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "52"
										},
										{
											"begin": 2071,
											"end": 2172,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 2071,
											"end": 2172,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1441,
											"end": 1526,
											"name": "tag",
											"source": 0,
											"value": "16"
										},
										{
											"begin": 1441,
											"end": 1526,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1513,
											"end": 1519,
											"name": "PUSH",
											"source": 0,
											"value": "65"
										},
										{
											"begin": 1513,
											"end": 1519,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1513,
											"end": 1519,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1441,
											"end": 1526,
											"name": "tag",
											"source": 0,
											"value": "81"
										},
										{
											"begin": 1441,
											"end": 1526,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1441,
											"end": 1526,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1441,
											"end": 1526,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5229,
											"end": 5261,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5229,
											"end": 5261,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 5229,
											"end": 5261,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 5211,
											"end": 5262,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5211,
											"end": 5262,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5199,
											"end": 5201,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 5184,
											"end": 5202,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1441,
											"end": 1526,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "30"
										},
										{
											"begin": 5065,
											"end": 5268,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2704,
											"end": 2806,
											"name": "tag",
											"source": 2,
											"value": "17"
										},
										{
											"begin": 2704,
											"end": 2806,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2704,
											"end": 2806,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "28"
										},
										{
											"begin": 2704,
											"end": 2806,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "86"
										},
										{
											"begin": 2704,
											"end": 2806,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1612,
											"end": 1851,
											"name": "tag",
											"source": 7,
											"value": "18"
										},
										{
											"begin": 1612,
											"end": 1851,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1612,
											"end": 1851,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "52"
										},
										{
											"begin": 1612,
											"end": 1851,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "89"
										},
										{
											"begin": 1612,
											"end": 1851,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 1612,
											"end": 1851,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 1612,
											"end": 1851,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "90"
										},
										{
											"begin": 1612,
											"end": 1851,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1612,
											"end": 1851,
											"name": "tag",
											"source": 7,
											"value": "89"
										},
										{
											"begin": 1612,
											"end": 1851,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1612,
											"end": 1851,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "91"
										},
										{
											"begin": 1612,
											"end": 1851,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "tag",
											"source": 2,
											"value": "19"
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "93"
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "tag",
											"source": 2,
											"value": "93"
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "94"
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "tag",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "97"
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "tag",
											"source": 2,
											"value": "97"
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "98"
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1154,
											"end": 1260,
											"name": "tag",
											"source": 7,
											"value": "21"
										},
										{
											"begin": 1154,
											"end": 1260,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1234,
											"end": 1252,
											"name": "PUSH",
											"source": 7,
											"value": "9B"
										},
										{
											"begin": 1234,
											"end": 1252,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1234,
											"end": 1252,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 1154,
											"end": 1260,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "81"
										},
										{
											"begin": 1154,
											"end": 1260,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "tag",
											"source": 2,
											"value": "22"
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "43"
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "104"
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "105"
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "tag",
											"source": 2,
											"value": "104"
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "106"
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2321,
											"end": 2519,
											"name": "tag",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 2321,
											"end": 2519,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2321,
											"end": 2519,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "52"
										},
										{
											"begin": 2321,
											"end": 2519,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "109"
										},
										{
											"begin": 2321,
											"end": 2519,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 2321,
											"end": 2519,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2321,
											"end": 2519,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "34"
										},
										{
											"begin": 2321,
											"end": 2519,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2321,
											"end": 2519,
											"name": "tag",
											"source": 0,
											"value": "109"
										},
										{
											"begin": 2321,
											"end": 2519,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2321,
											"end": 2519,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "110"
										},
										{
											"begin": 2321,
											"end": 2519,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 535,
											"end": 581,
											"name": "tag",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 535,
											"end": 581,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 535,
											"end": 581,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "32"
										},
										{
											"begin": 535,
											"end": 581,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "112"
										},
										{
											"begin": 535,
											"end": 581,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 535,
											"end": 581,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 535,
											"end": 581,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "113"
										},
										{
											"begin": 535,
											"end": 581,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 535,
											"end": 581,
											"name": "tag",
											"source": 7,
											"value": "112"
										},
										{
											"begin": 535,
											"end": 581,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 535,
											"end": 581,
											"name": "PUSH",
											"source": 7,
											"value": "9E"
										},
										{
											"begin": 535,
											"end": 581,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 535,
											"end": 581,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 535,
											"end": 581,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 535,
											"end": 581,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 535,
											"end": 581,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 535,
											"end": 581,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 535,
											"end": 581,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 535,
											"end": 581,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 535,
											"end": 581,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 535,
											"end": 581,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 535,
											"end": 581,
											"name": "PUSH",
											"source": 7,
											"value": "FF"
										},
										{
											"begin": 535,
											"end": 581,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 535,
											"end": 581,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 535,
											"end": 581,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "tag",
											"source": 2,
											"value": "29"
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2547,
											"end": 2560,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 2579,
											"end": 2584,
											"name": "PUSH",
											"source": 2,
											"value": "36"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "117"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "118"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "tag",
											"source": 2,
											"value": "117"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "119"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "118"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "tag",
											"source": 2,
											"value": "119"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "120"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "121"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "120"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "tag",
											"source": 2,
											"value": "121"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "tag",
											"source": 2,
											"value": "122"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "122"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "tag",
											"source": 2,
											"value": "120"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "tag",
											"source": 2,
											"value": "41"
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4853,
											"end": 4857,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 4907,
											"end": 4939,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "127"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4923,
											"end": 4930,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 4932,
											"end": 4938,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 4907,
											"end": 4915,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "128"
										},
										{
											"begin": 4907,
											"end": 4939,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 4907,
											"end": 4939,
											"name": "tag",
											"source": 2,
											"value": "127"
										},
										{
											"begin": 4907,
											"end": 4939,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4956,
											"end": 4960,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 4956,
											"end": 4960,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "tag",
											"source": 2,
											"value": "50"
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5656,
											"end": 5660,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 5712,
											"end": 5750,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "132"
										},
										{
											"begin": 5728,
											"end": 5732,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 929,
											"end": 939,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5743,
											"end": 5749,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 5712,
											"end": 5727,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "133"
										},
										{
											"begin": 5712,
											"end": 5750,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 5712,
											"end": 5750,
											"name": "tag",
											"source": 2,
											"value": "132"
										},
										{
											"begin": 5712,
											"end": 5750,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5760,
											"end": 5787,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "134"
										},
										{
											"begin": 5770,
											"end": 5774,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 5776,
											"end": 5778,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 5780,
											"end": 5786,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 5760,
											"end": 5769,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "135"
										},
										{
											"begin": 5760,
											"end": 5787,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 5760,
											"end": 5787,
											"name": "tag",
											"source": 2,
											"value": "134"
										},
										{
											"begin": 5760,
											"end": 5787,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5804,
											"end": 5808,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 5804,
											"end": 5808,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 590,
											"end": 1146,
											"name": "tag",
											"source": 7,
											"value": "55"
										},
										{
											"begin": 590,
											"end": 1146,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3111,
											"end": 3130,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3134,
											"end": 3147,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3147,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 3134,
											"end": 3147,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3147,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3147,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 3134,
											"end": 3147,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3133,
											"end": 3147,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 3133,
											"end": 3147,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3179,
											"end": 3213,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3179,
											"end": 3213,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 3179,
											"end": 3213,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "137"
										},
										{
											"begin": 3179,
											"end": 3213,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3197,
											"end": 3209,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3197,
											"end": 3209,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 3212,
											"end": 3213,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 3197,
											"end": 3209,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 3197,
											"end": 3209,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3197,
											"end": 3209,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3197,
											"end": 3209,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3197,
											"end": 3213,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 3179,
											"end": 3213,
											"name": "tag",
											"source": 1,
											"value": "137"
										},
										{
											"begin": 3179,
											"end": 3213,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3178,
											"end": 3286,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3178,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "141"
										},
										{
											"begin": 3178,
											"end": 3286,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3258,
											"end": 3262,
											"name": "ADDRESS",
											"source": 1
										},
										{
											"begin": 1476,
											"end": 1495,
											"name": "EXTCODESIZE",
											"source": 5
										},
										{
											"begin": 1476,
											"end": 1499,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 1476,
											"end": 1499,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1476,
											"end": 1499,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 3219,
											"end": 3285,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "141"
										},
										{
											"begin": 3219,
											"end": 3285,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3268,
											"end": 3280,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3268,
											"end": 3280,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 3268,
											"end": 3280,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 3268,
											"end": 3280,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3268,
											"end": 3280,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 3268,
											"end": 3285,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 3219,
											"end": 3285,
											"name": "tag",
											"source": 1,
											"value": "141"
										},
										{
											"begin": 3219,
											"end": 3285,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3157,
											"end": 3358,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "142"
										},
										{
											"begin": 3157,
											"end": 3358,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 3157,
											"end": 3358,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3157,
											"end": 3358,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3157,
											"end": 3358,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3157,
											"end": 3358,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 7267,
											"end": 7269,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 3157,
											"end": 3358,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 3157,
											"end": 3358,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 3157,
											"end": 3358,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 7249,
											"end": 7270,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 7306,
											"end": 7308,
											"name": "PUSH",
											"source": 8,
											"value": "2E"
										},
										{
											"begin": 7286,
											"end": 7304,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 7286,
											"end": 7304,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 7286,
											"end": 7304,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7279,
											"end": 7309,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 7345,
											"end": 7379,
											"name": "PUSH",
											"source": 8,
											"value": "496E697469616C697A61626C653A20636F6E747261637420697320616C726561"
										},
										{
											"begin": 7325,
											"end": 7343,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 7325,
											"end": 7343,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 7325,
											"end": 7343,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7318,
											"end": 7380,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "191E481A5B9A5D1A585B1A5E9959"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "92"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7396,
											"end": 7414,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 7396,
											"end": 7414,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 7396,
											"end": 7414,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7389,
											"end": 7433,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 7450,
											"end": 7469,
											"name": "PUSH",
											"source": 8,
											"value": "84"
										},
										{
											"begin": 7450,
											"end": 7469,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3157,
											"end": 3358,
											"name": "tag",
											"source": 1,
											"value": "143"
										},
										{
											"begin": 3157,
											"end": 3358,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3157,
											"end": 3358,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3157,
											"end": 3358,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 3157,
											"end": 3358,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3157,
											"end": 3358,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3157,
											"end": 3358,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 3157,
											"end": 3358,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3157,
											"end": 3358,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 3157,
											"end": 3358,
											"name": "tag",
											"source": 1,
											"value": "142"
										},
										{
											"begin": 3157,
											"end": 3358,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3368,
											"end": 3380,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3368,
											"end": 3384,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3368,
											"end": 3384,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3368,
											"end": 3384,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3383,
											"end": 3384,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 3368,
											"end": 3384,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 3368,
											"end": 3384,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3368,
											"end": 3384,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 3394,
											"end": 3459,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3394,
											"end": 3459,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 3394,
											"end": 3459,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "145"
										},
										{
											"begin": 3394,
											"end": 3459,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 3428,
											"end": 3441,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3428,
											"end": 3448,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3428,
											"end": 3448,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF00"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3428,
											"end": 3448,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3428,
											"end": 3448,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 3428,
											"end": 3448,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 3428,
											"end": 3448,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3428,
											"end": 3448,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 3394,
											"end": 3459,
											"name": "tag",
											"source": 1,
											"value": "145"
										},
										{
											"begin": 3394,
											"end": 3459,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 823,
											"end": 839,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "147"
										},
										{
											"begin": 823,
											"end": 837,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "148"
										},
										{
											"begin": 823,
											"end": 839,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 823,
											"end": 839,
											"name": "tag",
											"source": 7,
											"value": "147"
										},
										{
											"begin": 823,
											"end": 839,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 850,
											"end": 876,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "149"
										},
										{
											"begin": 863,
											"end": 867,
											"name": "DUP8",
											"source": 7
										},
										{
											"begin": 869,
											"end": 875,
											"name": "DUP8",
											"source": 7
										},
										{
											"begin": 850,
											"end": 862,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "150"
										},
										{
											"begin": 850,
											"end": 876,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 850,
											"end": 876,
											"name": "tag",
											"source": 7,
											"value": "149"
										},
										{
											"begin": 850,
											"end": 876,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 887,
											"end": 899,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 887,
											"end": 899,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 887,
											"end": 899,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "151"
										},
										{
											"begin": 887,
											"end": 899,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 887,
											"end": 892,
											"name": "PUSH",
											"source": 7,
											"value": "97"
										},
										{
											"begin": 887,
											"end": 892,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 887,
											"end": 899,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 887,
											"end": 899,
											"name": "DUP11",
											"source": 7
										},
										{
											"begin": 887,
											"end": 899,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 887,
											"end": 899,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 887,
											"end": 899,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "152"
										},
										{
											"begin": 887,
											"end": 899,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 887,
											"end": 899,
											"name": "tag",
											"source": 7,
											"value": "151"
										},
										{
											"begin": 887,
											"end": 899,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 910,
											"end": 926,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 910,
											"end": 926,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 910,
											"end": 926,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "153"
										},
										{
											"begin": 910,
											"end": 926,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 910,
											"end": 917,
											"name": "PUSH",
											"source": 7,
											"value": "98"
										},
										{
											"begin": 910,
											"end": 917,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 910,
											"end": 926,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 910,
											"end": 926,
											"name": "DUP10",
											"source": 7
										},
										{
											"begin": 910,
											"end": 926,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 910,
											"end": 926,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 910,
											"end": 926,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "152"
										},
										{
											"begin": 910,
											"end": 926,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 910,
											"end": 926,
											"name": "tag",
											"source": 7,
											"value": "153"
										},
										{
											"begin": 910,
											"end": 926,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 937,
											"end": 946,
											"name": "PUSH",
											"source": 7,
											"value": "99"
										},
										{
											"begin": 937,
											"end": 957,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 937,
											"end": 957,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 937,
											"end": 957,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 937,
											"end": 957,
											"name": "PUSH",
											"source": 7,
											"value": "FF"
										},
										{
											"begin": 937,
											"end": 957,
											"name": "DUP8",
											"source": 7
										},
										{
											"begin": 937,
											"end": 957,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 937,
											"end": 957,
											"name": "OR",
											"source": 7
										},
										{
											"begin": 937,
											"end": 957,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 937,
											"end": 957,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 968,
											"end": 975,
											"name": "PUSH",
											"source": 7,
											"value": "9A"
										},
										{
											"begin": 968,
											"end": 984,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 968,
											"end": 984,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 968,
											"end": 984,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 995,
											"end": 1013,
											"name": "PUSH",
											"source": 7,
											"value": "9B"
										},
										{
											"begin": 995,
											"end": 1033,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 995,
											"end": 1033,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 995,
											"end": 1033,
											"name": "AND",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 995,
											"end": 1033,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 995,
											"end": 1033,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 995,
											"end": 1033,
											"name": "OR",
											"source": 7
										},
										{
											"begin": 995,
											"end": 1033,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 995,
											"end": 1033,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 1101,
											"end": 1138,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "154"
										},
										{
											"begin": 995,
											"end": 1033,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1126,
											"end": 1137,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 1101,
											"end": 1106,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "155"
										},
										{
											"begin": 1101,
											"end": 1138,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1101,
											"end": 1138,
											"name": "tag",
											"source": 7,
											"value": "154"
										},
										{
											"begin": 1101,
											"end": 1138,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3483,
											"end": 3497,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3479,
											"end": 3578,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 3479,
											"end": 3578,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "156"
										},
										{
											"begin": 3479,
											"end": 3578,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 3529,
											"end": 3534,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3513,
											"end": 3534,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3513,
											"end": 3534,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF00"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3513,
											"end": 3534,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3513,
											"end": 3534,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3513,
											"end": 3534,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 3553,
											"end": 3567,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3553,
											"end": 3567,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": 3959,
											"end": 3995,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3959,
											"end": 3995,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3553,
											"end": 3567,
											"name": "PUSH",
											"source": 1,
											"value": "7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498"
										},
										{
											"begin": 3553,
											"end": 3567,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3947,
											"end": 3949,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 3932,
											"end": 3950,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3553,
											"end": 3567,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3553,
											"end": 3567,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 3553,
											"end": 3567,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3553,
											"end": 3567,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3553,
											"end": 3567,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 3553,
											"end": 3567,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3553,
											"end": 3567,
											"name": "LOG1",
											"source": 1
										},
										{
											"begin": 3479,
											"end": 3578,
											"name": "tag",
											"source": 1,
											"value": "156"
										},
										{
											"begin": 3479,
											"end": 3578,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3101,
											"end": 3584,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 590,
											"end": 1146,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 590,
											"end": 1146,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 590,
											"end": 1146,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 590,
											"end": 1146,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 590,
											"end": 1146,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 590,
											"end": 1146,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 590,
											"end": 1146,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "tag",
											"source": 2,
											"value": "62"
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6298,
											"end": 6302,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 6352,
											"end": 6416,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "127"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6368,
											"end": 6375,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 6405,
											"end": 6415,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 6377,
											"end": 6402,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "163"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 6368,
											"end": 6375,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 6377,
											"end": 6386,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "106"
										},
										{
											"begin": 6377,
											"end": 6402,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 6377,
											"end": 6402,
											"name": "tag",
											"source": 2,
											"value": "163"
										},
										{
											"begin": 6377,
											"end": 6402,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6377,
											"end": 6415,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "164"
										},
										{
											"begin": 6377,
											"end": 6415,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6377,
											"end": 6415,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6377,
											"end": 6415,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "165"
										},
										{
											"begin": 6377,
											"end": 6415,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 6377,
											"end": 6415,
											"name": "tag",
											"source": 2,
											"value": "164"
										},
										{
											"begin": 6377,
											"end": 6415,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6352,
											"end": 6360,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "128"
										},
										{
											"begin": 6352,
											"end": 6416,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1510,
											"end": 1604,
											"name": "tag",
											"source": 7,
											"value": "68"
										},
										{
											"begin": 1510,
											"end": 1604,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1552,
											"end": 1568,
											"name": "PUSH",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 1588,
											"end": 1596,
											"name": "PUSH",
											"source": 7,
											"value": "9C"
										},
										{
											"begin": 1581,
											"end": 1596,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1581,
											"end": 1596,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 1581,
											"end": 1596,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1581,
											"end": 1596,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1581,
											"end": 1596,
											"name": "MUL",
											"source": 7
										},
										{
											"begin": 1581,
											"end": 1596,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1581,
											"end": 1596,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1581,
											"end": 1596,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1581,
											"end": 1596,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1581,
											"end": 1596,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1581,
											"end": 1596,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1581,
											"end": 1596,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1581,
											"end": 1596,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1581,
											"end": 1596,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1581,
											"end": 1596,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1581,
											"end": 1596,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 1581,
											"end": 1596,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1581,
											"end": 1596,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1581,
											"end": 1596,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1581,
											"end": 1596,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1581,
											"end": 1596,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1581,
											"end": 1596,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1581,
											"end": 1596,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1581,
											"end": 1596,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1581,
											"end": 1596,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1581,
											"end": 1596,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 1581,
											"end": 1596,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1581,
											"end": 1596,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 1581,
											"end": 1596,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "120"
										},
										{
											"begin": 1581,
											"end": 1596,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1581,
											"end": 1596,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1581,
											"end": 1596,
											"name": "MUL",
											"source": 7
										},
										{
											"begin": 1581,
											"end": 1596,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1581,
											"end": 1596,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1581,
											"end": 1596,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1581,
											"end": 1596,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1581,
											"end": 1596,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1581,
											"end": 1596,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1581,
											"end": 1596,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1581,
											"end": 1596,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1581,
											"end": 1596,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 1581,
											"end": 1596,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1581,
											"end": 1596,
											"name": "tag",
											"source": 7,
											"value": "168"
										},
										{
											"begin": 1581,
											"end": 1596,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1581,
											"end": 1596,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1581,
											"end": 1596,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1581,
											"end": 1596,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 1581,
											"end": 1596,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1581,
											"end": 1596,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1581,
											"end": 1596,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 1581,
											"end": 1596,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1581,
											"end": 1596,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1581,
											"end": 1596,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1581,
											"end": 1596,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1581,
											"end": 1596,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1581,
											"end": 1596,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1581,
											"end": 1596,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1581,
											"end": 1596,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 1581,
											"end": 1596,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 1581,
											"end": 1596,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "168"
										},
										{
											"begin": 1581,
											"end": 1596,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1581,
											"end": 1596,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1581,
											"end": 1596,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1581,
											"end": 1596,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1581,
											"end": 1596,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1581,
											"end": 1596,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1581,
											"end": 1596,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1581,
											"end": 1596,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1510,
											"end": 1604,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1510,
											"end": 1604,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 2225,
											"end": 3477,
											"name": "tag",
											"source": 7,
											"value": "74"
										},
										{
											"begin": 2225,
											"end": 3477,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2511,
											"end": 2535,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2511,
											"end": 2535,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 2511,
											"end": 2535,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2511,
											"end": 2535,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2511,
											"end": 2525,
											"name": "PUSH",
											"source": 7,
											"value": "9E"
										},
										{
											"begin": 2511,
											"end": 2535,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2511,
											"end": 2535,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2511,
											"end": 2535,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2511,
											"end": 2535,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2511,
											"end": 2535,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 2511,
											"end": 2535,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 2511,
											"end": 2535,
											"name": "PUSH",
											"source": 7,
											"value": "FF"
										},
										{
											"begin": 2511,
											"end": 2535,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 2510,
											"end": 2535,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 2502,
											"end": 2556,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "170"
										},
										{
											"begin": 2502,
											"end": 2556,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 2502,
											"end": 2556,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2502,
											"end": 2556,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2502,
											"end": 2556,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2502,
											"end": 2556,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 8146,
											"end": 8148,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 2502,
											"end": 2556,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 2502,
											"end": 2556,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2502,
											"end": 2556,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 8128,
											"end": 8149,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 8185,
											"end": 8187,
											"name": "PUSH",
											"source": 8,
											"value": "10"
										},
										{
											"begin": 8165,
											"end": 8183,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 8165,
											"end": 8183,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 8165,
											"end": 8183,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8158,
											"end": 8188,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "556E6971756520696420657869737473"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "80"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8204,
											"end": 8222,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 8204,
											"end": 8222,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 8204,
											"end": 8222,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8197,
											"end": 8243,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 8260,
											"end": 8278,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 8260,
											"end": 8278,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2502,
											"end": 2556,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "143"
										},
										{
											"begin": 7944,
											"end": 8284,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2502,
											"end": 2556,
											"name": "tag",
											"source": 7,
											"value": "170"
										},
										{
											"begin": 2502,
											"end": 2556,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2586,
											"end": 2596,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 2569,
											"end": 2583,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2623,
											"end": 2636,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "173"
										},
										{
											"begin": 1513,
											"end": 1519,
											"name": "PUSH",
											"source": 0,
											"value": "65"
										},
										{
											"begin": 1513,
											"end": 1519,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1513,
											"end": 1519,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1513,
											"end": 1519,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1441,
											"end": 1526,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2623,
											"end": 2636,
											"name": "tag",
											"source": 7,
											"value": "173"
										},
										{
											"begin": 2623,
											"end": 2636,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3230,
											"end": 3254,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3230,
											"end": 3254,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 3230,
											"end": 3254,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3230,
											"end": 3254,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3230,
											"end": 3244,
											"name": "PUSH",
											"source": 7,
											"value": "9E"
										},
										{
											"begin": 3230,
											"end": 3254,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 3230,
											"end": 3254,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3230,
											"end": 3254,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 3230,
											"end": 3254,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3230,
											"end": 3254,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 3230,
											"end": 3261,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3230,
											"end": 3261,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3230,
											"end": 3261,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 3257,
											"end": 3261,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 3230,
											"end": 3261,
											"name": "OR",
											"source": 7
										},
										{
											"begin": 3230,
											"end": 3261,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3230,
											"end": 3261,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 2607,
											"end": 2636,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3276,
											"end": 3291,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3276,
											"end": 3291,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3276,
											"end": 3291,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 3276,
											"end": 3291,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3276,
											"end": 3291,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3276,
											"end": 3291,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 3276,
											"end": 3291,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 3272,
											"end": 3470,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 3272,
											"end": 3470,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "174"
										},
										{
											"begin": 3272,
											"end": 3470,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 3356,
											"end": 3389,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "175"
										},
										{
											"begin": 3371,
											"end": 3380,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 3382,
											"end": 3388,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 3356,
											"end": 3370,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "98"
										},
										{
											"begin": 3356,
											"end": 3389,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 3356,
											"end": 3389,
											"name": "tag",
											"source": 7,
											"value": "175"
										},
										{
											"begin": 3356,
											"end": 3389,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3356,
											"end": 3389,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3272,
											"end": 3470,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "177"
										},
										{
											"begin": 3272,
											"end": 3470,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 3272,
											"end": 3470,
											"name": "tag",
											"source": 7,
											"value": "174"
										},
										{
											"begin": 3272,
											"end": 3470,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3422,
											"end": 3458,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "177"
										},
										{
											"begin": 3440,
											"end": 3449,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 3451,
											"end": 3457,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 3422,
											"end": 3439,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "178"
										},
										{
											"begin": 3422,
											"end": 3458,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 3422,
											"end": 3458,
											"name": "tag",
											"source": 7,
											"value": "177"
										},
										{
											"begin": 3422,
											"end": 3458,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2422,
											"end": 3477,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2422,
											"end": 3477,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2225,
											"end": 3477,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2225,
											"end": 3477,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2225,
											"end": 3477,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2225,
											"end": 3477,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2225,
											"end": 3477,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 2071,
											"end": 2172,
											"name": "tag",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 2071,
											"end": 2172,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1334,
											"end": 1347,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "181"
										},
										{
											"begin": 1334,
											"end": 1345,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "182"
										},
										{
											"begin": 1334,
											"end": 1347,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1334,
											"end": 1347,
											"name": "tag",
											"source": 0,
											"value": "181"
										},
										{
											"begin": 1334,
											"end": 1347,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2135,
											"end": 2165,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "184"
										},
										{
											"begin": 2162,
											"end": 2163,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2135,
											"end": 2153,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "185"
										},
										{
											"begin": 2135,
											"end": 2165,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2135,
											"end": 2165,
											"name": "tag",
											"source": 0,
											"value": "184"
										},
										{
											"begin": 2135,
											"end": 2165,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2071,
											"end": 2172,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 2704,
											"end": 2806,
											"name": "tag",
											"source": 2,
											"value": "86"
										},
										{
											"begin": 2704,
											"end": 2806,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2760,
											"end": 2773,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 2792,
											"end": 2799,
											"name": "PUSH",
											"source": 2,
											"value": "37"
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "117"
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "118"
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1612,
											"end": 1851,
											"name": "tag",
											"source": 7,
											"value": "91"
										},
										{
											"begin": 1612,
											"end": 1851,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1334,
											"end": 1347,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "194"
										},
										{
											"begin": 1334,
											"end": 1345,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "182"
										},
										{
											"begin": 1334,
											"end": 1347,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1334,
											"end": 1347,
											"name": "tag",
											"source": 0,
											"value": "194"
										},
										{
											"begin": 1334,
											"end": 1347,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1697,
											"end": 1737,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "196"
										},
										{
											"begin": 1708,
											"end": 1716,
											"name": "PUSH",
											"source": 7,
											"value": "9C"
										},
										{
											"begin": 1697,
											"end": 1737,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1697,
											"end": 1737,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 1697,
											"end": 1737,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1697,
											"end": 1737,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1697,
											"end": 1737,
											"name": "MUL",
											"source": 7
										},
										{
											"begin": 1697,
											"end": 1737,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1697,
											"end": 1737,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1697,
											"end": 1737,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1697,
											"end": 1737,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1697,
											"end": 1737,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1697,
											"end": 1737,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1697,
											"end": 1737,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1697,
											"end": 1737,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1697,
											"end": 1737,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1697,
											"end": 1737,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1697,
											"end": 1737,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 1697,
											"end": 1737,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1697,
											"end": 1737,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1697,
											"end": 1737,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1697,
											"end": 1737,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1697,
											"end": 1737,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1697,
											"end": 1737,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1697,
											"end": 1737,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1697,
											"end": 1737,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1697,
											"end": 1737,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1697,
											"end": 1737,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 1697,
											"end": 1737,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1697,
											"end": 1737,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 1697,
											"end": 1737,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "197"
										},
										{
											"begin": 1697,
											"end": 1737,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1697,
											"end": 1737,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1697,
											"end": 1737,
											"name": "MUL",
											"source": 7
										},
										{
											"begin": 1697,
											"end": 1737,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1697,
											"end": 1737,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1697,
											"end": 1737,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1697,
											"end": 1737,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1697,
											"end": 1737,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1697,
											"end": 1737,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1697,
											"end": 1737,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1697,
											"end": 1737,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1697,
											"end": 1737,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 1697,
											"end": 1737,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1697,
											"end": 1737,
											"name": "tag",
											"source": 7,
											"value": "198"
										},
										{
											"begin": 1697,
											"end": 1737,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1697,
											"end": 1737,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1697,
											"end": 1737,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1697,
											"end": 1737,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 1697,
											"end": 1737,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1697,
											"end": 1737,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1697,
											"end": 1737,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 1697,
											"end": 1737,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1697,
											"end": 1737,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1697,
											"end": 1737,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1697,
											"end": 1737,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1697,
											"end": 1737,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1697,
											"end": 1737,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1697,
											"end": 1737,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1697,
											"end": 1737,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 1697,
											"end": 1737,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 1697,
											"end": 1737,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "198"
										},
										{
											"begin": 1697,
											"end": 1737,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1697,
											"end": 1737,
											"name": "tag",
											"source": 7,
											"value": "197"
										},
										{
											"begin": 1697,
											"end": 1737,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1697,
											"end": 1737,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1697,
											"end": 1737,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1697,
											"end": 1737,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1697,
											"end": 1737,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1697,
											"end": 1737,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1718,
											"end": 1723,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1725,
											"end": 1736,
											"name": "PUSH",
											"source": 7,
											"value": "9D"
										},
										{
											"begin": 1697,
											"end": 1707,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "199"
										},
										{
											"begin": 1697,
											"end": 1737,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1697,
											"end": 1737,
											"name": "tag",
											"source": 7,
											"value": "196"
										},
										{
											"begin": 1697,
											"end": 1737,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1748,
											"end": 1763,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "200"
										},
										{
											"begin": 1755,
											"end": 1763,
											"name": "PUSH",
											"source": 7,
											"value": "9C"
										},
										{
											"begin": 1755,
											"end": 1763,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1748,
											"end": 1763,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "201"
										},
										{
											"begin": 1748,
											"end": 1763,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1748,
											"end": 1763,
											"name": "tag",
											"source": 7,
											"value": "200"
										},
										{
											"begin": 1748,
											"end": 1763,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1774,
											"end": 1793,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1774,
											"end": 1793,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1774,
											"end": 1793,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "202"
										},
										{
											"begin": 1774,
											"end": 1793,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1774,
											"end": 1782,
											"name": "PUSH",
											"source": 7,
											"value": "9C"
										},
										{
											"begin": 1774,
											"end": 1782,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1774,
											"end": 1793,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1774,
											"end": 1793,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 1774,
											"end": 1793,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1774,
											"end": 1793,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1774,
											"end": 1793,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "203"
										},
										{
											"begin": 1774,
											"end": 1793,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1774,
											"end": 1793,
											"name": "tag",
											"source": 7,
											"value": "202"
										},
										{
											"begin": 1774,
											"end": 1793,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1774,
											"end": 1793,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1804,
											"end": 1843,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "204"
										},
										{
											"begin": 1815,
											"end": 1823,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1825,
											"end": 1829,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 1831,
											"end": 1842,
											"name": "PUSH",
											"source": 7,
											"value": "9D"
										},
										{
											"begin": 1804,
											"end": 1814,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "199"
										},
										{
											"begin": 1804,
											"end": 1843,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1804,
											"end": 1843,
											"name": "tag",
											"source": 7,
											"value": "204"
										},
										{
											"begin": 1804,
											"end": 1843,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1612,
											"end": 1851,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1612,
											"end": 1851,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "tag",
											"source": 2,
											"value": "94"
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7024,
											"end": 7028,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 7024,
											"end": 7028,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7105,
											"end": 7130,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "207"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7122,
											"end": 7129,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 7105,
											"end": 7114,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "106"
										},
										{
											"begin": 7105,
											"end": 7130,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 7105,
											"end": 7130,
											"name": "tag",
											"source": 2,
											"value": "207"
										},
										{
											"begin": 7105,
											"end": 7130,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7078,
											"end": 7130,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7078,
											"end": 7130,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7168,
											"end": 7183,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 7148,
											"end": 7164,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7148,
											"end": 7183,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 7148,
											"end": 7183,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "208"
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8491,
											"end": 8493,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 8473,
											"end": 8494,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 8530,
											"end": 8532,
											"name": "PUSH",
											"source": 8,
											"value": "25"
										},
										{
											"begin": 8510,
											"end": 8528,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 8510,
											"end": 8528,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 8510,
											"end": 8528,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8503,
											"end": 8533,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 8569,
											"end": 8603,
											"name": "PUSH",
											"source": 8,
											"value": "45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77"
										},
										{
											"begin": 8549,
											"end": 8567,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 8549,
											"end": 8567,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 8549,
											"end": 8567,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8542,
											"end": 8604,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "207A65726F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8620,
											"end": 8638,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 8620,
											"end": 8638,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 8620,
											"end": 8638,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8613,
											"end": 8648,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 8665,
											"end": 8684,
											"name": "PUSH",
											"source": 8,
											"value": "84"
										},
										{
											"begin": 8665,
											"end": 8684,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "143"
										},
										{
											"begin": 8289,
											"end": 8690,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "tag",
											"source": 2,
											"value": "208"
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7259,
											"end": 7319,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "134"
										},
										{
											"begin": 7268,
											"end": 7273,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7275,
											"end": 7282,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 7303,
											"end": 7318,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 7284,
											"end": 7300,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 7284,
											"end": 7318,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 7259,
											"end": 7267,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "128"
										},
										{
											"begin": 7259,
											"end": 7319,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "tag",
											"source": 2,
											"value": "98"
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4145,
											"end": 4149,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 4199,
											"end": 4227,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "127"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4216,
											"end": 4218,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 4220,
											"end": 4226,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 4199,
											"end": 4208,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "135"
										},
										{
											"begin": 4199,
											"end": 4227,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "tag",
											"source": 2,
											"value": "106"
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4428,
											"end": 4446,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4428,
											"end": 4446,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 4428,
											"end": 4446,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 4402,
											"end": 4409,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4428,
											"end": 4446,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4428,
											"end": 4446,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4428,
											"end": 4446,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4428,
											"end": 4439,
											"name": "PUSH",
											"source": 2,
											"value": "34"
										},
										{
											"begin": 4428,
											"end": 4446,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 4428,
											"end": 4446,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4428,
											"end": 4446,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4428,
											"end": 4446,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4428,
											"end": 4446,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4428,
											"end": 4446,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4428,
											"end": 4446,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 4428,
											"end": 4446,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 4428,
											"end": 4455,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 4428,
											"end": 4455,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4428,
											"end": 4455,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 4428,
											"end": 4455,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 4428,
											"end": 4455,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 4428,
											"end": 4455,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4428,
											"end": 4455,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4428,
											"end": 4455,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4428,
											"end": 4455,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4428,
											"end": 4455,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4428,
											"end": 4455,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 4428,
											"end": 4455,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 4428,
											"end": 4455,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 2321,
											"end": 2519,
											"name": "tag",
											"source": 0,
											"value": "110"
										},
										{
											"begin": 2321,
											"end": 2519,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1334,
											"end": 1347,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "218"
										},
										{
											"begin": 1334,
											"end": 1345,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "182"
										},
										{
											"begin": 1334,
											"end": 1347,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1334,
											"end": 1347,
											"name": "tag",
											"source": 0,
											"value": "218"
										},
										{
											"begin": 1334,
											"end": 1347,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2409,
											"end": 2431,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2409,
											"end": 2431,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2401,
											"end": 2474,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "220"
										},
										{
											"begin": 2401,
											"end": 2474,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2401,
											"end": 2474,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2401,
											"end": 2474,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2401,
											"end": 2474,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2401,
											"end": 2474,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 8897,
											"end": 8899,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 2401,
											"end": 2474,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2401,
											"end": 2474,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2401,
											"end": 2474,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 8879,
											"end": 8900,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 8936,
											"end": 8938,
											"name": "PUSH",
											"source": 8,
											"value": "26"
										},
										{
											"begin": 8916,
											"end": 8934,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 8916,
											"end": 8934,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 8916,
											"end": 8934,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8909,
											"end": 8939,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 8975,
											"end": 9009,
											"name": "PUSH",
											"source": 8,
											"value": "4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061"
										},
										{
											"begin": 8955,
											"end": 8973,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 8955,
											"end": 8973,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 8955,
											"end": 8973,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8948,
											"end": 9010,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "646472657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9026,
											"end": 9044,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 9026,
											"end": 9044,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 9026,
											"end": 9044,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9019,
											"end": 9055,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 9072,
											"end": 9091,
											"name": "PUSH",
											"source": 8,
											"value": "84"
										},
										{
											"begin": 9072,
											"end": 9091,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2401,
											"end": 2474,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "143"
										},
										{
											"begin": 8695,
											"end": 9097,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2401,
											"end": 2474,
											"name": "tag",
											"source": 0,
											"value": "220"
										},
										{
											"begin": 2401,
											"end": 2474,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2484,
											"end": 2512,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "204"
										},
										{
											"begin": 2503,
											"end": 2511,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2484,
											"end": 2502,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "185"
										},
										{
											"begin": 2484,
											"end": 2512,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 10447,
											"end": 10817,
											"name": "tag",
											"source": 2,
											"value": "128"
										},
										{
											"begin": 10447,
											"end": 10817,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10578,
											"end": 10597,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 10578,
											"end": 10597,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 10570,
											"end": 10638,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "226"
										},
										{
											"begin": 10570,
											"end": 10638,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 10570,
											"end": 10638,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 10570,
											"end": 10638,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10570,
											"end": 10638,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10570,
											"end": 10638,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9304,
											"end": 9306,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 10570,
											"end": 10638,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 10570,
											"end": 10638,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 10570,
											"end": 10638,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9286,
											"end": 9307,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 9343,
											"end": 9345,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 9323,
											"end": 9341,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 9323,
											"end": 9341,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 9323,
											"end": 9341,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9316,
											"end": 9346,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 9382,
											"end": 9416,
											"name": "PUSH",
											"source": 8,
											"value": "45524332303A20617070726F76652066726F6D20746865207A65726F20616464"
										},
										{
											"begin": 9362,
											"end": 9380,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 9362,
											"end": 9380,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 9362,
											"end": 9380,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9355,
											"end": 9417,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "72657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9433,
											"end": 9451,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 9433,
											"end": 9451,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 9433,
											"end": 9451,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9426,
											"end": 9460,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 9477,
											"end": 9496,
											"name": "PUSH",
											"source": 8,
											"value": "84"
										},
										{
											"begin": 9477,
											"end": 9496,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 10570,
											"end": 10638,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "143"
										},
										{
											"begin": 9102,
											"end": 9502,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 10570,
											"end": 10638,
											"name": "tag",
											"source": 2,
											"value": "226"
										},
										{
											"begin": 10570,
											"end": 10638,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10656,
											"end": 10677,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 10656,
											"end": 10677,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 10648,
											"end": 10716,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "229"
										},
										{
											"begin": 10648,
											"end": 10716,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 10648,
											"end": 10716,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 10648,
											"end": 10716,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10648,
											"end": 10716,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10648,
											"end": 10716,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9709,
											"end": 9711,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 10648,
											"end": 10716,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 10648,
											"end": 10716,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 10648,
											"end": 10716,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9691,
											"end": 9712,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 9748,
											"end": 9750,
											"name": "PUSH",
											"source": 8,
											"value": "22"
										},
										{
											"begin": 9728,
											"end": 9746,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 9728,
											"end": 9746,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 9728,
											"end": 9746,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9721,
											"end": 9751,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 9787,
											"end": 9821,
											"name": "PUSH",
											"source": 8,
											"value": "45524332303A20617070726F766520746F20746865207A65726F206164647265"
										},
										{
											"begin": 9767,
											"end": 9785,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 9767,
											"end": 9785,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 9767,
											"end": 9785,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9760,
											"end": 9822,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "7373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9838,
											"end": 9856,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 9838,
											"end": 9856,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 9838,
											"end": 9856,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9831,
											"end": 9863,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 9880,
											"end": 9899,
											"name": "PUSH",
											"source": 8,
											"value": "84"
										},
										{
											"begin": 9880,
											"end": 9899,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 10648,
											"end": 10716,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "143"
										},
										{
											"begin": 9507,
											"end": 9905,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 10648,
											"end": 10716,
											"name": "tag",
											"source": 2,
											"value": "229"
										},
										{
											"begin": 10648,
											"end": 10716,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10727,
											"end": 10745,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 10727,
											"end": 10745,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10727,
											"end": 10745,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 10727,
											"end": 10745,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10727,
											"end": 10745,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10727,
											"end": 10745,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10727,
											"end": 10745,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 10727,
											"end": 10738,
											"name": "PUSH",
											"source": 2,
											"value": "34"
										},
										{
											"begin": 10727,
											"end": 10745,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 10727,
											"end": 10745,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10727,
											"end": 10745,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10727,
											"end": 10745,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 10727,
											"end": 10745,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 10727,
											"end": 10745,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10727,
											"end": 10745,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 10727,
											"end": 10745,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 10727,
											"end": 10754,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 10727,
											"end": 10754,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 10727,
											"end": 10754,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 10727,
											"end": 10754,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10727,
											"end": 10754,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 10727,
											"end": 10754,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 10727,
											"end": 10754,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 10727,
											"end": 10754,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 10727,
											"end": 10754,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 10727,
											"end": 10754,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 10727,
											"end": 10754,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 10727,
											"end": 10754,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10727,
											"end": 10754,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 10727,
											"end": 10763,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 10727,
											"end": 10763,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10727,
											"end": 10763,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 10778,
											"end": 10810,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10778,
											"end": 10810,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1582,
											"end": 1607,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 1582,
											"end": 1607,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1582,
											"end": 1607,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 10778,
											"end": 10810,
											"name": "PUSH",
											"source": 2,
											"value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
										},
										{
											"begin": 10778,
											"end": 10810,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1555,
											"end": 1573,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 10778,
											"end": 10810,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 10778,
											"end": 10810,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 10778,
											"end": 10810,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10778,
											"end": 10810,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 10778,
											"end": 10810,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 10778,
											"end": 10810,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10778,
											"end": 10810,
											"name": "LOG3",
											"source": 2
										},
										{
											"begin": 10447,
											"end": 10817,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10447,
											"end": 10817,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10447,
											"end": 10817,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10447,
											"end": 10817,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 11098,
											"end": 11539,
											"name": "tag",
											"source": 2,
											"value": "133"
										},
										{
											"begin": 11098,
											"end": 11539,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11228,
											"end": 11252,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11255,
											"end": 11280,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "234"
										},
										{
											"begin": 11265,
											"end": 11270,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 11272,
											"end": 11279,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 11255,
											"end": 11264,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "106"
										},
										{
											"begin": 11255,
											"end": 11280,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 11255,
											"end": 11280,
											"name": "tag",
											"source": 2,
											"value": "234"
										},
										{
											"begin": 11255,
											"end": 11280,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11228,
											"end": 11280,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11228,
											"end": 11280,
											"name": "POP",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 11294,
											"end": 11310,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11294,
											"end": 11331,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 11290,
											"end": 11533,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "239"
										},
										{
											"begin": 11290,
											"end": 11533,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 11375,
											"end": 11381,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11355,
											"end": 11371,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11355,
											"end": 11381,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 11355,
											"end": 11381,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 11347,
											"end": 11415,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "236"
										},
										{
											"begin": 11347,
											"end": 11415,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 11347,
											"end": 11415,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 11347,
											"end": 11415,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11347,
											"end": 11415,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11347,
											"end": 11415,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 10112,
											"end": 10114,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 11347,
											"end": 11415,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 11347,
											"end": 11415,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 11347,
											"end": 11415,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 10094,
											"end": 10115,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 10151,
											"end": 10153,
											"name": "PUSH",
											"source": 8,
											"value": "1D"
										},
										{
											"begin": 10131,
											"end": 10149,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 10131,
											"end": 10149,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 10131,
											"end": 10149,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 10124,
											"end": 10154,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 10190,
											"end": 10221,
											"name": "PUSH",
											"source": 8,
											"value": "45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000"
										},
										{
											"begin": 10170,
											"end": 10188,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 10170,
											"end": 10188,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 10170,
											"end": 10188,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 10163,
											"end": 10222,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 10239,
											"end": 10257,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 10239,
											"end": 10257,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 11347,
											"end": 11415,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "143"
										},
										{
											"begin": 9910,
											"end": 10263,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 11347,
											"end": 11415,
											"name": "tag",
											"source": 2,
											"value": "236"
										},
										{
											"begin": 11347,
											"end": 11415,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11457,
											"end": 11508,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "239"
										},
										{
											"begin": 11466,
											"end": 11471,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 11473,
											"end": 11480,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 11501,
											"end": 11507,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 11482,
											"end": 11498,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 11482,
											"end": 11507,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 11457,
											"end": 11465,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "128"
										},
										{
											"begin": 11457,
											"end": 11508,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 11457,
											"end": 11508,
											"name": "tag",
											"source": 2,
											"value": "239"
										},
										{
											"begin": 11457,
											"end": 11508,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11218,
											"end": 11539,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11098,
											"end": 11539,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11098,
											"end": 11539,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11098,
											"end": 11539,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11098,
											"end": 11539,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 7812,
											"end": 8463,
											"name": "tag",
											"source": 2,
											"value": "135"
										},
										{
											"begin": 7812,
											"end": 8463,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7938,
											"end": 7956,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 7938,
											"end": 7956,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7930,
											"end": 7998,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "241"
										},
										{
											"begin": 7930,
											"end": 7998,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 7930,
											"end": 7998,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7930,
											"end": 7998,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7930,
											"end": 7998,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7930,
											"end": 7998,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 10470,
											"end": 10472,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 7930,
											"end": 7998,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 7930,
											"end": 7998,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7930,
											"end": 7998,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 10452,
											"end": 10473,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 10509,
											"end": 10511,
											"name": "PUSH",
											"source": 8,
											"value": "25"
										},
										{
											"begin": 10489,
											"end": 10507,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 10489,
											"end": 10507,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 10489,
											"end": 10507,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 10482,
											"end": 10512,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 10548,
											"end": 10582,
											"name": "PUSH",
											"source": 8,
											"value": "45524332303A207472616E736665722066726F6D20746865207A65726F206164"
										},
										{
											"begin": 10528,
											"end": 10546,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 10528,
											"end": 10546,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 10528,
											"end": 10546,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 10521,
											"end": 10583,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6472657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10599,
											"end": 10617,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 10599,
											"end": 10617,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 10599,
											"end": 10617,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 10592,
											"end": 10627,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 10644,
											"end": 10663,
											"name": "PUSH",
											"source": 8,
											"value": "84"
										},
										{
											"begin": 10644,
											"end": 10663,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7930,
											"end": 7998,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "143"
										},
										{
											"begin": 10268,
											"end": 10669,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 7930,
											"end": 7998,
											"name": "tag",
											"source": 2,
											"value": "241"
										},
										{
											"begin": 7930,
											"end": 7998,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8016,
											"end": 8032,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 8016,
											"end": 8032,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 8008,
											"end": 8072,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "244"
										},
										{
											"begin": 8008,
											"end": 8072,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 8008,
											"end": 8072,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 8008,
											"end": 8072,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8008,
											"end": 8072,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8008,
											"end": 8072,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 10876,
											"end": 10878,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 8008,
											"end": 8072,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 8008,
											"end": 8072,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 8008,
											"end": 8072,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 10858,
											"end": 10879,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 10915,
											"end": 10917,
											"name": "PUSH",
											"source": 8,
											"value": "23"
										},
										{
											"begin": 10895,
											"end": 10913,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 10895,
											"end": 10913,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 10895,
											"end": 10913,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 10888,
											"end": 10918,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 10954,
											"end": 10988,
											"name": "PUSH",
											"source": 8,
											"value": "45524332303A207472616E7366657220746F20746865207A65726F2061646472"
										},
										{
											"begin": 10934,
											"end": 10952,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 10934,
											"end": 10952,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 10934,
											"end": 10952,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 10927,
											"end": 10989,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11005,
											"end": 11023,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 11005,
											"end": 11023,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 11005,
											"end": 11023,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 10998,
											"end": 11031,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 11048,
											"end": 11067,
											"name": "PUSH",
											"source": 8,
											"value": "84"
										},
										{
											"begin": 11048,
											"end": 11067,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8008,
											"end": 8072,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "143"
										},
										{
											"begin": 10674,
											"end": 11073,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 8008,
											"end": 8072,
											"name": "tag",
											"source": 2,
											"value": "244"
										},
										{
											"begin": 8008,
											"end": 8072,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8154,
											"end": 8169,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 8154,
											"end": 8169,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 8132,
											"end": 8151,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 8154,
											"end": 8169,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8154,
											"end": 8169,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8154,
											"end": 8169,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8154,
											"end": 8163,
											"name": "PUSH",
											"source": 2,
											"value": "33"
										},
										{
											"begin": 8154,
											"end": 8169,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 8154,
											"end": 8169,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8154,
											"end": 8169,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 8154,
											"end": 8169,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8154,
											"end": 8169,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 8154,
											"end": 8169,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 8187,
											"end": 8208,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8187,
											"end": 8208,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8187,
											"end": 8208,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 8187,
											"end": 8208,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 8179,
											"end": 8251,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "249"
										},
										{
											"begin": 8179,
											"end": 8251,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 8179,
											"end": 8251,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 8179,
											"end": 8251,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8179,
											"end": 8251,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8179,
											"end": 8251,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 11280,
											"end": 11282,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 8179,
											"end": 8251,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 8179,
											"end": 8251,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 8179,
											"end": 8251,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 11262,
											"end": 11283,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 11319,
											"end": 11321,
											"name": "PUSH",
											"source": 8,
											"value": "26"
										},
										{
											"begin": 11299,
											"end": 11317,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 11299,
											"end": 11317,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 11299,
											"end": 11317,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 11292,
											"end": 11322,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 11358,
											"end": 11392,
											"name": "PUSH",
											"source": 8,
											"value": "45524332303A207472616E7366657220616D6F756E7420657863656564732062"
										},
										{
											"begin": 11338,
											"end": 11356,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 11338,
											"end": 11356,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 11338,
											"end": 11356,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 11331,
											"end": 11393,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "616C616E6365"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11409,
											"end": 11427,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 11409,
											"end": 11427,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 11409,
											"end": 11427,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 11402,
											"end": 11438,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 11455,
											"end": 11474,
											"name": "PUSH",
											"source": 8,
											"value": "84"
										},
										{
											"begin": 11455,
											"end": 11474,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8179,
											"end": 8251,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "143"
										},
										{
											"begin": 11078,
											"end": 11480,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 8179,
											"end": 8251,
											"name": "tag",
											"source": 2,
											"value": "249"
										},
										{
											"begin": 8179,
											"end": 8251,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8285,
											"end": 8300,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 8285,
											"end": 8300,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 8285,
											"end": 8300,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 8285,
											"end": 8300,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 8285,
											"end": 8300,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8285,
											"end": 8300,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8285,
											"end": 8300,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8285,
											"end": 8294,
											"name": "PUSH",
											"source": 2,
											"value": "33"
										},
										{
											"begin": 8285,
											"end": 8300,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 8285,
											"end": 8300,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8285,
											"end": 8300,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 8285,
											"end": 8300,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 8285,
											"end": 8300,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 8285,
											"end": 8300,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 8303,
											"end": 8323,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 8303,
											"end": 8323,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 8303,
											"end": 8323,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 8285,
											"end": 8323,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8285,
											"end": 8323,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 8343,
											"end": 8356,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 8343,
											"end": 8356,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 8343,
											"end": 8356,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 8343,
											"end": 8356,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8343,
											"end": 8356,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8343,
											"end": 8356,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8343,
											"end": 8356,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8343,
											"end": 8356,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 8343,
											"end": 8366,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 8343,
											"end": 8366,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 8317,
											"end": 8323,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 8317,
											"end": 8323,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 8285,
											"end": 8300,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8343,
											"end": 8366,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "252"
										},
										{
											"begin": 8343,
											"end": 8366,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8317,
											"end": 8323,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 8317,
											"end": 8323,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8343,
											"end": 8366,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "165"
										},
										{
											"begin": 8343,
											"end": 8366,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 8343,
											"end": 8366,
											"name": "tag",
											"source": 2,
											"value": "252"
										},
										{
											"begin": 8343,
											"end": 8366,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8343,
											"end": 8366,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 8343,
											"end": 8366,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 8343,
											"end": 8366,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 8343,
											"end": 8366,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8343,
											"end": 8366,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8343,
											"end": 8366,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 8343,
											"end": 8366,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 8397,
											"end": 8399,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8382,
											"end": 8408,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 8391,
											"end": 8395,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8382,
											"end": 8408,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 8382,
											"end": 8408,
											"name": "PUSH",
											"source": 2,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 8401,
											"end": 8407,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 8382,
											"end": 8408,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 8382,
											"end": 8408,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 8382,
											"end": 8408,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "253"
										},
										{
											"begin": 8382,
											"end": 8408,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1582,
											"end": 1607,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1582,
											"end": 1607,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1570,
											"end": 1572,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1555,
											"end": 1573,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1555,
											"end": 1573,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1436,
											"end": 1613,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 8382,
											"end": 8408,
											"name": "tag",
											"source": 2,
											"value": "253"
										},
										{
											"begin": 8382,
											"end": 8408,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8382,
											"end": 8408,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 8382,
											"end": 8408,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 8382,
											"end": 8408,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 8382,
											"end": 8408,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 8382,
											"end": 8408,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 8382,
											"end": 8408,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8382,
											"end": 8408,
											"name": "LOG3",
											"source": 2
										},
										{
											"begin": 8419,
											"end": 8456,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "239"
										},
										{
											"begin": 12123,
											"end": 12244,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1003,
											"end": 1098,
											"name": "tag",
											"source": 0,
											"value": "148"
										},
										{
											"begin": 1003,
											"end": 1098,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4910,
											"end": 4923,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4910,
											"end": 4923,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 4910,
											"end": 4923,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 4910,
											"end": 4923,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4910,
											"end": 4923,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 4910,
											"end": 4923,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 4910,
											"end": 4923,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4902,
											"end": 4971,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "258"
										},
										{
											"begin": 4902,
											"end": 4971,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 4902,
											"end": 4971,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 4902,
											"end": 4971,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4902,
											"end": 4971,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4902,
											"end": 4971,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 4902,
											"end": 4971,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 4902,
											"end": 4971,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4902,
											"end": 4971,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "143"
										},
										{
											"begin": 4902,
											"end": 4971,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4902,
											"end": 4971,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "260"
										},
										{
											"begin": 4902,
											"end": 4971,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 4902,
											"end": 4971,
											"name": "tag",
											"source": 1,
											"value": "258"
										},
										{
											"begin": 4902,
											"end": 4971,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1065,
											"end": 1091,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "184"
										},
										{
											"begin": 1065,
											"end": 1089,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "263"
										},
										{
											"begin": 1065,
											"end": 1091,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2116,
											"end": 2263,
											"name": "tag",
											"source": 2,
											"value": "150"
										},
										{
											"begin": 2116,
											"end": 2263,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4910,
											"end": 4923,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4910,
											"end": 4923,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 4910,
											"end": 4923,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 4910,
											"end": 4923,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4910,
											"end": 4923,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 4910,
											"end": 4923,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 4910,
											"end": 4923,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4902,
											"end": 4971,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "265"
										},
										{
											"begin": 4902,
											"end": 4971,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 4902,
											"end": 4971,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 4902,
											"end": 4971,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4902,
											"end": 4971,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4902,
											"end": 4971,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 4902,
											"end": 4971,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 4902,
											"end": 4971,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4902,
											"end": 4971,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "143"
										},
										{
											"begin": 4902,
											"end": 4971,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4902,
											"end": 4971,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "260"
										},
										{
											"begin": 4902,
											"end": 4971,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 4902,
											"end": 4971,
											"name": "tag",
											"source": 1,
											"value": "265"
										},
										{
											"begin": 4902,
											"end": 4971,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2218,
											"end": 2256,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "268"
										},
										{
											"begin": 2241,
											"end": 2246,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2248,
											"end": 2255,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2218,
											"end": 2240,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "269"
										},
										{
											"begin": 2218,
											"end": 2256,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2218,
											"end": 2256,
											"name": "tag",
											"source": 2,
											"value": "268"
										},
										{
											"begin": 2218,
											"end": 2256,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2116,
											"end": 2263,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2116,
											"end": 2263,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2116,
											"end": 2263,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 8739,
											"end": 9128,
											"name": "tag",
											"source": 2,
											"value": "155"
										},
										{
											"begin": 8739,
											"end": 9128,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8822,
											"end": 8843,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 8822,
											"end": 8843,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 8814,
											"end": 8879,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "271"
										},
										{
											"begin": 8814,
											"end": 8879,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 8814,
											"end": 8879,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 8814,
											"end": 8879,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8814,
											"end": 8879,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8814,
											"end": 8879,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12099,
											"end": 12101,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 8814,
											"end": 8879,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 8814,
											"end": 8879,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 8814,
											"end": 8879,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12081,
											"end": 12102,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 12138,
											"end": 12140,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 12118,
											"end": 12136,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 12118,
											"end": 12136,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 12118,
											"end": 12136,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 12111,
											"end": 12141,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 12177,
											"end": 12210,
											"name": "PUSH",
											"source": 8,
											"value": "45524332303A206D696E7420746F20746865207A65726F206164647265737300"
										},
										{
											"begin": 12157,
											"end": 12175,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 12157,
											"end": 12175,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 12157,
											"end": 12175,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 12150,
											"end": 12211,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 12228,
											"end": 12246,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 12228,
											"end": 12246,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8814,
											"end": 8879,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "143"
										},
										{
											"begin": 11897,
											"end": 12252,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 8814,
											"end": 8879,
											"name": "tag",
											"source": 2,
											"value": "271"
										},
										{
											"begin": 8814,
											"end": 8879,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8966,
											"end": 8972,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 8950,
											"end": 8962,
											"name": "PUSH",
											"source": 2,
											"value": "35"
										},
										{
											"begin": 8950,
											"end": 8962,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 8950,
											"end": 8972,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 8950,
											"end": 8972,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 8950,
											"end": 8972,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 8950,
											"end": 8972,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "275"
										},
										{
											"begin": 8950,
											"end": 8972,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 8950,
											"end": 8972,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8950,
											"end": 8972,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "165"
										},
										{
											"begin": 8950,
											"end": 8972,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 8950,
											"end": 8972,
											"name": "tag",
											"source": 2,
											"value": "275"
										},
										{
											"begin": 8950,
											"end": 8972,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8950,
											"end": 8972,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8950,
											"end": 8972,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 8950,
											"end": 8972,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8982,
											"end": 9000,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 8982,
											"end": 9000,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 8982,
											"end": 9000,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 8982,
											"end": 9000,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8982,
											"end": 9000,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8982,
											"end": 9000,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8982,
											"end": 8991,
											"name": "PUSH",
											"source": 2,
											"value": "33"
										},
										{
											"begin": 8982,
											"end": 9000,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 8982,
											"end": 9000,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8982,
											"end": 9000,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 8982,
											"end": 9000,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8982,
											"end": 9000,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 8982,
											"end": 9010,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 8982,
											"end": 9010,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 9004,
											"end": 9010,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 9004,
											"end": 9010,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 8982,
											"end": 9000,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8982,
											"end": 9010,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "276"
										},
										{
											"begin": 8982,
											"end": 9010,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9004,
											"end": 9010,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 9004,
											"end": 9010,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8982,
											"end": 9010,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "165"
										},
										{
											"begin": 8982,
											"end": 9010,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 8982,
											"end": 9010,
											"name": "tag",
											"source": 2,
											"value": "276"
										},
										{
											"begin": 8982,
											"end": 9010,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8982,
											"end": 9010,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8982,
											"end": 9010,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 8982,
											"end": 9010,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9025,
											"end": 9062,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 9025,
											"end": 9062,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1582,
											"end": 1607,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1582,
											"end": 1607,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1582,
											"end": 1607,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9025,
											"end": 9062,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 9025,
											"end": 9062,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 9025,
											"end": 9062,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9042,
											"end": 9043,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 9042,
											"end": 9043,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9025,
											"end": 9062,
											"name": "PUSH",
											"source": 2,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 9025,
											"end": 9062,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1570,
											"end": 1572,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1555,
											"end": 1573,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9025,
											"end": 9062,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 9025,
											"end": 9062,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 9025,
											"end": 9062,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 9025,
											"end": 9062,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 9025,
											"end": 9062,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 9025,
											"end": 9062,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9025,
											"end": 9062,
											"name": "LOG3",
											"source": 2
										},
										{
											"begin": 2116,
											"end": 2263,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2116,
											"end": 2263,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2116,
											"end": 2263,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 1268,
											"end": 1502,
											"name": "tag",
											"source": 7,
											"value": "178"
										},
										{
											"begin": 1268,
											"end": 1502,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1342,
											"end": 1357,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1369,
											"end": 1376,
											"name": "PUSH",
											"source": 7,
											"value": "9A"
										},
										{
											"begin": 1369,
											"end": 1376,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 1360,
											"end": 1366,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1360,
											"end": 1376,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "280"
										},
										{
											"begin": 1360,
											"end": 1376,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1360,
											"end": 1376,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1360,
											"end": 1376,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "281"
										},
										{
											"begin": 1360,
											"end": 1376,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1360,
											"end": 1376,
											"name": "tag",
											"source": 7,
											"value": "280"
										},
										{
											"begin": 1360,
											"end": 1376,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1342,
											"end": 1376,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1342,
											"end": 1376,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1387,
											"end": 1413,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "282"
										},
										{
											"begin": 1393,
											"end": 1403,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 1405,
											"end": 1412,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1387,
											"end": 1392,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "283"
										},
										{
											"begin": 1387,
											"end": 1413,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1387,
											"end": 1413,
											"name": "tag",
											"source": 7,
											"value": "282"
										},
										{
											"begin": 1387,
											"end": 1413,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1424,
											"end": 1438,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1441,
											"end": 1457,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "284"
										},
										{
											"begin": 1450,
											"end": 1457,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1441,
											"end": 1447,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 1441,
											"end": 1457,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "285"
										},
										{
											"begin": 1441,
											"end": 1457,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1441,
											"end": 1457,
											"name": "tag",
											"source": 7,
											"value": "284"
										},
										{
											"begin": 1441,
											"end": 1457,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1424,
											"end": 1457,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1424,
											"end": 1457,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1468,
											"end": 1494,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "286"
										},
										{
											"begin": 1483,
											"end": 1485,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 1487,
											"end": 1493,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1468,
											"end": 1482,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "98"
										},
										{
											"begin": 1468,
											"end": 1494,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1468,
											"end": 1494,
											"name": "tag",
											"source": 7,
											"value": "286"
										},
										{
											"begin": 1468,
											"end": 1494,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1468,
											"end": 1494,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1331,
											"end": 1502,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1331,
											"end": 1502,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1268,
											"end": 1502,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1268,
											"end": 1502,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1268,
											"end": 1502,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 1599,
											"end": 1729,
											"name": "tag",
											"source": 0,
											"value": "182"
										},
										{
											"begin": 1599,
											"end": 1729,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1513,
											"end": 1519,
											"name": "PUSH",
											"source": 0,
											"value": "65"
										},
										{
											"begin": 1513,
											"end": 1519,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1513,
											"end": 1519,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 1662,
											"end": 1685,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1654,
											"end": 1722,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "184"
										},
										{
											"begin": 1654,
											"end": 1722,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1654,
											"end": 1722,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1654,
											"end": 1722,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1654,
											"end": 1722,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1654,
											"end": 1722,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 12811,
											"end": 12813,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1654,
											"end": 1722,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1654,
											"end": 1722,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1654,
											"end": 1722,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 12793,
											"end": 12814,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 12793,
											"end": 12814,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 12793,
											"end": 12814,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 12830,
											"end": 12848,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 12830,
											"end": 12848,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 12830,
											"end": 12848,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 12823,
											"end": 12853,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 12889,
											"end": 12923,
											"name": "PUSH",
											"source": 8,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 12869,
											"end": 12887,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 12869,
											"end": 12887,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 12869,
											"end": 12887,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 12862,
											"end": 12924,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 12941,
											"end": 12959,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 12941,
											"end": 12959,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1654,
											"end": 1722,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "143"
										},
										{
											"begin": 12609,
											"end": 12965,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2673,
											"end": 2860,
											"name": "tag",
											"source": 0,
											"value": "185"
										},
										{
											"begin": 2673,
											"end": 2860,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2765,
											"end": 2771,
											"name": "PUSH",
											"source": 0,
											"value": "65"
										},
										{
											"begin": 2765,
											"end": 2771,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2765,
											"end": 2771,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2781,
											"end": 2798,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2781,
											"end": 2798,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2781,
											"end": 2798,
											"name": "AND",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2781,
											"end": 2798,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2781,
											"end": 2798,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2781,
											"end": 2798,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2781,
											"end": 2798,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 2781,
											"end": 2798,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2781,
											"end": 2798,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 2781,
											"end": 2798,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 2813,
											"end": 2853,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2813,
											"end": 2853,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2765,
											"end": 2771,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2765,
											"end": 2771,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2765,
											"end": 2771,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2781,
											"end": 2798,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2765,
											"end": 2771,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2765,
											"end": 2771,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2813,
											"end": 2853,
											"name": "PUSH",
											"source": 0,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 2813,
											"end": 2853,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2746,
											"end": 2762,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2746,
											"end": 2762,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2813,
											"end": 2853,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 2736,
											"end": 2860,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2673,
											"end": 2860,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2673,
											"end": 2860,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 1976,
											"end": 2217,
											"name": "tag",
											"source": 7,
											"value": "199"
										},
										{
											"begin": 1976,
											"end": 2217,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2128,
											"end": 2136,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2123,
											"end": 2210,
											"name": "tag",
											"source": 7,
											"value": "295"
										},
										{
											"begin": 2123,
											"end": 2210,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2146,
											"end": 2149,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 2146,
											"end": 2156,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 2142,
											"end": 2143,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2142,
											"end": 2156,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2142,
											"end": 2156,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 2142,
											"end": 2156,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 2123,
											"end": 2210,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 2123,
											"end": 2210,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "239"
										},
										{
											"begin": 2123,
											"end": 2210,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 2192,
											"end": 2198,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2178,
											"end": 2181,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2178,
											"end": 2189,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2182,
											"end": 2185,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 2186,
											"end": 2187,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 2182,
											"end": 2188,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2182,
											"end": 2188,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 2182,
											"end": 2188,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2182,
											"end": 2188,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 2182,
											"end": 2188,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2182,
											"end": 2188,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 2182,
											"end": 2188,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "299"
										},
										{
											"begin": 2182,
											"end": 2188,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 2182,
											"end": 2188,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "299"
										},
										{
											"begin": 2182,
											"end": 2188,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "300"
										},
										{
											"begin": 2182,
											"end": 2188,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2182,
											"end": 2188,
											"name": "tag",
											"source": 7,
											"value": "299"
										},
										{
											"begin": 2182,
											"end": 2188,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2182,
											"end": 2188,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2182,
											"end": 2188,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2182,
											"end": 2188,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2182,
											"end": 2188,
											"name": "MUL",
											"source": 7
										},
										{
											"begin": 2182,
											"end": 2188,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2182,
											"end": 2188,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2182,
											"end": 2188,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2182,
											"end": 2188,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2182,
											"end": 2188,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2182,
											"end": 2188,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2182,
											"end": 2188,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2178,
											"end": 2189,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 2178,
											"end": 2189,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2178,
											"end": 2189,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2178,
											"end": 2189,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2178,
											"end": 2189,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2178,
											"end": 2189,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2178,
											"end": 2189,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2178,
											"end": 2189,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2178,
											"end": 2189,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2178,
											"end": 2189,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2178,
											"end": 2189,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 2178,
											"end": 2189,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 2178,
											"end": 2198,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2178,
											"end": 2198,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2178,
											"end": 2198,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 2178,
											"end": 2198,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2178,
											"end": 2198,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 2178,
											"end": 2198,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 2178,
											"end": 2198,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2178,
											"end": 2198,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2178,
											"end": 2198,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2178,
											"end": 2198,
											"name": "OR",
											"source": 7
										},
										{
											"begin": 2178,
											"end": 2198,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2178,
											"end": 2198,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 2158,
											"end": 2161,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2158,
											"end": 2161,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "301"
										},
										{
											"begin": 2158,
											"end": 2161,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2158,
											"end": 2161,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "302"
										},
										{
											"begin": 2158,
											"end": 2161,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2158,
											"end": 2161,
											"name": "tag",
											"source": 7,
											"value": "301"
										},
										{
											"begin": 2158,
											"end": 2161,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2158,
											"end": 2161,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2158,
											"end": 2161,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2158,
											"end": 2161,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2123,
											"end": 2210,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "295"
										},
										{
											"begin": 2123,
											"end": 2210,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 12123,
											"end": 12244,
											"name": "tag",
											"source": 2,
											"value": "248"
										},
										{
											"begin": 12123,
											"end": 12244,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 12123,
											"end": 12244,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 12123,
											"end": 12244,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 12123,
											"end": 12244,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 12123,
											"end": 12244,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 1104,
											"end": 1215,
											"name": "tag",
											"source": 0,
											"value": "263"
										},
										{
											"begin": 1104,
											"end": 1215,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4910,
											"end": 4923,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4910,
											"end": 4923,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 4910,
											"end": 4923,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 4910,
											"end": 4923,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4910,
											"end": 4923,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 4910,
											"end": 4923,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 4910,
											"end": 4923,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4902,
											"end": 4971,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "306"
										},
										{
											"begin": 4902,
											"end": 4971,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 4902,
											"end": 4971,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 4902,
											"end": 4971,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4902,
											"end": 4971,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4902,
											"end": 4971,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 4902,
											"end": 4971,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 4902,
											"end": 4971,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4902,
											"end": 4971,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "143"
										},
										{
											"begin": 4902,
											"end": 4971,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4902,
											"end": 4971,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "260"
										},
										{
											"begin": 4902,
											"end": 4971,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 4902,
											"end": 4971,
											"name": "tag",
											"source": 1,
											"value": "306"
										},
										{
											"begin": 4902,
											"end": 4971,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1176,
											"end": 1208,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "184"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 1176,
											"end": 1194,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "185"
										},
										{
											"begin": 1176,
											"end": 1208,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2269,
											"end": 2428,
											"name": "tag",
											"source": 2,
											"value": "269"
										},
										{
											"begin": 2269,
											"end": 2428,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4910,
											"end": 4923,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4910,
											"end": 4923,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 4910,
											"end": 4923,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 4910,
											"end": 4923,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4910,
											"end": 4923,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 4910,
											"end": 4923,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 4910,
											"end": 4923,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4902,
											"end": 4971,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "312"
										},
										{
											"begin": 4902,
											"end": 4971,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 4902,
											"end": 4971,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 4902,
											"end": 4971,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4902,
											"end": 4971,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4902,
											"end": 4971,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 4902,
											"end": 4971,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 4902,
											"end": 4971,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4902,
											"end": 4971,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "143"
										},
										{
											"begin": 4902,
											"end": 4971,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4902,
											"end": 4971,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "260"
										},
										{
											"begin": 4902,
											"end": 4971,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 4902,
											"end": 4971,
											"name": "tag",
											"source": 1,
											"value": "312"
										},
										{
											"begin": 4902,
											"end": 4971,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2381,
											"end": 2394,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2381,
											"end": 2394,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2381,
											"end": 2394,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "315"
										},
										{
											"begin": 2381,
											"end": 2394,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2381,
											"end": 2386,
											"name": "PUSH",
											"source": 2,
											"value": "36"
										},
										{
											"begin": 2381,
											"end": 2386,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2381,
											"end": 2394,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2381,
											"end": 2394,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 2381,
											"end": 2394,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2381,
											"end": 2394,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2381,
											"end": 2394,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "152"
										},
										{
											"begin": 2381,
											"end": 2394,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2381,
											"end": 2394,
											"name": "tag",
											"source": 2,
											"value": "315"
										},
										{
											"begin": 2381,
											"end": 2394,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2404,
											"end": 2421,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2404,
											"end": 2421,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2404,
											"end": 2421,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "248"
										},
										{
											"begin": 2404,
											"end": 2421,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2404,
											"end": 2411,
											"name": "PUSH",
											"source": 2,
											"value": "37"
										},
										{
											"begin": 2404,
											"end": 2411,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2404,
											"end": 2421,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2404,
											"end": 2421,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 2404,
											"end": 2421,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2404,
											"end": 2421,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2404,
											"end": 2421,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "152"
										},
										{
											"begin": 2404,
											"end": 2421,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 9448,
											"end": 10024,
											"name": "tag",
											"source": 2,
											"value": "283"
										},
										{
											"begin": 9448,
											"end": 10024,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9531,
											"end": 9552,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 9531,
											"end": 9552,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 9523,
											"end": 9590,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "318"
										},
										{
											"begin": 9523,
											"end": 9590,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 9523,
											"end": 9590,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 9523,
											"end": 9590,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9523,
											"end": 9590,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9523,
											"end": 9590,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 13518,
											"end": 13520,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 9523,
											"end": 9590,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 9523,
											"end": 9590,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 9523,
											"end": 9590,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 13500,
											"end": 13521,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 13557,
											"end": 13559,
											"name": "PUSH",
											"source": 8,
											"value": "21"
										},
										{
											"begin": 13537,
											"end": 13555,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 13537,
											"end": 13555,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 13537,
											"end": 13555,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 13530,
											"end": 13560,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 13596,
											"end": 13630,
											"name": "PUSH",
											"source": 8,
											"value": "45524332303A206275726E2066726F6D20746865207A65726F20616464726573"
										},
										{
											"begin": 13576,
											"end": 13594,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 13576,
											"end": 13594,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 13576,
											"end": 13594,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 13569,
											"end": 13631,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "73"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 13647,
											"end": 13665,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 13647,
											"end": 13665,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 13647,
											"end": 13665,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 13640,
											"end": 13671,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 13688,
											"end": 13707,
											"name": "PUSH",
											"source": 8,
											"value": "84"
										},
										{
											"begin": 13688,
											"end": 13707,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9523,
											"end": 9590,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "143"
										},
										{
											"begin": 13316,
											"end": 13713,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 9523,
											"end": 9590,
											"name": "tag",
											"source": 2,
											"value": "318"
										},
										{
											"begin": 9523,
											"end": 9590,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9686,
											"end": 9704,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 9686,
											"end": 9704,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 9661,
											"end": 9683,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 9686,
											"end": 9704,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9686,
											"end": 9704,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9686,
											"end": 9704,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9686,
											"end": 9695,
											"name": "PUSH",
											"source": 2,
											"value": "33"
										},
										{
											"begin": 9686,
											"end": 9704,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 9686,
											"end": 9704,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9686,
											"end": 9704,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 9686,
											"end": 9704,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9686,
											"end": 9704,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 9686,
											"end": 9704,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 9722,
											"end": 9746,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9722,
											"end": 9746,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9722,
											"end": 9746,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 9722,
											"end": 9746,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 9714,
											"end": 9785,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "322"
										},
										{
											"begin": 9714,
											"end": 9785,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 9714,
											"end": 9785,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 9714,
											"end": 9785,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9714,
											"end": 9785,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9714,
											"end": 9785,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 13920,
											"end": 13922,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 9714,
											"end": 9785,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 9714,
											"end": 9785,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 9714,
											"end": 9785,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 13902,
											"end": 13923,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 13959,
											"end": 13961,
											"name": "PUSH",
											"source": 8,
											"value": "22"
										},
										{
											"begin": 13939,
											"end": 13957,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 13939,
											"end": 13957,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 13939,
											"end": 13957,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 13932,
											"end": 13962,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 13998,
											"end": 14032,
											"name": "PUSH",
											"source": 8,
											"value": "45524332303A206275726E20616D6F756E7420657863656564732062616C616E"
										},
										{
											"begin": 13978,
											"end": 13996,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 13978,
											"end": 13996,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 13978,
											"end": 13996,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 13971,
											"end": 14033,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6365"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 14049,
											"end": 14067,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 14049,
											"end": 14067,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 14049,
											"end": 14067,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 14042,
											"end": 14074,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 14091,
											"end": 14110,
											"name": "PUSH",
											"source": 8,
											"value": "84"
										},
										{
											"begin": 14091,
											"end": 14110,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9714,
											"end": 9785,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "143"
										},
										{
											"begin": 13718,
											"end": 14116,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 9714,
											"end": 9785,
											"name": "tag",
											"source": 2,
											"value": "322"
										},
										{
											"begin": 9714,
											"end": 9785,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9819,
											"end": 9837,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 9819,
											"end": 9837,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 9819,
											"end": 9837,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 9819,
											"end": 9837,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9819,
											"end": 9837,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9819,
											"end": 9837,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9819,
											"end": 9828,
											"name": "PUSH",
											"source": 2,
											"value": "33"
										},
										{
											"begin": 9819,
											"end": 9837,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 9819,
											"end": 9837,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9819,
											"end": 9837,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 9819,
											"end": 9837,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9819,
											"end": 9837,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 9840,
											"end": 9863,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 9840,
											"end": 9863,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 9840,
											"end": 9863,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 9819,
											"end": 9863,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9819,
											"end": 9863,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 9883,
											"end": 9895,
											"name": "PUSH",
											"source": 2,
											"value": "35"
										},
										{
											"begin": 9883,
											"end": 9905,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 9883,
											"end": 9905,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 9857,
											"end": 9863,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 9857,
											"end": 9863,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 9819,
											"end": 9837,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9883,
											"end": 9905,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "325"
										},
										{
											"begin": 9883,
											"end": 9905,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9857,
											"end": 9863,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 9857,
											"end": 9863,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9883,
											"end": 9905,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "285"
										},
										{
											"begin": 9883,
											"end": 9905,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 9883,
											"end": 9905,
											"name": "tag",
											"source": 2,
											"value": "325"
										},
										{
											"begin": 9883,
											"end": 9905,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 9883,
											"end": 9905,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9883,
											"end": 9905,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 9883,
											"end": 9905,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9921,
											"end": 9958,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 9921,
											"end": 9958,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1582,
											"end": 1607,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1582,
											"end": 1607,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1582,
											"end": 1607,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 9947,
											"end": 9948,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 9947,
											"end": 9948,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9921,
											"end": 9958,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 9921,
											"end": 9958,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 9921,
											"end": 9958,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9921,
											"end": 9958,
											"name": "PUSH",
											"source": 2,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 9921,
											"end": 9958,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1570,
											"end": 1572,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1555,
											"end": 1573,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9921,
											"end": 9958,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 9921,
											"end": 9958,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 9921,
											"end": 9958,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 9921,
											"end": 9958,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 9921,
											"end": 9958,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 9921,
											"end": 9958,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9921,
											"end": 9958,
											"name": "LOG3",
											"source": 2
										},
										{
											"begin": 12123,
											"end": 12244,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 12123,
											"end": 12244,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 12123,
											"end": 12244,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 12123,
											"end": 12244,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "152"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "328"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "118"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1,
											"value": "[in]"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "328"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "KECCAK256",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DIV",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "330"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPI",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP6",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "333"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "330"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "LT",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "331"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPI",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "AND",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "OR",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP6",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "333"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "331"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP6",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ISZERO",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "333"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPI",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "332"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "GT",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ISZERO",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "333"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPI",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "332"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "333"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "334"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "335"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1,
											"value": "[in]"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "334"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1,
											"value": "[out]"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "201"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "KECCAK256",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "204"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "335"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1,
											"value": "[in]"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "203"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "KECCAK256",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ISZERO",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "333"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPI",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MUL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "339"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "GT",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ISZERO",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "333"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPI",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "AND",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "AND",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "OR",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "339"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "335"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "342"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "GT",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ISZERO",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "334"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPI",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "342"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1
										},
										{
											"begin": 14,
											"end": 611,
											"name": "tag",
											"source": 8,
											"value": "31"
										},
										{
											"begin": 14,
											"end": 611,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 126,
											"end": 130,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 155,
											"end": 157,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 184,
											"end": 186,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 173,
											"end": 182,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 166,
											"end": 187,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 216,
											"end": 222,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 210,
											"end": 223,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 259,
											"end": 265,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 254,
											"end": 256,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 243,
											"end": 252,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 239,
											"end": 257,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 232,
											"end": 266,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 284,
											"end": 285,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 294,
											"end": 434,
											"name": "tag",
											"source": 8,
											"value": "351"
										},
										{
											"begin": 294,
											"end": 434,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 308,
											"end": 314,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 305,
											"end": 306,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 302,
											"end": 315,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 294,
											"end": 434,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 294,
											"end": 434,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "353"
										},
										{
											"begin": 294,
											"end": 434,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 403,
											"end": 417,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 403,
											"end": 417,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 403,
											"end": 417,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 399,
											"end": 422,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 399,
											"end": 422,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 393,
											"end": 423,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 369,
											"end": 386,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 369,
											"end": 386,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 369,
											"end": 386,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 388,
											"end": 390,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 365,
											"end": 391,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 358,
											"end": 424,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 323,
											"end": 333,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 323,
											"end": 333,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 294,
											"end": 434,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "351"
										},
										{
											"begin": 294,
											"end": 434,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 294,
											"end": 434,
											"name": "tag",
											"source": 8,
											"value": "353"
										},
										{
											"begin": 294,
											"end": 434,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 452,
											"end": 458,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 449,
											"end": 450,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 446,
											"end": 459,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 443,
											"end": 534,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 443,
											"end": 534,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "354"
										},
										{
											"begin": 443,
											"end": 534,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 522,
											"end": 523,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 517,
											"end": 519,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 508,
											"end": 514,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 497,
											"end": 506,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 493,
											"end": 515,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 489,
											"end": 520,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 482,
											"end": 524,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 443,
											"end": 534,
											"name": "tag",
											"source": 8,
											"value": "354"
										},
										{
											"begin": 443,
											"end": 534,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 595,
											"end": 597,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 574,
											"end": 589,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 570,
											"end": 599,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 555,
											"end": 600,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 555,
											"end": 600,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 555,
											"end": 600,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 555,
											"end": 600,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 602,
											"end": 604,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 551,
											"end": 605,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 551,
											"end": 605,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 14,
											"end": 611,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 14,
											"end": 611,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 616,
											"end": 789,
											"name": "tag",
											"source": 8,
											"value": "344"
										},
										{
											"begin": 616,
											"end": 789,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 684,
											"end": 704,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 684,
											"end": 704,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 733,
											"end": 764,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 733,
											"end": 764,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 723,
											"end": 765,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 723,
											"end": 765,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 713,
											"end": 783,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "356"
										},
										{
											"begin": 713,
											"end": 783,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 779,
											"end": 780,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 776,
											"end": 777,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 769,
											"end": 781,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 713,
											"end": 783,
											"name": "tag",
											"source": 8,
											"value": "356"
										},
										{
											"begin": 713,
											"end": 783,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 616,
											"end": 789,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 616,
											"end": 789,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 616,
											"end": 789,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 616,
											"end": 789,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 794,
											"end": 980,
											"name": "tag",
											"source": 8,
											"value": "34"
										},
										{
											"begin": 794,
											"end": 980,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 853,
											"end": 859,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 906,
											"end": 908,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 894,
											"end": 903,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 885,
											"end": 892,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 881,
											"end": 904,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 877,
											"end": 909,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 874,
											"end": 926,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 874,
											"end": 926,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "358"
										},
										{
											"begin": 874,
											"end": 926,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 922,
											"end": 923,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 919,
											"end": 920,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 912,
											"end": 924,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 874,
											"end": 926,
											"name": "tag",
											"source": 8,
											"value": "358"
										},
										{
											"begin": 874,
											"end": 926,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 945,
											"end": 974,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "359"
										},
										{
											"begin": 964,
											"end": 973,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 945,
											"end": 974,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "344"
										},
										{
											"begin": 945,
											"end": 974,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 945,
											"end": 974,
											"name": "tag",
											"source": 8,
											"value": "359"
										},
										{
											"begin": 945,
											"end": 974,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 935,
											"end": 974,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 794,
											"end": 980,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 794,
											"end": 980,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 1177,
											"end": 1431,
											"name": "tag",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1177,
											"end": 1431,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1245,
											"end": 1251,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1253,
											"end": 1259,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1306,
											"end": 1308,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1294,
											"end": 1303,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1285,
											"end": 1292,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 1281,
											"end": 1304,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 1277,
											"end": 1309,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 1274,
											"end": 1326,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1274,
											"end": 1326,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "362"
										},
										{
											"begin": 1274,
											"end": 1326,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1322,
											"end": 1323,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1319,
											"end": 1320,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1312,
											"end": 1324,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 1274,
											"end": 1326,
											"name": "tag",
											"source": 8,
											"value": "362"
										},
										{
											"begin": 1274,
											"end": 1326,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1345,
											"end": 1374,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "363"
										},
										{
											"begin": 1364,
											"end": 1373,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1345,
											"end": 1374,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "344"
										},
										{
											"begin": 1345,
											"end": 1374,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 1345,
											"end": 1374,
											"name": "tag",
											"source": 8,
											"value": "363"
										},
										{
											"begin": 1345,
											"end": 1374,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1335,
											"end": 1374,
											"name": "SWAP5",
											"source": 8
										},
										{
											"begin": 1421,
											"end": 1423,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1406,
											"end": 1424,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 1406,
											"end": 1424,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1406,
											"end": 1424,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 1406,
											"end": 1424,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1393,
											"end": 1425,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 1393,
											"end": 1425,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1177,
											"end": 1431,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 1618,
											"end": 1946,
											"name": "tag",
											"source": 8,
											"value": "49"
										},
										{
											"begin": 1618,
											"end": 1946,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1695,
											"end": 1701,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1703,
											"end": 1709,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1711,
											"end": 1717,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1764,
											"end": 1766,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 1752,
											"end": 1761,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 1743,
											"end": 1750,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 1739,
											"end": 1762,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 1735,
											"end": 1767,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 1732,
											"end": 1784,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1732,
											"end": 1784,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "366"
										},
										{
											"begin": 1732,
											"end": 1784,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1780,
											"end": 1781,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1777,
											"end": 1778,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1770,
											"end": 1782,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 1732,
											"end": 1784,
											"name": "tag",
											"source": 8,
											"value": "366"
										},
										{
											"begin": 1732,
											"end": 1784,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1803,
											"end": 1832,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "367"
										},
										{
											"begin": 1822,
											"end": 1831,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 1803,
											"end": 1832,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "344"
										},
										{
											"begin": 1803,
											"end": 1832,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 1803,
											"end": 1832,
											"name": "tag",
											"source": 8,
											"value": "367"
										},
										{
											"begin": 1803,
											"end": 1832,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1793,
											"end": 1832,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 1793,
											"end": 1832,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1851,
											"end": 1889,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "368"
										},
										{
											"begin": 1885,
											"end": 1887,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1874,
											"end": 1883,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 1870,
											"end": 1888,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1851,
											"end": 1889,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "344"
										},
										{
											"begin": 1851,
											"end": 1889,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 1851,
											"end": 1889,
											"name": "tag",
											"source": 8,
											"value": "368"
										},
										{
											"begin": 1851,
											"end": 1889,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1841,
											"end": 1889,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1841,
											"end": 1889,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1936,
											"end": 1938,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1925,
											"end": 1934,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 1921,
											"end": 1939,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1908,
											"end": 1940,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 1898,
											"end": 1940,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1898,
											"end": 1940,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1618,
											"end": 1946,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 1618,
											"end": 1946,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1618,
											"end": 1946,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 1618,
											"end": 1946,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1618,
											"end": 1946,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 1618,
											"end": 1946,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 1951,
											"end": 2078,
											"name": "tag",
											"source": 8,
											"value": "345"
										},
										{
											"begin": 1951,
											"end": 2078,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2012,
											"end": 2022,
											"name": "PUSH",
											"source": 8,
											"value": "4E487B71"
										},
										{
											"begin": 2007,
											"end": 2010,
											"name": "PUSH",
											"source": 8,
											"value": "E0"
										},
										{
											"begin": 2003,
											"end": 2023,
											"name": "SHL",
											"source": 8
										},
										{
											"begin": 2000,
											"end": 2001,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1993,
											"end": 2024,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2043,
											"end": 2047,
											"name": "PUSH",
											"source": 8,
											"value": "41"
										},
										{
											"begin": 2040,
											"end": 2041,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 2033,
											"end": 2048,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2067,
											"end": 2071,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 2064,
											"end": 2065,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2057,
											"end": 2072,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 2083,
											"end": 2358,
											"name": "tag",
											"source": 8,
											"value": "346"
										},
										{
											"begin": 2083,
											"end": 2358,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2154,
											"end": 2156,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 2148,
											"end": 2157,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 2219,
											"end": 2221,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 2200,
											"end": 2213,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2200,
											"end": 2213,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2196,
											"end": 2223,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 2184,
											"end": 2224,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2184,
											"end": 2224,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2254,
											"end": 2272,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2239,
											"end": 2273,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2239,
											"end": 2273,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 2275,
											"end": 2297,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2275,
											"end": 2297,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2275,
											"end": 2297,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 2236,
											"end": 2298,
											"name": "OR",
											"source": 8
										},
										{
											"begin": 2233,
											"end": 2321,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 2233,
											"end": 2321,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "372"
										},
										{
											"begin": 2233,
											"end": 2321,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 2301,
											"end": 2319,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "372"
										},
										{
											"begin": 2301,
											"end": 2319,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "345"
										},
										{
											"begin": 2301,
											"end": 2319,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 2301,
											"end": 2319,
											"name": "tag",
											"source": 8,
											"value": "372"
										},
										{
											"begin": 2301,
											"end": 2319,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2337,
											"end": 2339,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 2330,
											"end": 2352,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2083,
											"end": 2358,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 2083,
											"end": 2358,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2083,
											"end": 2358,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 2363,
											"end": 2894,
											"name": "tag",
											"source": 8,
											"value": "347"
										},
										{
											"begin": 2363,
											"end": 2894,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2406,
											"end": 2411,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2459,
											"end": 2462,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2452,
											"end": 2456,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 2444,
											"end": 2450,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 2440,
											"end": 2457,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2436,
											"end": 2463,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 2426,
											"end": 2481,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "374"
										},
										{
											"begin": 2426,
											"end": 2481,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 2477,
											"end": 2478,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2474,
											"end": 2475,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2467,
											"end": 2479,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 2426,
											"end": 2481,
											"name": "tag",
											"source": 8,
											"value": "374"
										},
										{
											"begin": 2426,
											"end": 2481,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2513,
											"end": 2519,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2500,
											"end": 2520,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 2539,
											"end": 2557,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2535,
											"end": 2537,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2532,
											"end": 2558,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 2529,
											"end": 2581,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 2529,
											"end": 2581,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "376"
										},
										{
											"begin": 2529,
											"end": 2581,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 2561,
											"end": 2579,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "376"
										},
										{
											"begin": 2561,
											"end": 2579,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "345"
										},
										{
											"begin": 2561,
											"end": 2579,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 2561,
											"end": 2579,
											"name": "tag",
											"source": 8,
											"value": "376"
										},
										{
											"begin": 2561,
											"end": 2579,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2605,
											"end": 2660,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "377"
										},
										{
											"begin": 2648,
											"end": 2650,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 2629,
											"end": 2642,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2629,
											"end": 2642,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2625,
											"end": 2652,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 2654,
											"end": 2658,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 2621,
											"end": 2659,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2605,
											"end": 2660,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "346"
										},
										{
											"begin": 2605,
											"end": 2660,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 2605,
											"end": 2660,
											"name": "tag",
											"source": 8,
											"value": "377"
										},
										{
											"begin": 2605,
											"end": 2660,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2685,
											"end": 2687,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2676,
											"end": 2683,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2669,
											"end": 2688,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2731,
											"end": 2734,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 2724,
											"end": 2728,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 2719,
											"end": 2721,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 2711,
											"end": 2717,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 2707,
											"end": 2722,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2703,
											"end": 2729,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2700,
											"end": 2735,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 2697,
											"end": 2752,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 2697,
											"end": 2752,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "378"
										},
										{
											"begin": 2697,
											"end": 2752,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 2748,
											"end": 2749,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2745,
											"end": 2746,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2738,
											"end": 2750,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 2697,
											"end": 2752,
											"name": "tag",
											"source": 8,
											"value": "378"
										},
										{
											"begin": 2697,
											"end": 2752,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2813,
											"end": 2815,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2806,
											"end": 2810,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 2798,
											"end": 2804,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 2794,
											"end": 2811,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2787,
											"end": 2791,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 2778,
											"end": 2785,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 2774,
											"end": 2792,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2761,
											"end": 2816,
											"name": "CALLDATACOPY",
											"source": 8
										},
										{
											"begin": 2861,
											"end": 2862,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2836,
											"end": 2852,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 2836,
											"end": 2852,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2836,
											"end": 2852,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2854,
											"end": 2858,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 2832,
											"end": 2859,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2825,
											"end": 2863,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 2825,
											"end": 2863,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2825,
											"end": 2863,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 2825,
											"end": 2863,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2840,
											"end": 2847,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 2363,
											"end": 2894,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2363,
											"end": 2894,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 2899,
											"end": 3812,
											"name": "tag",
											"source": 8,
											"value": "54"
										},
										{
											"begin": 2899,
											"end": 3812,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3021,
											"end": 3027,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3029,
											"end": 3035,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3037,
											"end": 3043,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3045,
											"end": 3051,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3053,
											"end": 3059,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3061,
											"end": 3067,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3114,
											"end": 3117,
											"name": "PUSH",
											"source": 8,
											"value": "C0"
										},
										{
											"begin": 3102,
											"end": 3111,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 3093,
											"end": 3100,
											"name": "DUP10",
											"source": 8
										},
										{
											"begin": 3089,
											"end": 3112,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 3085,
											"end": 3118,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 3082,
											"end": 3135,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 3082,
											"end": 3135,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "380"
										},
										{
											"begin": 3082,
											"end": 3135,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 3131,
											"end": 3132,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3128,
											"end": 3129,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3121,
											"end": 3133,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 3082,
											"end": 3135,
											"name": "tag",
											"source": 8,
											"value": "380"
										},
										{
											"begin": 3082,
											"end": 3135,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3171,
											"end": 3180,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 3158,
											"end": 3181,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 3200,
											"end": 3218,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3241,
											"end": 3243,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3233,
											"end": 3239,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3230,
											"end": 3244,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 3227,
											"end": 3261,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 3227,
											"end": 3261,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "381"
										},
										{
											"begin": 3227,
											"end": 3261,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 3257,
											"end": 3258,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3254,
											"end": 3255,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3247,
											"end": 3259,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 3227,
											"end": 3261,
											"name": "tag",
											"source": 8,
											"value": "381"
										},
										{
											"begin": 3227,
											"end": 3261,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3280,
											"end": 3330,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "382"
										},
										{
											"begin": 3322,
											"end": 3329,
											"name": "DUP11",
											"source": 8
										},
										{
											"begin": 3313,
											"end": 3319,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 3302,
											"end": 3311,
											"name": "DUP12",
											"source": 8
										},
										{
											"begin": 3298,
											"end": 3320,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3280,
											"end": 3330,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "347"
										},
										{
											"begin": 3280,
											"end": 3330,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 3280,
											"end": 3330,
											"name": "tag",
											"source": 8,
											"value": "382"
										},
										{
											"begin": 3280,
											"end": 3330,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3270,
											"end": 3330,
											"name": "SWAP8",
											"source": 8
										},
										{
											"begin": 3270,
											"end": 3330,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3383,
											"end": 3385,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 3372,
											"end": 3381,
											"name": "DUP10",
											"source": 8
										},
										{
											"begin": 3368,
											"end": 3386,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3355,
											"end": 3387,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 3339,
											"end": 3387,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3339,
											"end": 3387,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3412,
											"end": 3414,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3402,
											"end": 3410,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3399,
											"end": 3415,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 3396,
											"end": 3432,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 3396,
											"end": 3432,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "383"
										},
										{
											"begin": 3396,
											"end": 3432,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 3428,
											"end": 3429,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3425,
											"end": 3426,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3418,
											"end": 3430,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 3396,
											"end": 3432,
											"name": "tag",
											"source": 8,
											"value": "383"
										},
										{
											"begin": 3396,
											"end": 3432,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3396,
											"end": 3432,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3451,
											"end": 3503,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "384"
										},
										{
											"begin": 3495,
											"end": 3502,
											"name": "DUP10",
											"source": 8
										},
										{
											"begin": 3484,
											"end": 3492,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3473,
											"end": 3482,
											"name": "DUP11",
											"source": 8
										},
										{
											"begin": 3469,
											"end": 3493,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3451,
											"end": 3503,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "347"
										},
										{
											"begin": 3451,
											"end": 3503,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 3451,
											"end": 3503,
											"name": "tag",
											"source": 8,
											"value": "384"
										},
										{
											"begin": 3451,
											"end": 3503,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3441,
											"end": 3503,
											"name": "SWAP6",
											"source": 8
										},
										{
											"begin": 3441,
											"end": 3503,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3441,
											"end": 3503,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3553,
											"end": 3555,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3542,
											"end": 3551,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 3538,
											"end": 3556,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3525,
											"end": 3557,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 3597,
											"end": 3601,
											"name": "PUSH",
											"source": 8,
											"value": "FF"
										},
										{
											"begin": 3590,
											"end": 3595,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3586,
											"end": 3602,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 3579,
											"end": 3584,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3576,
											"end": 3603,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 3566,
											"end": 3621,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "385"
										},
										{
											"begin": 3566,
											"end": 3621,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 3617,
											"end": 3618,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3614,
											"end": 3615,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3607,
											"end": 3619,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 3566,
											"end": 3621,
											"name": "tag",
											"source": 8,
											"value": "385"
										},
										{
											"begin": 3566,
											"end": 3621,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3640,
											"end": 3645,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3692,
											"end": 3694,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 3677,
											"end": 3695,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 3677,
											"end": 3695,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3664,
											"end": 3696,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 3664,
											"end": 3696,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3743,
											"end": 3746,
											"name": "PUSH",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 3728,
											"end": 3747,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 3728,
											"end": 3747,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3715,
											"end": 3748,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 3715,
											"end": 3748,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3767,
											"end": 3806,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "386"
										},
										{
											"begin": 3801,
											"end": 3804,
											"name": "PUSH",
											"source": 8,
											"value": "A0"
										},
										{
											"begin": 3786,
											"end": 3805,
											"name": "DUP9",
											"source": 8
										},
										{
											"begin": 3786,
											"end": 3805,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3767,
											"end": 3806,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "344"
										},
										{
											"begin": 3767,
											"end": 3806,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 3767,
											"end": 3806,
											"name": "tag",
											"source": 8,
											"value": "386"
										},
										{
											"begin": 3767,
											"end": 3806,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3757,
											"end": 3806,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3757,
											"end": 3806,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2899,
											"end": 3812,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 2899,
											"end": 3812,
											"name": "SWAP6",
											"source": 8
										},
										{
											"begin": 2899,
											"end": 3812,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2899,
											"end": 3812,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 2899,
											"end": 3812,
											"name": "SWAP6",
											"source": 8
										},
										{
											"begin": 2899,
											"end": 3812,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2899,
											"end": 3812,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 2899,
											"end": 3812,
											"name": "SWAP6",
											"source": 8
										},
										{
											"begin": 2899,
											"end": 3812,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 4006,
											"end": 4664,
											"name": "tag",
											"source": 8,
											"value": "70"
										},
										{
											"begin": 4006,
											"end": 4664,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4177,
											"end": 4179,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 4229,
											"end": 4250,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 4229,
											"end": 4250,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4229,
											"end": 4250,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4299,
											"end": 4312,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4299,
											"end": 4312,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 4202,
											"end": 4220,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4202,
											"end": 4220,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4202,
											"end": 4220,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4321,
											"end": 4343,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4321,
											"end": 4343,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4321,
											"end": 4343,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4148,
											"end": 4152,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 4148,
											"end": 4152,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 4177,
											"end": 4179,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4400,
											"end": 4415,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 4400,
											"end": 4415,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4400,
											"end": 4415,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4400,
											"end": 4415,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4374,
											"end": 4376,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 4359,
											"end": 4377,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 4359,
											"end": 4377,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4359,
											"end": 4377,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4148,
											"end": 4152,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 4443,
											"end": 4638,
											"name": "tag",
											"source": 8,
											"value": "389"
										},
										{
											"begin": 4443,
											"end": 4638,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4457,
											"end": 4463,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4454,
											"end": 4455,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4451,
											"end": 4464,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 4443,
											"end": 4638,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 4443,
											"end": 4638,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "391"
										},
										{
											"begin": 4443,
											"end": 4638,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 4522,
											"end": 4535,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 4522,
											"end": 4535,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4518,
											"end": 4557,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 4506,
											"end": 4558,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 4506,
											"end": 4558,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4613,
											"end": 4628,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 4613,
											"end": 4628,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 4613,
											"end": 4628,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4613,
											"end": 4628,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 4578,
											"end": 4590,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 4578,
											"end": 4590,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 4578,
											"end": 4590,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4578,
											"end": 4590,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 4554,
											"end": 4555,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 4472,
											"end": 4481,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4443,
											"end": 4638,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "389"
										},
										{
											"begin": 4443,
											"end": 4638,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4443,
											"end": 4638,
											"name": "tag",
											"source": 8,
											"value": "391"
										},
										{
											"begin": 4443,
											"end": 4638,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4655,
											"end": 4658,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4655,
											"end": 4658,
											"name": "SWAP7",
											"source": 8
										},
										{
											"begin": 4006,
											"end": 4664,
											"name": "SWAP6",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4006,
											"end": 4664,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 4669,
											"end": 5060,
											"name": "tag",
											"source": 8,
											"value": "73"
										},
										{
											"begin": 4669,
											"end": 5060,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4755,
											"end": 4761,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 4763,
											"end": 4769,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 4771,
											"end": 4777,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 4779,
											"end": 4785,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 4832,
											"end": 4835,
											"name": "PUSH",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 4820,
											"end": 4829,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 4811,
											"end": 4818,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 4807,
											"end": 4830,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 4803,
											"end": 4836,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 4800,
											"end": 4853,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 4800,
											"end": 4853,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "393"
										},
										{
											"begin": 4800,
											"end": 4853,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 4849,
											"end": 4850,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 4846,
											"end": 4847,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 4839,
											"end": 4851,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 4800,
											"end": 4853,
											"name": "tag",
											"source": 8,
											"value": "393"
										},
										{
											"begin": 4800,
											"end": 4853,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4872,
											"end": 4901,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "394"
										},
										{
											"begin": 4891,
											"end": 4900,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 4872,
											"end": 4901,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "344"
										},
										{
											"begin": 4872,
											"end": 4901,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 4872,
											"end": 4901,
											"name": "tag",
											"source": 8,
											"value": "394"
										},
										{
											"begin": 4872,
											"end": 4901,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4862,
											"end": 4901,
											"name": "SWAP7",
											"source": 8
										},
										{
											"begin": 4948,
											"end": 4950,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 4933,
											"end": 4951,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 4933,
											"end": 4951,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4920,
											"end": 4952,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 4920,
											"end": 4952,
											"name": "SWAP7",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4999,
											"end": 5001,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 4984,
											"end": 5002,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 4984,
											"end": 5002,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4971,
											"end": 5003,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 4971,
											"end": 5003,
											"name": "SWAP6",
											"source": 8
										},
										{
											"begin": 5050,
											"end": 5052,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 5035,
											"end": 5053,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5022,
											"end": 5054,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 5022,
											"end": 5054,
											"name": "SWAP5",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4669,
											"end": 5060,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4669,
											"end": 5060,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 5273,
											"end": 6225,
											"name": "tag",
											"source": 8,
											"value": "90"
										},
										{
											"begin": 5273,
											"end": 6225,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5357,
											"end": 5363,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5388,
											"end": 5390,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 5431,
											"end": 5433,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 5419,
											"end": 5428,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 5410,
											"end": 5417,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 5406,
											"end": 5429,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 5402,
											"end": 5434,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 5399,
											"end": 5451,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 5399,
											"end": 5451,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "397"
										},
										{
											"begin": 5399,
											"end": 5451,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 5447,
											"end": 5448,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5444,
											"end": 5445,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 5437,
											"end": 5449,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 5399,
											"end": 5451,
											"name": "tag",
											"source": 8,
											"value": "397"
										},
										{
											"begin": 5399,
											"end": 5451,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5487,
											"end": 5496,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5474,
											"end": 5497,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 5516,
											"end": 5534,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5557,
											"end": 5559,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 5549,
											"end": 5555,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5546,
											"end": 5560,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 5543,
											"end": 5577,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 5543,
											"end": 5577,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "398"
										},
										{
											"begin": 5543,
											"end": 5577,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 5573,
											"end": 5574,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5570,
											"end": 5571,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 5563,
											"end": 5575,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 5543,
											"end": 5577,
											"name": "tag",
											"source": 8,
											"value": "398"
										},
										{
											"begin": 5543,
											"end": 5577,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5611,
											"end": 5617,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5600,
											"end": 5609,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 5596,
											"end": 5618,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5586,
											"end": 5618,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 5586,
											"end": 5618,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5656,
											"end": 5663,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 5649,
											"end": 5653,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 5645,
											"end": 5647,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 5641,
											"end": 5654,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5637,
											"end": 5664,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 5627,
											"end": 5682,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "399"
										},
										{
											"begin": 5627,
											"end": 5682,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 5678,
											"end": 5679,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5675,
											"end": 5676,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 5668,
											"end": 5680,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 5627,
											"end": 5682,
											"name": "tag",
											"source": 8,
											"value": "399"
										},
										{
											"begin": 5627,
											"end": 5682,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5714,
											"end": 5716,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5701,
											"end": 5717,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 5736,
											"end": 5738,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5732,
											"end": 5734,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5729,
											"end": 5739,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 5726,
											"end": 5762,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 5726,
											"end": 5762,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "401"
										},
										{
											"begin": 5726,
											"end": 5762,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 5742,
											"end": 5760,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "401"
										},
										{
											"begin": 5742,
											"end": 5760,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "345"
										},
										{
											"begin": 5742,
											"end": 5760,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 5742,
											"end": 5760,
											"name": "tag",
											"source": 8,
											"value": "401"
										},
										{
											"begin": 5742,
											"end": 5760,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5788,
											"end": 5790,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 5785,
											"end": 5786,
											"name": "PUSH",
											"source": 8,
											"value": "5"
										},
										{
											"begin": 5781,
											"end": 5791,
											"name": "SHL",
											"source": 8
										},
										{
											"begin": 5771,
											"end": 5791,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 5771,
											"end": 5791,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5811,
											"end": 5839,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "402"
										},
										{
											"begin": 5835,
											"end": 5837,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 5831,
											"end": 5833,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 5827,
											"end": 5838,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5811,
											"end": 5839,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "346"
										},
										{
											"begin": 5811,
											"end": 5839,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 5811,
											"end": 5839,
											"name": "tag",
											"source": 8,
											"value": "402"
										},
										{
											"begin": 5811,
											"end": 5839,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5873,
											"end": 5888,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5873,
											"end": 5888,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5873,
											"end": 5888,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5943,
											"end": 5954,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 5943,
											"end": 5954,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 5943,
											"end": 5954,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5939,
											"end": 5959,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 5939,
											"end": 5959,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5939,
											"end": 5959,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 5904,
											"end": 5916,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 5904,
											"end": 5916,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5904,
											"end": 5916,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5904,
											"end": 5916,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5971,
											"end": 5990,
											"name": "DUP9",
											"source": 8
										},
										{
											"begin": 5971,
											"end": 5990,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 5971,
											"end": 5990,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 5968,
											"end": 6007,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 5968,
											"end": 6007,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "403"
										},
										{
											"begin": 5968,
											"end": 6007,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 6003,
											"end": 6004,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 6000,
											"end": 6001,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 5993,
											"end": 6005,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 5968,
											"end": 6007,
											"name": "tag",
											"source": 8,
											"value": "403"
										},
										{
											"begin": 5968,
											"end": 6007,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6027,
											"end": 6038,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 6027,
											"end": 6038,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 6027,
											"end": 6038,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6027,
											"end": 6038,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 6047,
											"end": 6195,
											"name": "tag",
											"source": 8,
											"value": "404"
										},
										{
											"begin": 6047,
											"end": 6195,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6063,
											"end": 6069,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 6058,
											"end": 6061,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 6055,
											"end": 6070,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 6047,
											"end": 6195,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 6047,
											"end": 6195,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "406"
										},
										{
											"begin": 6047,
											"end": 6195,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 6129,
											"end": 6152,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "407"
										},
										{
											"begin": 6148,
											"end": 6151,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 6129,
											"end": 6152,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "344"
										},
										{
											"begin": 6129,
											"end": 6152,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 6129,
											"end": 6152,
											"name": "tag",
											"source": 8,
											"value": "407"
										},
										{
											"begin": 6129,
											"end": 6152,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6117,
											"end": 6153,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 6117,
											"end": 6153,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 6080,
											"end": 6092,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 6080,
											"end": 6092,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 6080,
											"end": 6092,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6080,
											"end": 6092,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 6173,
											"end": 6185,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6173,
											"end": 6185,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 6173,
											"end": 6185,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6173,
											"end": 6185,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6047,
											"end": 6195,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "404"
										},
										{
											"begin": 6047,
											"end": 6195,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 6047,
											"end": 6195,
											"name": "tag",
											"source": 8,
											"value": "406"
										},
										{
											"begin": 6047,
											"end": 6195,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6214,
											"end": 6219,
											"name": "SWAP9",
											"source": 8
										},
										{
											"begin": 5273,
											"end": 6225,
											"name": "SWAP8",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5273,
											"end": 6225,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 6230,
											"end": 6490,
											"name": "tag",
											"source": 8,
											"value": "105"
										},
										{
											"begin": 6230,
											"end": 6490,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6298,
											"end": 6304,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 6306,
											"end": 6312,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 6359,
											"end": 6361,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 6347,
											"end": 6356,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 6338,
											"end": 6345,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 6334,
											"end": 6357,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 6330,
											"end": 6362,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 6327,
											"end": 6379,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 6327,
											"end": 6379,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "409"
										},
										{
											"begin": 6327,
											"end": 6379,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 6375,
											"end": 6376,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 6372,
											"end": 6373,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 6365,
											"end": 6377,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 6327,
											"end": 6379,
											"name": "tag",
											"source": 8,
											"value": "409"
										},
										{
											"begin": 6327,
											"end": 6379,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6398,
											"end": 6427,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "410"
										},
										{
											"begin": 6417,
											"end": 6426,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 6398,
											"end": 6427,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "344"
										},
										{
											"begin": 6398,
											"end": 6427,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 6398,
											"end": 6427,
											"name": "tag",
											"source": 8,
											"value": "410"
										},
										{
											"begin": 6398,
											"end": 6427,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6388,
											"end": 6427,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 6388,
											"end": 6427,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 6446,
											"end": 6484,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "411"
										},
										{
											"begin": 6480,
											"end": 6482,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 6469,
											"end": 6478,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 6465,
											"end": 6483,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6446,
											"end": 6484,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "344"
										},
										{
											"begin": 6446,
											"end": 6484,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 6446,
											"end": 6484,
											"name": "tag",
											"source": 8,
											"value": "411"
										},
										{
											"begin": 6446,
											"end": 6484,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6436,
											"end": 6484,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6436,
											"end": 6484,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 6230,
											"end": 6490,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 6230,
											"end": 6490,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 6230,
											"end": 6490,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 6230,
											"end": 6490,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6230,
											"end": 6490,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 6230,
											"end": 6490,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 6495,
											"end": 6675,
											"name": "tag",
											"source": 8,
											"value": "113"
										},
										{
											"begin": 6495,
											"end": 6675,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6554,
											"end": 6560,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 6607,
											"end": 6609,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 6595,
											"end": 6604,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 6586,
											"end": 6593,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 6582,
											"end": 6605,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 6578,
											"end": 6610,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 6575,
											"end": 6627,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 6575,
											"end": 6627,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "413"
										},
										{
											"begin": 6575,
											"end": 6627,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 6623,
											"end": 6624,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 6620,
											"end": 6621,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 6613,
											"end": 6625,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 6575,
											"end": 6627,
											"name": "tag",
											"source": 8,
											"value": "413"
										},
										{
											"begin": 6575,
											"end": 6627,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6646,
											"end": 6669,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 6646,
											"end": 6669,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 6495,
											"end": 6675,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6495,
											"end": 6675,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 6680,
											"end": 7060,
											"name": "tag",
											"source": 8,
											"value": "118"
										},
										{
											"begin": 6680,
											"end": 7060,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6759,
											"end": 6760,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 6755,
											"end": 6767,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 6755,
											"end": 6767,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 6755,
											"end": 6767,
											"name": "SHR",
											"source": 8
										},
										{
											"begin": 6755,
											"end": 6767,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6802,
											"end": 6814,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 6802,
											"end": 6814,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 6802,
											"end": 6814,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 6823,
											"end": 6884,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "415"
										},
										{
											"begin": 6823,
											"end": 6884,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 6877,
											"end": 6881,
											"name": "PUSH",
											"source": 8,
											"value": "7F"
										},
										{
											"begin": 6869,
											"end": 6875,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 6865,
											"end": 6882,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 6855,
											"end": 6882,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 6855,
											"end": 6882,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 6823,
											"end": 6884,
											"name": "tag",
											"source": 8,
											"value": "415"
										},
										{
											"begin": 6823,
											"end": 6884,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6930,
											"end": 6932,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 6922,
											"end": 6928,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 6919,
											"end": 6933,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 6899,
											"end": 6917,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 6896,
											"end": 6934,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 6893,
											"end": 7054,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 6893,
											"end": 7054,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "416"
										},
										{
											"begin": 6893,
											"end": 7054,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 6976,
											"end": 6986,
											"name": "PUSH",
											"source": 8,
											"value": "4E487B71"
										},
										{
											"begin": 6971,
											"end": 6974,
											"name": "PUSH",
											"source": 8,
											"value": "E0"
										},
										{
											"begin": 6967,
											"end": 6987,
											"name": "SHL",
											"source": 8
										},
										{
											"begin": 6964,
											"end": 6965,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 6957,
											"end": 6988,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 7011,
											"end": 7015,
											"name": "PUSH",
											"source": 8,
											"value": "22"
										},
										{
											"begin": 7008,
											"end": 7009,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 7001,
											"end": 7016,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 7039,
											"end": 7043,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 7036,
											"end": 7037,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 7029,
											"end": 7044,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 6893,
											"end": 7054,
											"name": "tag",
											"source": 8,
											"value": "416"
										},
										{
											"begin": 6893,
											"end": 7054,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6893,
											"end": 7054,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 6680,
											"end": 7060,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 6680,
											"end": 7060,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6680,
											"end": 7060,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 6680,
											"end": 7060,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 7679,
											"end": 7806,
											"name": "tag",
											"source": 8,
											"value": "348"
										},
										{
											"begin": 7679,
											"end": 7806,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7740,
											"end": 7750,
											"name": "PUSH",
											"source": 8,
											"value": "4E487B71"
										},
										{
											"begin": 7735,
											"end": 7738,
											"name": "PUSH",
											"source": 8,
											"value": "E0"
										},
										{
											"begin": 7731,
											"end": 7751,
											"name": "SHL",
											"source": 8
										},
										{
											"begin": 7728,
											"end": 7729,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 7721,
											"end": 7752,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 7771,
											"end": 7775,
											"name": "PUSH",
											"source": 8,
											"value": "11"
										},
										{
											"begin": 7768,
											"end": 7769,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 7761,
											"end": 7776,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 7795,
											"end": 7799,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 7792,
											"end": 7793,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 7785,
											"end": 7800,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 7811,
											"end": 7939,
											"name": "tag",
											"source": 8,
											"value": "165"
										},
										{
											"begin": 7811,
											"end": 7939,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7851,
											"end": 7854,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 7882,
											"end": 7883,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 7878,
											"end": 7884,
											"name": "NOT",
											"source": 8
										},
										{
											"begin": 7875,
											"end": 7876,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 7872,
											"end": 7885,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 7869,
											"end": 7908,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 7869,
											"end": 7908,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "422"
										},
										{
											"begin": 7869,
											"end": 7908,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 7888,
											"end": 7906,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "422"
										},
										{
											"begin": 7888,
											"end": 7906,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "348"
										},
										{
											"begin": 7888,
											"end": 7906,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 7888,
											"end": 7906,
											"name": "tag",
											"source": 8,
											"value": "422"
										},
										{
											"begin": 7888,
											"end": 7906,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7924,
											"end": 7933,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7924,
											"end": 7933,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7811,
											"end": 7939,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 11485,
											"end": 11892,
											"name": "tag",
											"source": 8,
											"value": "260"
										},
										{
											"begin": 11485,
											"end": 11892,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 11687,
											"end": 11689,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 11669,
											"end": 11690,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 11669,
											"end": 11690,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 11669,
											"end": 11690,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 11726,
											"end": 11728,
											"name": "PUSH",
											"source": 8,
											"value": "2B"
										},
										{
											"begin": 11706,
											"end": 11724,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 11706,
											"end": 11724,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 11706,
											"end": 11724,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 11699,
											"end": 11729,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 11765,
											"end": 11799,
											"name": "PUSH",
											"source": 8,
											"value": "496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069"
										},
										{
											"begin": 11760,
											"end": 11762,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 11745,
											"end": 11763,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 11745,
											"end": 11763,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 11738,
											"end": 11800,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6E697469616C697A696E67"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11831,
											"end": 11833,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 11816,
											"end": 11834,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 11816,
											"end": 11834,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 11809,
											"end": 11850,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 11882,
											"end": 11885,
											"name": "PUSH",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 11867,
											"end": 11886,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 11867,
											"end": 11886,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 11485,
											"end": 11892,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 12257,
											"end": 12474,
											"name": "tag",
											"source": 8,
											"value": "281"
										},
										{
											"begin": 12257,
											"end": 12474,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 12297,
											"end": 12298,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 12323,
											"end": 12324,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 12313,
											"end": 12445,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "435"
										},
										{
											"begin": 12313,
											"end": 12445,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 12367,
											"end": 12377,
											"name": "PUSH",
											"source": 8,
											"value": "4E487B71"
										},
										{
											"begin": 12362,
											"end": 12365,
											"name": "PUSH",
											"source": 8,
											"value": "E0"
										},
										{
											"begin": 12358,
											"end": 12378,
											"name": "SHL",
											"source": 8
										},
										{
											"begin": 12355,
											"end": 12356,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 12348,
											"end": 12379,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 12402,
											"end": 12406,
											"name": "PUSH",
											"source": 8,
											"value": "12"
										},
										{
											"begin": 12399,
											"end": 12400,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 12392,
											"end": 12407,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 12430,
											"end": 12434,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 12427,
											"end": 12428,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 12420,
											"end": 12435,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 12313,
											"end": 12445,
											"name": "tag",
											"source": 8,
											"value": "435"
										},
										{
											"begin": 12313,
											"end": 12445,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 12459,
											"end": 12468,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 12459,
											"end": 12468,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 12257,
											"end": 12474,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 12479,
											"end": 12604,
											"name": "tag",
											"source": 8,
											"value": "285"
										},
										{
											"begin": 12479,
											"end": 12604,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 12519,
											"end": 12523,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 12547,
											"end": 12548,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 12544,
											"end": 12545,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 12541,
											"end": 12549,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 12538,
											"end": 12572,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 12538,
											"end": 12572,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "438"
										},
										{
											"begin": 12538,
											"end": 12572,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 12552,
											"end": 12570,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "438"
										},
										{
											"begin": 12552,
											"end": 12570,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "348"
										},
										{
											"begin": 12552,
											"end": 12570,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 12552,
											"end": 12570,
											"name": "tag",
											"source": 8,
											"value": "438"
										},
										{
											"begin": 12552,
											"end": 12570,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 12589,
											"end": 12598,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 12589,
											"end": 12598,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 12479,
											"end": 12604,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 12970,
											"end": 13097,
											"name": "tag",
											"source": 8,
											"value": "300"
										},
										{
											"begin": 12970,
											"end": 13097,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 13031,
											"end": 13041,
											"name": "PUSH",
											"source": 8,
											"value": "4E487B71"
										},
										{
											"begin": 13026,
											"end": 13029,
											"name": "PUSH",
											"source": 8,
											"value": "E0"
										},
										{
											"begin": 13022,
											"end": 13042,
											"name": "SHL",
											"source": 8
										},
										{
											"begin": 13019,
											"end": 13020,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 13012,
											"end": 13043,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 13062,
											"end": 13066,
											"name": "PUSH",
											"source": 8,
											"value": "32"
										},
										{
											"begin": 13059,
											"end": 13060,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 13052,
											"end": 13067,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 13086,
											"end": 13090,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 13083,
											"end": 13084,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 13076,
											"end": 13091,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 13102,
											"end": 13311,
											"name": "tag",
											"source": 8,
											"value": "302"
										},
										{
											"begin": 13102,
											"end": 13311,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 13140,
											"end": 13143,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 13168,
											"end": 13186,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 13221,
											"end": 13223,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 13214,
											"end": 13219,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 13210,
											"end": 13224,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 13248,
											"end": 13250,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 13239,
											"end": 13246,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 13236,
											"end": 13251,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 13233,
											"end": 13274,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 13233,
											"end": 13274,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "443"
										},
										{
											"begin": 13233,
											"end": 13274,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 13254,
											"end": 13272,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "443"
										},
										{
											"begin": 13254,
											"end": 13272,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "348"
										},
										{
											"begin": 13254,
											"end": 13272,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 13254,
											"end": 13272,
											"name": "tag",
											"source": 8,
											"value": "443"
										},
										{
											"begin": 13254,
											"end": 13272,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 13303,
											"end": 13304,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 13290,
											"end": 13305,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 13290,
											"end": 13305,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 13102,
											"end": 13311,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 13102,
											"end": 13311,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"_permitTransfer(address,uint256,uint256,uint256)": "55b7dc67",
							"_taxFee()": "3b124fe7",
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"decreaseAllowance(address,uint256)": "a457c2d7",
							"getTokenOwnerAddress()": "b722d0a5",
							"increaseAllowance(address,uint256)": "39509351",
							"initialize(string,string,uint8,uint256,uint256,address)": "2cd77a5a",
							"mapSigner(address)": "07c351dd",
							"name()": "06fdde03",
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"setSigners(address[])": "a3772662",
							"signers()": "46f0975a",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd",
							"transferOwnership(address)": "f2fde38b",
							"uniqueIdExists(uint256)": "f9342285"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"uniqueId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"_permitTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenOwnerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taxFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenOwnerAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"mapSigner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"signers_\",\"type\":\"address[]\"}],\"name\":\"setSigners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uniqueIdExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Detake3Token.sol\":\"Detake3Token\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d7fc8396619de513c96b6e00301b88dd790e83542aab918425633a5f7297a15a\",\"dweb:/ipfs/QmXbP4kiZyp7guuS7xe8KaybnwkRPGrBc2Kbi3vhcTfpxb\"]},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6eb2fd1e9894dbe778f4b8131adecebe570689e63cf892f4e21257bfe1252497\",\"dweb:/ipfs/QmXgUGNfZvrn6N2miv3nooSs7Jm34A41qz94fu2GtDFcx8\"]},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"keccak256\":\"0x7c7ac0bc6c340a7f320524b9a4b4b079ee9da3c51258080d4bab237f329a427c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e7000057dd28a5fd92e5687c2ee6044181531bab0fcb0e5003cbe33ae024d06d\",\"dweb:/ipfs/QmZYhnjEQxVqVcLMJMS7VbhuMSCNM4YCgom1wg5borSp18\"]},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://75b47c3aeca7b66ea6752f8be020ec5c1c502de6ec9065272dae23d3a52196e2\",\"dweb:/ipfs/QmUebPMHv16tYKFh5BmBQkMfRFb5b8UZ2RgVwdjxCeufVF\"]},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4c9c634f99dd02d73ce7498b03a6305e251c05eeebb71457306561c1fab0fa7d\",\"dweb:/ipfs/QmbYRBbZHy8YoaQKXdPryiL3CSS7uUaRfRYi1TUj9cTqJQ\"]},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9b4b2110b7f2b3eb32951bc08046fa90feccffa594e1176cb91cdfb0e94726b4\",\"dweb:/ipfs/QmSxLwYjicf9zWFuieRc8WQwE4FisA1Um5jp1iSa731TGt\"]},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d6520943ea55fdf5f0bafb39ed909f64de17051bc954ff3e88c9e5621412c79c\",\"dweb:/ipfs/QmWZ4rAKTQbNG2HxGs46AcTXShsVytKeLs7CUCdCSv5N7a\"]},\"contracts/Detake3Token.sol\":{\"keccak256\":\"0x37d1524bbc3cfb68018bced08a872e49f64d0f2d7961892b1af15ee500ab6f0b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c7d66a350001b9c675f5a8d247605b86ce7975a8231c35b0fe73c02ca69fb75b\",\"dweb:/ipfs/QmUWk97CjvGZhrSmkf5ofaCHVfGyQWixNMvRepMms8WUS6\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 138,
								"contract": "contracts/Detake3Token.sol:Detake3Token",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_uint8"
							},
							{
								"astId": 141,
								"contract": "contracts/Detake3Token.sol:Detake3Token",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 1280,
								"contract": "contracts/Detake3Token.sol:Detake3Token",
								"label": "__gap",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_uint256)50_storage"
							},
							{
								"astId": 301,
								"contract": "contracts/Detake3Token.sol:Detake3Token",
								"label": "_balances",
								"offset": 0,
								"slot": "51",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 307,
								"contract": "contracts/Detake3Token.sol:Detake3Token",
								"label": "_allowances",
								"offset": 0,
								"slot": "52",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 309,
								"contract": "contracts/Detake3Token.sol:Detake3Token",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "53",
								"type": "t_uint256"
							},
							{
								"astId": 311,
								"contract": "contracts/Detake3Token.sol:Detake3Token",
								"label": "_name",
								"offset": 0,
								"slot": "54",
								"type": "t_string_storage"
							},
							{
								"astId": 313,
								"contract": "contracts/Detake3Token.sol:Detake3Token",
								"label": "_symbol",
								"offset": 0,
								"slot": "55",
								"type": "t_string_storage"
							},
							{
								"astId": 892,
								"contract": "contracts/Detake3Token.sol:Detake3Token",
								"label": "__gap",
								"offset": 0,
								"slot": "56",
								"type": "t_array(t_uint256)45_storage"
							},
							{
								"astId": 10,
								"contract": "contracts/Detake3Token.sol:Detake3Token",
								"label": "_owner",
								"offset": 0,
								"slot": "101",
								"type": "t_address"
							},
							{
								"astId": 130,
								"contract": "contracts/Detake3Token.sol:Detake3Token",
								"label": "__gap",
								"offset": 0,
								"slot": "102",
								"type": "t_array(t_uint256)49_storage"
							},
							{
								"astId": 1291,
								"contract": "contracts/Detake3Token.sol:Detake3Token",
								"label": "_name",
								"offset": 0,
								"slot": "151",
								"type": "t_string_storage"
							},
							{
								"astId": 1293,
								"contract": "contracts/Detake3Token.sol:Detake3Token",
								"label": "_symbol",
								"offset": 0,
								"slot": "152",
								"type": "t_string_storage"
							},
							{
								"astId": 1295,
								"contract": "contracts/Detake3Token.sol:Detake3Token",
								"label": "_decimals",
								"offset": 0,
								"slot": "153",
								"type": "t_uint8"
							},
							{
								"astId": 1297,
								"contract": "contracts/Detake3Token.sol:Detake3Token",
								"label": "_taxFee",
								"offset": 0,
								"slot": "154",
								"type": "t_uint256"
							},
							{
								"astId": 1299,
								"contract": "contracts/Detake3Token.sol:Detake3Token",
								"label": "_tokenOwnerAddress",
								"offset": 0,
								"slot": "155",
								"type": "t_address"
							},
							{
								"astId": 1302,
								"contract": "contracts/Detake3Token.sol:Detake3Token",
								"label": "_signers",
								"offset": 0,
								"slot": "156",
								"type": "t_array(t_address)dyn_storage"
							},
							{
								"astId": 1306,
								"contract": "contracts/Detake3Token.sol:Detake3Token",
								"label": "_mapSigners",
								"offset": 0,
								"slot": "157",
								"type": "t_mapping(t_address,t_bool)"
							},
							{
								"astId": 1310,
								"contract": "contracts/Detake3Token.sol:Detake3Token",
								"label": "uniqueIdExists",
								"offset": 0,
								"slot": "158",
								"type": "t_mapping(t_uint256,t_bool)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_array(t_address)dyn_storage": {
								"base": "t_address",
								"encoding": "dynamic_array",
								"label": "address[]",
								"numberOfBytes": "32"
							},
							"t_array(t_uint256)45_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[45]",
								"numberOfBytes": "1440"
							},
							"t_array(t_uint256)49_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[49]",
								"numberOfBytes": "1568"
							},
							"t_array(t_uint256)50_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[50]",
								"numberOfBytes": "1600"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_bool)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => bool)",
								"numberOfBytes": "32",
								"value": "t_bool"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_mapping(t_uint256,t_bool)": {
								"encoding": "mapping",
								"key": "t_uint256",
								"label": "mapping(uint256 => bool)",
								"numberOfBytes": "32",
								"value": "t_bool"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"errors": [
			{
				"component": "general",
				"errorCode": "5667",
				"formattedMessage": "Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n  --> contracts/Detake3Token.sol:75:9:\n   |\n75 |         uint256 deadline //, // uint8 v, // bytes32 r, // bytes32 s\n   |         ^^^^^^^^^^^^^^^^\n\n",
				"message": "Unused function parameter. Remove or comment out the variable name to silence this warning.",
				"severity": "warning",
				"sourceLocation": {
					"end": 2356,
					"file": "contracts/Detake3Token.sol",
					"start": 2340
				},
				"type": "Warning"
			}
		],
		"sources": {
			"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							1239
						],
						"ContextUpgradeable": [
							1281
						],
						"Initializable": [
							282
						],
						"OwnableUpgradeable": [
							131
						]
					},
					"id": 132,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "102:23:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol",
							"file": "../utils/ContextUpgradeable.sol",
							"id": 2,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 132,
							"sourceUnit": 1282,
							"src": "127:41:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
							"file": "../proxy/utils/Initializable.sol",
							"id": 3,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 132,
							"sourceUnit": 283,
							"src": "169:42:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 5,
										"name": "Initializable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 282,
										"src": "748:13:0"
									},
									"id": 6,
									"nodeType": "InheritanceSpecifier",
									"src": "748:13:0"
								},
								{
									"baseName": {
										"id": 7,
										"name": "ContextUpgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1281,
										"src": "763:18:0"
									},
									"id": 8,
									"nodeType": "InheritanceSpecifier",
									"src": "763:18:0"
								}
							],
							"canonicalName": "OwnableUpgradeable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 4,
								"nodeType": "StructuredDocumentation",
								"src": "213:494:0",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 131,
							"linearizedBaseContracts": [
								131,
								1281,
								282
							],
							"name": "OwnableUpgradeable",
							"nameLocation": "726:18:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 10,
									"mutability": "mutable",
									"name": "_owner",
									"nameLocation": "804:6:0",
									"nodeType": "VariableDeclaration",
									"scope": 131,
									"src": "788:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 9,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "788:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"id": 16,
									"name": "OwnershipTransferred",
									"nameLocation": "823:20:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 15,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 12,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nameLocation": "860:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 16,
												"src": "844:29:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 11,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "844:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 14,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "891:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 16,
												"src": "875:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 13,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "875:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "843:57:0"
									},
									"src": "817:84:0"
								},
								{
									"body": {
										"id": 25,
										"nodeType": "Block",
										"src": "1055:43:0",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 22,
														"name": "__Ownable_init_unchained",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 37,
														"src": "1065:24:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 23,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1065:26:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 24,
												"nodeType": "ExpressionStatement",
												"src": "1065:26:0"
											}
										]
									},
									"documentation": {
										"id": 17,
										"nodeType": "StructuredDocumentation",
										"src": "907:91:0",
										"text": " @dev Initializes the contract setting the deployer as the initial owner."
									},
									"id": 26,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 20,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 19,
												"name": "onlyInitializing",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 245,
												"src": "1038:16:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1038:16:0"
										}
									],
									"name": "__Ownable_init",
									"nameLocation": "1012:14:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 18,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1026:2:0"
									},
									"returnParameters": {
										"id": 21,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1055:0:0"
									},
									"scope": 131,
									"src": "1003:95:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 36,
										"nodeType": "Block",
										"src": "1166:49:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 32,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1266,
																"src": "1195:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 33,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1195:12:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 31,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 125,
														"src": "1176:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 34,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1176:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 35,
												"nodeType": "ExpressionStatement",
												"src": "1176:32:0"
											}
										]
									},
									"id": 37,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 29,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 28,
												"name": "onlyInitializing",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 245,
												"src": "1149:16:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1149:16:0"
										}
									],
									"name": "__Ownable_init_unchained",
									"nameLocation": "1113:24:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 27,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1137:2:0"
									},
									"returnParameters": {
										"id": 30,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1166:0:0"
									},
									"scope": 131,
									"src": "1104:111:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 44,
										"nodeType": "Block",
										"src": "1324:41:0",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 40,
														"name": "_checkOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 68,
														"src": "1334:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 41,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1334:13:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 42,
												"nodeType": "ExpressionStatement",
												"src": "1334:13:0"
											},
											{
												"id": 43,
												"nodeType": "PlaceholderStatement",
												"src": "1357:1:0"
											}
										]
									},
									"documentation": {
										"id": 38,
										"nodeType": "StructuredDocumentation",
										"src": "1221:77:0",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 45,
									"name": "onlyOwner",
									"nameLocation": "1312:9:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 39,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1321:2:0"
									},
									"src": "1303:62:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 53,
										"nodeType": "Block",
										"src": "1496:30:0",
										"statements": [
											{
												"expression": {
													"id": 51,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 10,
													"src": "1513:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 50,
												"id": 52,
												"nodeType": "Return",
												"src": "1506:13:0"
											}
										]
									},
									"documentation": {
										"id": 46,
										"nodeType": "StructuredDocumentation",
										"src": "1371:65:0",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 54,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nameLocation": "1450:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 47,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1455:2:0"
									},
									"returnParameters": {
										"id": 50,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 49,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 54,
												"src": "1487:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 48,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1487:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1486:9:0"
									},
									"scope": 131,
									"src": "1441:85:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 67,
										"nodeType": "Block",
										"src": "1644:85:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 63,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 59,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 54,
																	"src": "1662:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 60,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1662:7:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 61,
																	"name": "_msgSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1266,
																	"src": "1673:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 62,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1673:12:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1662:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
															"id": 64,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1687:34:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															},
															"value": "Ownable: caller is not the owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															}
														],
														"id": 58,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1654:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 65,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1654:68:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 66,
												"nodeType": "ExpressionStatement",
												"src": "1654:68:0"
											}
										]
									},
									"documentation": {
										"id": 55,
										"nodeType": "StructuredDocumentation",
										"src": "1532:62:0",
										"text": " @dev Throws if the sender is not the owner."
									},
									"id": 68,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkOwner",
									"nameLocation": "1608:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 56,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1619:2:0"
									},
									"returnParameters": {
										"id": 57,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1644:0:0"
									},
									"scope": 131,
									"src": "1599:130:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 81,
										"nodeType": "Block",
										"src": "2125:47:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 77,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2162:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 76,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2154:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 75,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2154:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 78,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2154:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 74,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 125,
														"src": "2135:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 79,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2135:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 80,
												"nodeType": "ExpressionStatement",
												"src": "2135:30:0"
											}
										]
									},
									"documentation": {
										"id": 69,
										"nodeType": "StructuredDocumentation",
										"src": "1735:331:0",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 82,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 72,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 71,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 45,
												"src": "2115:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "2115:9:0"
										}
									],
									"name": "renounceOwnership",
									"nameLocation": "2080:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 70,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2097:2:0"
									},
									"returnParameters": {
										"id": 73,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2125:0:0"
									},
									"scope": 131,
									"src": "2071:101:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 104,
										"nodeType": "Block",
										"src": "2391:128:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 96,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 91,
																"name": "newOwner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 85,
																"src": "2409:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 94,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2429:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 93,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2421:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 92,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2421:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 95,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2421:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2409:22:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
															"id": 97,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2433:40:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															},
															"value": "Ownable: new owner is the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															}
														],
														"id": 90,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2401:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 98,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2401:73:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 99,
												"nodeType": "ExpressionStatement",
												"src": "2401:73:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 101,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 85,
															"src": "2503:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 100,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 125,
														"src": "2484:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 102,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2484:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 103,
												"nodeType": "ExpressionStatement",
												"src": "2484:28:0"
											}
										]
									},
									"documentation": {
										"id": 83,
										"nodeType": "StructuredDocumentation",
										"src": "2178:138:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 105,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 88,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 87,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 45,
												"src": "2381:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "2381:9:0"
										}
									],
									"name": "transferOwnership",
									"nameLocation": "2330:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 86,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 85,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2356:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 105,
												"src": "2348:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 84,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2348:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2347:18:0"
									},
									"returnParameters": {
										"id": 89,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2391:0:0"
									},
									"scope": 131,
									"src": "2321:198:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 124,
										"nodeType": "Block",
										"src": "2736:124:0",
										"statements": [
											{
												"assignments": [
													112
												],
												"declarations": [
													{
														"constant": false,
														"id": 112,
														"mutability": "mutable",
														"name": "oldOwner",
														"nameLocation": "2754:8:0",
														"nodeType": "VariableDeclaration",
														"scope": 124,
														"src": "2746:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 111,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2746:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 114,
												"initialValue": {
													"id": 113,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 10,
													"src": "2765:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2746:25:0"
											},
											{
												"expression": {
													"id": 117,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 115,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 10,
														"src": "2781:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 116,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 108,
														"src": "2790:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2781:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 118,
												"nodeType": "ExpressionStatement",
												"src": "2781:17:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 120,
															"name": "oldOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 112,
															"src": "2834:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 121,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 108,
															"src": "2844:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 119,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 16,
														"src": "2813:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 122,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2813:40:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 123,
												"nodeType": "EmitStatement",
												"src": "2808:45:0"
											}
										]
									},
									"documentation": {
										"id": 106,
										"nodeType": "StructuredDocumentation",
										"src": "2525:143:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
									},
									"id": 125,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nameLocation": "2682:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 109,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 108,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2709:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 125,
												"src": "2701:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 107,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2701:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2700:18:0"
									},
									"returnParameters": {
										"id": 110,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2736:0:0"
									},
									"scope": 131,
									"src": "2673:187:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"constant": false,
									"documentation": {
										"id": 126,
										"nodeType": "StructuredDocumentation",
										"src": "2866:254:0",
										"text": " @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
									},
									"id": 130,
									"mutability": "mutable",
									"name": "__gap",
									"nameLocation": "3145:5:0",
									"nodeType": "VariableDeclaration",
									"scope": 131,
									"src": "3125:25:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_uint256_$49_storage",
										"typeString": "uint256[49]"
									},
									"typeName": {
										"baseType": {
											"id": 127,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "3125:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"id": 129,
										"length": {
											"hexValue": "3439",
											"id": 128,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "3133:2:0",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_49_by_1",
												"typeString": "int_const 49"
											},
											"value": "49"
										},
										"nodeType": "ArrayTypeName",
										"src": "3125:11:0",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_uint256_$49_storage_ptr",
											"typeString": "uint256[49]"
										}
									},
									"visibility": "private"
								}
							],
							"scope": 132,
							"src": "708:2445:0",
							"usedErrors": []
						}
					],
					"src": "102:3052:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							1239
						],
						"Initializable": [
							282
						]
					},
					"id": 283,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 133,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".2"
							],
							"nodeType": "PragmaDirective",
							"src": "113:23:1"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol",
							"file": "../../utils/AddressUpgradeable.sol",
							"id": 134,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 283,
							"sourceUnit": 1240,
							"src": "138:44:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Initializable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 135,
								"nodeType": "StructuredDocumentation",
								"src": "184:2198:1",
								"text": " @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n case an upgrade adds a module that needs to be initialized.\n For example:\n [.hljs-theme-light.nopadding]\n ```\n contract MyToken is ERC20Upgradeable {\n     function initialize() initializer public {\n         __ERC20_init(\"MyToken\", \"MTK\");\n     }\n }\n contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n     function initializeV2() reinitializer(2) public {\n         __ERC20Permit_init(\"MyToken\");\n     }\n }\n ```\n TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n [CAUTION]\n ====\n Avoid leaving a contract uninitialized.\n An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n [.hljs-theme-light.nopadding]\n ```\n /// @custom:oz-upgrades-unsafe-allow constructor\n constructor() {\n     _disableInitializers();\n }\n ```\n ===="
							},
							"fullyImplemented": true,
							"id": 282,
							"linearizedBaseContracts": [
								282
							],
							"name": "Initializable",
							"nameLocation": "2401:13:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"documentation": {
										"id": 136,
										"nodeType": "StructuredDocumentation",
										"src": "2421:109:1",
										"text": " @dev Indicates that the contract has been initialized.\n @custom:oz-retyped-from bool"
									},
									"id": 138,
									"mutability": "mutable",
									"name": "_initialized",
									"nameLocation": "2549:12:1",
									"nodeType": "VariableDeclaration",
									"scope": 282,
									"src": "2535:26:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 137,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "2535:5:1",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"documentation": {
										"id": 139,
										"nodeType": "StructuredDocumentation",
										"src": "2568:91:1",
										"text": " @dev Indicates that the contract is in the process of being initialized."
									},
									"id": 141,
									"mutability": "mutable",
									"name": "_initializing",
									"nameLocation": "2677:13:1",
									"nodeType": "VariableDeclaration",
									"scope": 282,
									"src": "2664:26:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 140,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "2664:4:1",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 142,
										"nodeType": "StructuredDocumentation",
										"src": "2697:90:1",
										"text": " @dev Triggered when the contract has been initialized or reinitialized."
									},
									"id": 146,
									"name": "Initialized",
									"nameLocation": "2798:11:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 145,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 144,
												"indexed": false,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "2816:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 146,
												"src": "2810:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 143,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "2810:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2809:15:1"
									},
									"src": "2792:33:1"
								},
								{
									"body": {
										"id": 201,
										"nodeType": "Block",
										"src": "3101:483:1",
										"statements": [
											{
												"assignments": [
													150
												],
												"declarations": [
													{
														"constant": false,
														"id": 150,
														"mutability": "mutable",
														"name": "isTopLevelCall",
														"nameLocation": "3116:14:1",
														"nodeType": "VariableDeclaration",
														"scope": 201,
														"src": "3111:19:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 149,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "3111:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 153,
												"initialValue": {
													"id": 152,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "3133:14:1",
													"subExpression": {
														"id": 151,
														"name": "_initializing",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 141,
														"src": "3134:13:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3111:36:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 174,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"id": 159,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 155,
																			"name": "isTopLevelCall",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 150,
																			"src": "3179:14:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "&&",
																		"rightExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			},
																			"id": 158,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 156,
																				"name": "_initialized",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 138,
																				"src": "3197:12:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint8",
																					"typeString": "uint8"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "<",
																			"rightExpression": {
																				"hexValue": "31",
																				"id": 157,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "3212:1:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"src": "3197:16:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"src": "3179:34:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 160,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3178:36:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"id": 172,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 168,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "UnaryOperation",
																			"operator": "!",
																			"prefix": true,
																			"src": "3219:45:1",
																			"subExpression": {
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"id": 165,
																								"name": "this",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 4294967268,
																								"src": "3258:4:1",
																								"typeDescriptions": {
																									"typeIdentifier": "t_contract$_Initializable_$282",
																									"typeString": "contract Initializable"
																								}
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_contract$_Initializable_$282",
																									"typeString": "contract Initializable"
																								}
																							],
																							"id": 164,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"nodeType": "ElementaryTypeNameExpression",
																							"src": "3250:7:1",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_address_$",
																								"typeString": "type(address)"
																							},
																							"typeName": {
																								"id": 163,
																								"name": "address",
																								"nodeType": "ElementaryTypeName",
																								"src": "3250:7:1",
																								"typeDescriptions": {}
																							}
																						},
																						"id": 166,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "typeConversion",
																						"lValueRequested": false,
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "3250:13:1",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					],
																					"expression": {
																						"id": 161,
																						"name": "AddressUpgradeable",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1239,
																						"src": "3220:18:1",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_contract$_AddressUpgradeable_$1239_$",
																							"typeString": "type(library AddressUpgradeable)"
																						}
																					},
																					"id": 162,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "isContract",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 1014,
																					"src": "3220:29:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																						"typeString": "function (address) view returns (bool)"
																					}
																				},
																				"id": 167,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "3220:44:1",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "&&",
																		"rightExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			},
																			"id": 171,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 169,
																				"name": "_initialized",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 138,
																				"src": "3268:12:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint8",
																					"typeString": "uint8"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "==",
																			"rightExpression": {
																				"hexValue": "31",
																				"id": 170,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "3284:1:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"src": "3268:17:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"src": "3219:66:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 173,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3218:68:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "3178:108:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564",
															"id": 175,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3300:48:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759",
																"typeString": "literal_string \"Initializable: contract is already initialized\""
															},
															"value": "Initializable: contract is already initialized"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759",
																"typeString": "literal_string \"Initializable: contract is already initialized\""
															}
														],
														"id": 154,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3157:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 176,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3157:201:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 177,
												"nodeType": "ExpressionStatement",
												"src": "3157:201:1"
											},
											{
												"expression": {
													"id": 180,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 178,
														"name": "_initialized",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 138,
														"src": "3368:12:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 179,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3383:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "3368:16:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"id": 181,
												"nodeType": "ExpressionStatement",
												"src": "3368:16:1"
											},
											{
												"condition": {
													"id": 182,
													"name": "isTopLevelCall",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 150,
													"src": "3398:14:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 188,
												"nodeType": "IfStatement",
												"src": "3394:65:1",
												"trueBody": {
													"id": 187,
													"nodeType": "Block",
													"src": "3414:45:1",
													"statements": [
														{
															"expression": {
																"id": 185,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 183,
																	"name": "_initializing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 141,
																	"src": "3428:13:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "74727565",
																	"id": 184,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3444:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																"src": "3428:20:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 186,
															"nodeType": "ExpressionStatement",
															"src": "3428:20:1"
														}
													]
												}
											},
											{
												"id": 189,
												"nodeType": "PlaceholderStatement",
												"src": "3468:1:1"
											},
											{
												"condition": {
													"id": 190,
													"name": "isTopLevelCall",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 150,
													"src": "3483:14:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 200,
												"nodeType": "IfStatement",
												"src": "3479:99:1",
												"trueBody": {
													"id": 199,
													"nodeType": "Block",
													"src": "3499:79:1",
													"statements": [
														{
															"expression": {
																"id": 193,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 191,
																	"name": "_initializing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 141,
																	"src": "3513:13:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "66616c7365",
																	"id": 192,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3529:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "false"
																},
																"src": "3513:21:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 194,
															"nodeType": "ExpressionStatement",
															"src": "3513:21:1"
														},
														{
															"eventCall": {
																"arguments": [
																	{
																		"hexValue": "31",
																		"id": 196,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "3565:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		},
																		"value": "1"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		}
																	],
																	"id": 195,
																	"name": "Initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 146,
																	"src": "3553:11:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_uint8_$returns$__$",
																		"typeString": "function (uint8)"
																	}
																},
																"id": 197,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3553:14:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 198,
															"nodeType": "EmitStatement",
															"src": "3548:19:1"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 147,
										"nodeType": "StructuredDocumentation",
										"src": "2831:242:1",
										"text": " @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`."
									},
									"id": 202,
									"name": "initializer",
									"nameLocation": "3087:11:1",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 148,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3098:2:1"
									},
									"src": "3078:506:1",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 234,
										"nodeType": "Block",
										"src": "4399:255:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 213,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 209,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "!",
																"prefix": true,
																"src": "4417:14:1",
																"subExpression": {
																	"id": 208,
																	"name": "_initializing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 141,
																	"src": "4418:13:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																},
																"id": 212,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 210,
																	"name": "_initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 138,
																	"src": "4435:12:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 211,
																	"name": "version",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 205,
																	"src": "4450:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"src": "4435:22:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "4417:40:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564",
															"id": 214,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4459:48:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759",
																"typeString": "literal_string \"Initializable: contract is already initialized\""
															},
															"value": "Initializable: contract is already initialized"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759",
																"typeString": "literal_string \"Initializable: contract is already initialized\""
															}
														],
														"id": 207,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4409:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 215,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4409:99:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 216,
												"nodeType": "ExpressionStatement",
												"src": "4409:99:1"
											},
											{
												"expression": {
													"id": 219,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 217,
														"name": "_initialized",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 138,
														"src": "4518:12:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 218,
														"name": "version",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 205,
														"src": "4533:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"src": "4518:22:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"id": 220,
												"nodeType": "ExpressionStatement",
												"src": "4518:22:1"
											},
											{
												"expression": {
													"id": 223,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 221,
														"name": "_initializing",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 141,
														"src": "4550:13:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 222,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4566:4:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "4550:20:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 224,
												"nodeType": "ExpressionStatement",
												"src": "4550:20:1"
											},
											{
												"id": 225,
												"nodeType": "PlaceholderStatement",
												"src": "4580:1:1"
											},
											{
												"expression": {
													"id": 228,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 226,
														"name": "_initializing",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 141,
														"src": "4591:13:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "66616c7365",
														"id": 227,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4607:5:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "4591:21:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 229,
												"nodeType": "ExpressionStatement",
												"src": "4591:21:1"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 231,
															"name": "version",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 205,
															"src": "4639:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														],
														"id": 230,
														"name": "Initialized",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 146,
														"src": "4627:11:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint8_$returns$__$",
															"typeString": "function (uint8)"
														}
													},
													"id": 232,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4627:20:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 233,
												"nodeType": "EmitStatement",
												"src": "4622:25:1"
											}
										]
									},
									"documentation": {
										"id": 203,
										"nodeType": "StructuredDocumentation",
										"src": "3590:766:1",
										"text": " @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n used to initialize parent contracts.\n `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n initialization step. This is essential to configure modules that are added through upgrades and that require\n initialization.\n Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n a contract, executing them in the right order is up to the developer or operator."
									},
									"id": 235,
									"name": "reinitializer",
									"nameLocation": "4370:13:1",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 206,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 205,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "4390:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 235,
												"src": "4384:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 204,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "4384:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4383:15:1"
									},
									"src": "4361:293:1",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 244,
										"nodeType": "Block",
										"src": "4892:97:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 239,
															"name": "_initializing",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 141,
															"src": "4910:13:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e697469616c697a61626c653a20636f6e7472616374206973206e6f7420696e697469616c697a696e67",
															"id": 240,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4925:45:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b",
																"typeString": "literal_string \"Initializable: contract is not initializing\""
															},
															"value": "Initializable: contract is not initializing"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b",
																"typeString": "literal_string \"Initializable: contract is not initializing\""
															}
														],
														"id": 238,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4902:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 241,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4902:69:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 242,
												"nodeType": "ExpressionStatement",
												"src": "4902:69:1"
											},
											{
												"id": 243,
												"nodeType": "PlaceholderStatement",
												"src": "4981:1:1"
											}
										]
									},
									"documentation": {
										"id": 236,
										"nodeType": "StructuredDocumentation",
										"src": "4660:199:1",
										"text": " @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n {initializer} and {reinitializer} modifiers, directly or indirectly."
									},
									"id": 245,
									"name": "onlyInitializing",
									"nameLocation": "4873:16:1",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 237,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4889:2:1"
									},
									"src": "4864:125:1",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 280,
										"nodeType": "Block",
										"src": "5437:230:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 251,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "!",
															"prefix": true,
															"src": "5455:14:1",
															"subExpression": {
																"id": 250,
																"name": "_initializing",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 141,
																"src": "5456:13:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e697469616c697a61626c653a20636f6e747261637420697320696e697469616c697a696e67",
															"id": 252,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5471:41:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a",
																"typeString": "literal_string \"Initializable: contract is initializing\""
															},
															"value": "Initializable: contract is initializing"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a",
																"typeString": "literal_string \"Initializable: contract is initializing\""
															}
														],
														"id": 249,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5447:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 253,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5447:66:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 254,
												"nodeType": "ExpressionStatement",
												"src": "5447:66:1"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													},
													"id": 261,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 255,
														"name": "_initialized",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 138,
														"src": "5527:12:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 258,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "5547:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint8_$",
																		"typeString": "type(uint8)"
																	},
																	"typeName": {
																		"id": 257,
																		"name": "uint8",
																		"nodeType": "ElementaryTypeName",
																		"src": "5547:5:1",
																		"typeDescriptions": {}
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_uint8_$",
																		"typeString": "type(uint8)"
																	}
																],
																"id": 256,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "5542:4:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 259,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5542:11:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_uint8",
																"typeString": "type(uint8)"
															}
														},
														"id": 260,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberName": "max",
														"nodeType": "MemberAccess",
														"src": "5542:15:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"src": "5527:30:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 279,
												"nodeType": "IfStatement",
												"src": "5523:138:1",
												"trueBody": {
													"id": 278,
													"nodeType": "Block",
													"src": "5559:102:1",
													"statements": [
														{
															"expression": {
																"id": 268,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 262,
																	"name": "_initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 138,
																	"src": "5573:12:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"expression": {
																		"arguments": [
																			{
																				"id": 265,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "5593:5:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint8_$",
																					"typeString": "type(uint8)"
																				},
																				"typeName": {
																					"id": 264,
																					"name": "uint8",
																					"nodeType": "ElementaryTypeName",
																					"src": "5593:5:1",
																					"typeDescriptions": {}
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_type$_t_uint8_$",
																					"typeString": "type(uint8)"
																				}
																			],
																			"id": 263,
																			"name": "type",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967269,
																			"src": "5588:4:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																				"typeString": "function () pure"
																			}
																		},
																		"id": 266,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5588:11:1",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_meta_type_t_uint8",
																			"typeString": "type(uint8)"
																		}
																	},
																	"id": 267,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberName": "max",
																	"nodeType": "MemberAccess",
																	"src": "5588:15:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"src": "5573:30:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"id": 269,
															"nodeType": "ExpressionStatement",
															"src": "5573:30:1"
														},
														{
															"eventCall": {
																"arguments": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"id": 273,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "5639:5:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_uint8_$",
																						"typeString": "type(uint8)"
																					},
																					"typeName": {
																						"id": 272,
																						"name": "uint8",
																						"nodeType": "ElementaryTypeName",
																						"src": "5639:5:1",
																						"typeDescriptions": {}
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_type$_t_uint8_$",
																						"typeString": "type(uint8)"
																					}
																				],
																				"id": 271,
																				"name": "type",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967269,
																				"src": "5634:4:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																					"typeString": "function () pure"
																				}
																			},
																			"id": 274,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "5634:11:1",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_meta_type_t_uint8",
																				"typeString": "type(uint8)"
																			}
																		},
																		"id": 275,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberName": "max",
																		"nodeType": "MemberAccess",
																		"src": "5634:15:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	],
																	"id": 270,
																	"name": "Initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 146,
																	"src": "5622:11:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_uint8_$returns$__$",
																		"typeString": "function (uint8)"
																	}
																},
																"id": 276,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5622:28:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 277,
															"nodeType": "EmitStatement",
															"src": "5617:33:1"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 246,
										"nodeType": "StructuredDocumentation",
										"src": "4995:388:1",
										"text": " @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n through proxies."
									},
									"id": 281,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_disableInitializers",
									"nameLocation": "5397:20:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 247,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5417:2:1"
									},
									"returnParameters": {
										"id": 248,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5437:0:1"
									},
									"scope": 282,
									"src": "5388:279:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 283,
							"src": "2383:3286:1",
							"usedErrors": []
						}
					],
					"src": "113:5557:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							1239
						],
						"ContextUpgradeable": [
							1281
						],
						"ERC20Upgradeable": [
							893
						],
						"IERC20MetadataUpgradeable": [
							996
						],
						"IERC20Upgradeable": [
							971
						],
						"Initializable": [
							282
						]
					},
					"id": 894,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 284,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "105:23:2"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol",
							"file": "./IERC20Upgradeable.sol",
							"id": 285,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 894,
							"sourceUnit": 972,
							"src": "130:33:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol",
							"file": "./extensions/IERC20MetadataUpgradeable.sol",
							"id": 286,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 894,
							"sourceUnit": 997,
							"src": "164:52:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol",
							"file": "../../utils/ContextUpgradeable.sol",
							"id": 287,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 894,
							"sourceUnit": 1282,
							"src": "217:44:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
							"file": "../../proxy/utils/Initializable.sol",
							"id": 288,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 894,
							"sourceUnit": 283,
							"src": "262:45:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 290,
										"name": "Initializable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 282,
										"src": "1511:13:2"
									},
									"id": 291,
									"nodeType": "InheritanceSpecifier",
									"src": "1511:13:2"
								},
								{
									"baseName": {
										"id": 292,
										"name": "ContextUpgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1281,
										"src": "1526:18:2"
									},
									"id": 293,
									"nodeType": "InheritanceSpecifier",
									"src": "1526:18:2"
								},
								{
									"baseName": {
										"id": 294,
										"name": "IERC20Upgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 971,
										"src": "1546:17:2"
									},
									"id": 295,
									"nodeType": "InheritanceSpecifier",
									"src": "1546:17:2"
								},
								{
									"baseName": {
										"id": 296,
										"name": "IERC20MetadataUpgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 996,
										"src": "1565:25:2"
									},
									"id": 297,
									"nodeType": "InheritanceSpecifier",
									"src": "1565:25:2"
								}
							],
							"canonicalName": "ERC20Upgradeable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 289,
								"nodeType": "StructuredDocumentation",
								"src": "309:1172:2",
								"text": " @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n For a generic mechanism see {ERC20PresetMinterPauser}.\n TIP: For a detailed writeup see our guide\n https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n We have followed general OpenZeppelin Contracts guidelines: functions revert\n instead returning `false` on failure. This behavior is nonetheless\n conventional and does not conflict with the expectations of ERC20\n applications.\n Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n This allows applications to reconstruct the allowance for all accounts just\n by listening to said events. Other implementations of the EIP may not emit\n these events, as it isn't required by the specification.\n Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n functions have been added to mitigate the well-known issues around setting\n allowances. See {IERC20-approve}."
							},
							"fullyImplemented": true,
							"id": 893,
							"linearizedBaseContracts": [
								893,
								996,
								971,
								1281,
								282
							],
							"name": "ERC20Upgradeable",
							"nameLocation": "1491:16:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 301,
									"mutability": "mutable",
									"name": "_balances",
									"nameLocation": "1633:9:2",
									"nodeType": "VariableDeclaration",
									"scope": 893,
									"src": "1597:45:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 300,
										"keyType": {
											"id": 298,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1605:7:2",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1597:27:2",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueType": {
											"id": 299,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1616:7:2",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 307,
									"mutability": "mutable",
									"name": "_allowances",
									"nameLocation": "1705:11:2",
									"nodeType": "VariableDeclaration",
									"scope": 893,
									"src": "1649:67:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
										"typeString": "mapping(address => mapping(address => uint256))"
									},
									"typeName": {
										"id": 306,
										"keyType": {
											"id": 302,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1657:7:2",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1649:47:2",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
											"typeString": "mapping(address => mapping(address => uint256))"
										},
										"valueType": {
											"id": 305,
											"keyType": {
												"id": 303,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1676:7:2",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"nodeType": "Mapping",
											"src": "1668:27:2",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
												"typeString": "mapping(address => uint256)"
											},
											"valueType": {
												"id": 304,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1687:7:2",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 309,
									"mutability": "mutable",
									"name": "_totalSupply",
									"nameLocation": "1739:12:2",
									"nodeType": "VariableDeclaration",
									"scope": 893,
									"src": "1723:28:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 308,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1723:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 311,
									"mutability": "mutable",
									"name": "_name",
									"nameLocation": "1773:5:2",
									"nodeType": "VariableDeclaration",
									"scope": 893,
									"src": "1758:20:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 310,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1758:6:2",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 313,
									"mutability": "mutable",
									"name": "_symbol",
									"nameLocation": "1799:7:2",
									"nodeType": "VariableDeclaration",
									"scope": 893,
									"src": "1784:22:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 312,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1784:6:2",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 328,
										"nodeType": "Block",
										"src": "2208:55:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 324,
															"name": "name_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 316,
															"src": "2241:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														{
															"id": 325,
															"name": "symbol_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 318,
															"src": "2248:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 323,
														"name": "__ERC20_init_unchained",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 347,
														"src": "2218:22:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (string memory,string memory)"
														}
													},
													"id": 326,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2218:38:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 327,
												"nodeType": "ExpressionStatement",
												"src": "2218:38:2"
											}
										]
									},
									"documentation": {
										"id": 314,
										"nodeType": "StructuredDocumentation",
										"src": "1813:298:2",
										"text": " @dev Sets the values for {name} and {symbol}.\n The default value of {decimals} is 18. To select a different value for\n {decimals} you should overload it.\n All two of these values are immutable: they can only be set once during\n construction."
									},
									"id": 329,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 321,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 320,
												"name": "onlyInitializing",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 245,
												"src": "2191:16:2"
											},
											"nodeType": "ModifierInvocation",
											"src": "2191:16:2"
										}
									],
									"name": "__ERC20_init",
									"nameLocation": "2125:12:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 319,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 316,
												"mutability": "mutable",
												"name": "name_",
												"nameLocation": "2152:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 329,
												"src": "2138:19:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 315,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2138:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 318,
												"mutability": "mutable",
												"name": "symbol_",
												"nameLocation": "2173:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 329,
												"src": "2159:21:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 317,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2159:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2137:44:2"
									},
									"returnParameters": {
										"id": 322,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2208:0:2"
									},
									"scope": 893,
									"src": "2116:147:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 346,
										"nodeType": "Block",
										"src": "2371:57:2",
										"statements": [
											{
												"expression": {
													"id": 340,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 338,
														"name": "_name",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 311,
														"src": "2381:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 339,
														"name": "name_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 331,
														"src": "2389:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "2381:13:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 341,
												"nodeType": "ExpressionStatement",
												"src": "2381:13:2"
											},
											{
												"expression": {
													"id": 344,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 342,
														"name": "_symbol",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 313,
														"src": "2404:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 343,
														"name": "symbol_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 333,
														"src": "2414:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "2404:17:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 345,
												"nodeType": "ExpressionStatement",
												"src": "2404:17:2"
											}
										]
									},
									"id": 347,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 336,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 335,
												"name": "onlyInitializing",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 245,
												"src": "2354:16:2"
											},
											"nodeType": "ModifierInvocation",
											"src": "2354:16:2"
										}
									],
									"name": "__ERC20_init_unchained",
									"nameLocation": "2278:22:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 334,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 331,
												"mutability": "mutable",
												"name": "name_",
												"nameLocation": "2315:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 347,
												"src": "2301:19:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 330,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2301:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 333,
												"mutability": "mutable",
												"name": "symbol_",
												"nameLocation": "2336:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 347,
												"src": "2322:21:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 332,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2322:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2300:44:2"
									},
									"returnParameters": {
										"id": 337,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2371:0:2"
									},
									"scope": 893,
									"src": "2269:159:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										983
									],
									"body": {
										"id": 356,
										"nodeType": "Block",
										"src": "2562:29:2",
										"statements": [
											{
												"expression": {
													"id": 354,
													"name": "_name",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 311,
													"src": "2579:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 353,
												"id": 355,
												"nodeType": "Return",
												"src": "2572:12:2"
											}
										]
									},
									"documentation": {
										"id": 348,
										"nodeType": "StructuredDocumentation",
										"src": "2434:54:2",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 357,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "2502:4:2",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 350,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2529:8:2"
									},
									"parameters": {
										"id": 349,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2506:2:2"
									},
									"returnParameters": {
										"id": 353,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 352,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 357,
												"src": "2547:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 351,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2547:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2546:15:2"
									},
									"scope": 893,
									"src": "2493:98:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										989
									],
									"body": {
										"id": 366,
										"nodeType": "Block",
										"src": "2775:31:2",
										"statements": [
											{
												"expression": {
													"id": 364,
													"name": "_symbol",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 313,
													"src": "2792:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 363,
												"id": 365,
												"nodeType": "Return",
												"src": "2785:14:2"
											}
										]
									},
									"documentation": {
										"id": 358,
										"nodeType": "StructuredDocumentation",
										"src": "2597:102:2",
										"text": " @dev Returns the symbol of the token, usually a shorter version of the\n name."
									},
									"functionSelector": "95d89b41",
									"id": 367,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "2713:6:2",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 360,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2742:8:2"
									},
									"parameters": {
										"id": 359,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2719:2:2"
									},
									"returnParameters": {
										"id": 363,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 362,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 367,
												"src": "2760:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 361,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2760:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2759:15:2"
									},
									"scope": 893,
									"src": "2704:102:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										995
									],
									"body": {
										"id": 376,
										"nodeType": "Block",
										"src": "3495:26:2",
										"statements": [
											{
												"expression": {
													"hexValue": "3138",
													"id": 374,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3512:2:2",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_18_by_1",
														"typeString": "int_const 18"
													},
													"value": "18"
												},
												"functionReturnParameters": 373,
												"id": 375,
												"nodeType": "Return",
												"src": "3505:9:2"
											}
										]
									},
									"documentation": {
										"id": 368,
										"nodeType": "StructuredDocumentation",
										"src": "2812:613:2",
										"text": " @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5.05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the value {ERC20} uses, unless this function is\n overridden;\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."
									},
									"functionSelector": "313ce567",
									"id": 377,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "3439:8:2",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 370,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3470:8:2"
									},
									"parameters": {
										"id": 369,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3447:2:2"
									},
									"returnParameters": {
										"id": 373,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 372,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 377,
												"src": "3488:5:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 371,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "3488:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3487:7:2"
									},
									"scope": 893,
									"src": "3430:91:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										920
									],
									"body": {
										"id": 386,
										"nodeType": "Block",
										"src": "3651:36:2",
										"statements": [
											{
												"expression": {
													"id": 384,
													"name": "_totalSupply",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 309,
													"src": "3668:12:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 383,
												"id": 385,
												"nodeType": "Return",
												"src": "3661:19:2"
											}
										]
									},
									"documentation": {
										"id": 378,
										"nodeType": "StructuredDocumentation",
										"src": "3527:49:2",
										"text": " @dev See {IERC20-totalSupply}."
									},
									"functionSelector": "18160ddd",
									"id": 387,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "3590:11:2",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 380,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3624:8:2"
									},
									"parameters": {
										"id": 379,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3601:2:2"
									},
									"returnParameters": {
										"id": 383,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 382,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 387,
												"src": "3642:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 381,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3642:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3641:9:2"
									},
									"scope": 893,
									"src": "3581:106:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										928
									],
									"body": {
										"id": 400,
										"nodeType": "Block",
										"src": "3828:42:2",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 396,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 301,
														"src": "3845:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 398,
													"indexExpression": {
														"id": 397,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 390,
														"src": "3855:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3845:18:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 395,
												"id": 399,
												"nodeType": "Return",
												"src": "3838:25:2"
											}
										]
									},
									"documentation": {
										"id": 388,
										"nodeType": "StructuredDocumentation",
										"src": "3693:47:2",
										"text": " @dev See {IERC20-balanceOf}."
									},
									"functionSelector": "70a08231",
									"id": 401,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "3754:9:2",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 392,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3801:8:2"
									},
									"parameters": {
										"id": 391,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 390,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "3772:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 401,
												"src": "3764:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 389,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3764:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3763:17:2"
									},
									"returnParameters": {
										"id": 395,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 394,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 401,
												"src": "3819:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 393,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3819:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3818:9:2"
									},
									"scope": 893,
									"src": "3745:125:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										938
									],
									"body": {
										"id": 425,
										"nodeType": "Block",
										"src": "4151:104:2",
										"statements": [
											{
												"assignments": [
													413
												],
												"declarations": [
													{
														"constant": false,
														"id": 413,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "4169:5:2",
														"nodeType": "VariableDeclaration",
														"scope": 425,
														"src": "4161:13:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 412,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4161:7:2",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 416,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 414,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1266,
														"src": "4177:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 415,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4177:12:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4161:28:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 418,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 413,
															"src": "4209:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 419,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 404,
															"src": "4216:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 420,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 406,
															"src": "4220:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 417,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 649,
														"src": "4199:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 421,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4199:28:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 422,
												"nodeType": "ExpressionStatement",
												"src": "4199:28:2"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 423,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4244:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 411,
												"id": 424,
												"nodeType": "Return",
												"src": "4237:11:2"
											}
										]
									},
									"documentation": {
										"id": 402,
										"nodeType": "StructuredDocumentation",
										"src": "3876:185:2",
										"text": " @dev See {IERC20-transfer}.\n Requirements:\n - `to` cannot be the zero address.\n - the caller must have a balance of at least `amount`."
									},
									"functionSelector": "a9059cbb",
									"id": 426,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "4075:8:2",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 408,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4127:8:2"
									},
									"parameters": {
										"id": 407,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 404,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "4092:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 426,
												"src": "4084:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 403,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4084:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 406,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "4104:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 426,
												"src": "4096:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 405,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4096:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4083:28:2"
									},
									"returnParameters": {
										"id": 411,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 410,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 426,
												"src": "4145:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 409,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4145:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4144:6:2"
									},
									"scope": 893,
									"src": "4066:189:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										948
									],
									"body": {
										"id": 443,
										"nodeType": "Block",
										"src": "4411:51:2",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"baseExpression": {
															"id": 437,
															"name": "_allowances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 307,
															"src": "4428:11:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																"typeString": "mapping(address => mapping(address => uint256))"
															}
														},
														"id": 439,
														"indexExpression": {
															"id": 438,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 429,
															"src": "4440:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "4428:18:2",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 441,
													"indexExpression": {
														"id": 440,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 431,
														"src": "4447:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "4428:27:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 436,
												"id": 442,
												"nodeType": "Return",
												"src": "4421:34:2"
											}
										]
									},
									"documentation": {
										"id": 427,
										"nodeType": "StructuredDocumentation",
										"src": "4261:47:2",
										"text": " @dev See {IERC20-allowance}."
									},
									"functionSelector": "dd62ed3e",
									"id": 444,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "4322:9:2",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 433,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4384:8:2"
									},
									"parameters": {
										"id": 432,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 429,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "4340:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 444,
												"src": "4332:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 428,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4332:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 431,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4355:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 444,
												"src": "4347:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 430,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4347:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4331:32:2"
									},
									"returnParameters": {
										"id": 436,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 435,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 444,
												"src": "4402:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 434,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4402:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4401:9:2"
									},
									"scope": 893,
									"src": "4313:149:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										958
									],
									"body": {
										"id": 468,
										"nodeType": "Block",
										"src": "4859:108:2",
										"statements": [
											{
												"assignments": [
													456
												],
												"declarations": [
													{
														"constant": false,
														"id": 456,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "4877:5:2",
														"nodeType": "VariableDeclaration",
														"scope": 468,
														"src": "4869:13:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 455,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4869:7:2",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 459,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 457,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1266,
														"src": "4885:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 458,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4885:12:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4869:28:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 461,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 456,
															"src": "4916:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 462,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 447,
															"src": "4923:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 463,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 449,
															"src": "4932:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 460,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 822,
														"src": "4907:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 464,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4907:32:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 465,
												"nodeType": "ExpressionStatement",
												"src": "4907:32:2"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 466,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4956:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 454,
												"id": 467,
												"nodeType": "Return",
												"src": "4949:11:2"
											}
										]
									},
									"documentation": {
										"id": 445,
										"nodeType": "StructuredDocumentation",
										"src": "4468:297:2",
										"text": " @dev See {IERC20-approve}.\n NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n `transferFrom`. This is semantically equivalent to an infinite approval.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "095ea7b3",
									"id": 469,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "4779:7:2",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 451,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4835:8:2"
									},
									"parameters": {
										"id": 450,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 447,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4795:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 469,
												"src": "4787:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 446,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4787:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 449,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "4812:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 469,
												"src": "4804:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 448,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4804:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4786:33:2"
									},
									"returnParameters": {
										"id": 454,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 453,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 469,
												"src": "4853:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 452,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4853:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4852:6:2"
									},
									"scope": 893,
									"src": "4770:197:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										970
									],
									"body": {
										"id": 501,
										"nodeType": "Block",
										"src": "5662:153:2",
										"statements": [
											{
												"assignments": [
													483
												],
												"declarations": [
													{
														"constant": false,
														"id": 483,
														"mutability": "mutable",
														"name": "spender",
														"nameLocation": "5680:7:2",
														"nodeType": "VariableDeclaration",
														"scope": 501,
														"src": "5672:15:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 482,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "5672:7:2",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 486,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 484,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1266,
														"src": "5690:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 485,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5690:12:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5672:30:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 488,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 472,
															"src": "5728:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 489,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 483,
															"src": "5734:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 490,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 476,
															"src": "5743:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 487,
														"name": "_spendAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 865,
														"src": "5712:15:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 491,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5712:38:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 492,
												"nodeType": "ExpressionStatement",
												"src": "5712:38:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 494,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 472,
															"src": "5770:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 495,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 474,
															"src": "5776:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 496,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 476,
															"src": "5780:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 493,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 649,
														"src": "5760:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 497,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5760:27:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 498,
												"nodeType": "ExpressionStatement",
												"src": "5760:27:2"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 499,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "5804:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 481,
												"id": 500,
												"nodeType": "Return",
												"src": "5797:11:2"
											}
										]
									},
									"documentation": {
										"id": 470,
										"nodeType": "StructuredDocumentation",
										"src": "4973:551:2",
										"text": " @dev See {IERC20-transferFrom}.\n Emits an {Approval} event indicating the updated allowance. This is not\n required by the EIP. See the note at the beginning of {ERC20}.\n NOTE: Does not update the allowance if the current allowance\n is the maximum `uint256`.\n Requirements:\n - `from` and `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`.\n - the caller must have allowance for ``from``'s tokens of at least\n `amount`."
									},
									"functionSelector": "23b872dd",
									"id": 502,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "5538:12:2",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 478,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "5638:8:2"
									},
									"parameters": {
										"id": 477,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 472,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "5568:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 502,
												"src": "5560:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 471,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5560:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 474,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "5590:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 502,
												"src": "5582:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 473,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5582:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 476,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "5610:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 502,
												"src": "5602:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 475,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5602:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5550:72:2"
									},
									"returnParameters": {
										"id": 481,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 480,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 502,
												"src": "5656:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 479,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5656:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5655:6:2"
									},
									"scope": 893,
									"src": "5529:286:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 530,
										"nodeType": "Block",
										"src": "6304:140:2",
										"statements": [
											{
												"assignments": [
													513
												],
												"declarations": [
													{
														"constant": false,
														"id": 513,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "6322:5:2",
														"nodeType": "VariableDeclaration",
														"scope": 530,
														"src": "6314:13:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 512,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "6314:7:2",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 516,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 514,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1266,
														"src": "6330:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 515,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6330:12:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6314:28:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 518,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 513,
															"src": "6361:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 519,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 505,
															"src": "6368:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 525,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"id": 521,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 513,
																		"src": "6387:5:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 522,
																		"name": "spender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 505,
																		"src": "6394:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 520,
																	"name": "allowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 444,
																	"src": "6377:9:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
																		"typeString": "function (address,address) view returns (uint256)"
																	}
																},
																"id": 523,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6377:25:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 524,
																"name": "addedValue",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 507,
																"src": "6405:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6377:38:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 517,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 822,
														"src": "6352:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 526,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6352:64:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 527,
												"nodeType": "ExpressionStatement",
												"src": "6352:64:2"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 528,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "6433:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 511,
												"id": 529,
												"nodeType": "Return",
												"src": "6426:11:2"
											}
										]
									},
									"documentation": {
										"id": 503,
										"nodeType": "StructuredDocumentation",
										"src": "5821:384:2",
										"text": " @dev Atomically increases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "39509351",
									"id": 531,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "increaseAllowance",
									"nameLocation": "6219:17:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 508,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 505,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "6245:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 531,
												"src": "6237:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 504,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6237:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 507,
												"mutability": "mutable",
												"name": "addedValue",
												"nameLocation": "6262:10:2",
												"nodeType": "VariableDeclaration",
												"scope": 531,
												"src": "6254:18:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 506,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6254:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6236:37:2"
									},
									"returnParameters": {
										"id": 511,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 510,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 531,
												"src": "6298:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 509,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6298:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6297:6:2"
									},
									"scope": 893,
									"src": "6210:234:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 571,
										"nodeType": "Block",
										"src": "7030:328:2",
										"statements": [
											{
												"assignments": [
													542
												],
												"declarations": [
													{
														"constant": false,
														"id": 542,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "7048:5:2",
														"nodeType": "VariableDeclaration",
														"scope": 571,
														"src": "7040:13:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 541,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "7040:7:2",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 545,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 543,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1266,
														"src": "7056:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 544,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7056:12:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7040:28:2"
											},
											{
												"assignments": [
													547
												],
												"declarations": [
													{
														"constant": false,
														"id": 547,
														"mutability": "mutable",
														"name": "currentAllowance",
														"nameLocation": "7086:16:2",
														"nodeType": "VariableDeclaration",
														"scope": 571,
														"src": "7078:24:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 546,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "7078:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 552,
												"initialValue": {
													"arguments": [
														{
															"id": 549,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 542,
															"src": "7115:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 550,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 534,
															"src": "7122:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 548,
														"name": "allowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 444,
														"src": "7105:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view returns (uint256)"
														}
													},
													"id": 551,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7105:25:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7078:52:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 556,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 554,
																"name": "currentAllowance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 547,
																"src": "7148:16:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 555,
																"name": "subtractedValue",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 536,
																"src": "7168:15:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7148:35:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
															"id": 557,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7185:39:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
																"typeString": "literal_string \"ERC20: decreased allowance below zero\""
															},
															"value": "ERC20: decreased allowance below zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
																"typeString": "literal_string \"ERC20: decreased allowance below zero\""
															}
														],
														"id": 553,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7140:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 558,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7140:85:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 559,
												"nodeType": "ExpressionStatement",
												"src": "7140:85:2"
											},
											{
												"id": 568,
												"nodeType": "UncheckedBlock",
												"src": "7235:95:2",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"id": 561,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 542,
																	"src": "7268:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 562,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 534,
																	"src": "7275:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 565,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 563,
																		"name": "currentAllowance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 547,
																		"src": "7284:16:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 564,
																		"name": "subtractedValue",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 536,
																		"src": "7303:15:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7284:34:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 560,
																"name": "_approve",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 822,
																"src": "7259:8:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																	"typeString": "function (address,address,uint256)"
																}
															},
															"id": 566,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7259:60:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 567,
														"nodeType": "ExpressionStatement",
														"src": "7259:60:2"
													}
												]
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 569,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "7347:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 540,
												"id": 570,
												"nodeType": "Return",
												"src": "7340:11:2"
											}
										]
									},
									"documentation": {
										"id": 532,
										"nodeType": "StructuredDocumentation",
										"src": "6450:476:2",
										"text": " @dev Atomically decreases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address.\n - `spender` must have allowance for the caller of at least\n `subtractedValue`."
									},
									"functionSelector": "a457c2d7",
									"id": 572,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decreaseAllowance",
									"nameLocation": "6940:17:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 537,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 534,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "6966:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 572,
												"src": "6958:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 533,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6958:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 536,
												"mutability": "mutable",
												"name": "subtractedValue",
												"nameLocation": "6983:15:2",
												"nodeType": "VariableDeclaration",
												"scope": 572,
												"src": "6975:23:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 535,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6975:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6957:42:2"
									},
									"returnParameters": {
										"id": 540,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 539,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 572,
												"src": "7024:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 538,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7024:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7023:6:2"
									},
									"scope": 893,
									"src": "6931:427:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 648,
										"nodeType": "Block",
										"src": "7920:543:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 588,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 583,
																"name": "from",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 575,
																"src": "7938:4:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 586,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "7954:1:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 585,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "7946:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 584,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "7946:7:2",
																		"typeDescriptions": {}
																	}
																},
																"id": 587,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7946:10:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "7938:18:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e736665722066726f6d20746865207a65726f2061646472657373",
															"id": 589,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7958:39:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
																"typeString": "literal_string \"ERC20: transfer from the zero address\""
															},
															"value": "ERC20: transfer from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
																"typeString": "literal_string \"ERC20: transfer from the zero address\""
															}
														],
														"id": 582,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7930:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 590,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7930:68:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 591,
												"nodeType": "ExpressionStatement",
												"src": "7930:68:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 598,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 593,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 577,
																"src": "8016:2:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 596,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "8030:1:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 595,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "8022:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 594,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "8022:7:2",
																		"typeDescriptions": {}
																	}
																},
																"id": 597,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8022:10:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "8016:16:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e7366657220746f20746865207a65726f2061646472657373",
															"id": 599,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8034:37:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
																"typeString": "literal_string \"ERC20: transfer to the zero address\""
															},
															"value": "ERC20: transfer to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
																"typeString": "literal_string \"ERC20: transfer to the zero address\""
															}
														],
														"id": 592,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8008:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 600,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8008:64:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 601,
												"nodeType": "ExpressionStatement",
												"src": "8008:64:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 603,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 575,
															"src": "8104:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 604,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 577,
															"src": "8110:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 605,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 579,
															"src": "8114:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 602,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 876,
														"src": "8083:20:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 606,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8083:38:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 607,
												"nodeType": "ExpressionStatement",
												"src": "8083:38:2"
											},
											{
												"assignments": [
													609
												],
												"declarations": [
													{
														"constant": false,
														"id": 609,
														"mutability": "mutable",
														"name": "fromBalance",
														"nameLocation": "8140:11:2",
														"nodeType": "VariableDeclaration",
														"scope": 648,
														"src": "8132:19:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 608,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8132:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 613,
												"initialValue": {
													"baseExpression": {
														"id": 610,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 301,
														"src": "8154:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 612,
													"indexExpression": {
														"id": 611,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 575,
														"src": "8164:4:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "8154:15:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8132:37:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 617,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 615,
																"name": "fromBalance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 609,
																"src": "8187:11:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 616,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 579,
																"src": "8202:6:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "8187:21:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365",
															"id": 618,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8210:40:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
																"typeString": "literal_string \"ERC20: transfer amount exceeds balance\""
															},
															"value": "ERC20: transfer amount exceeds balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
																"typeString": "literal_string \"ERC20: transfer amount exceeds balance\""
															}
														],
														"id": 614,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8179:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 619,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8179:72:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 620,
												"nodeType": "ExpressionStatement",
												"src": "8179:72:2"
											},
											{
												"id": 629,
												"nodeType": "UncheckedBlock",
												"src": "8261:73:2",
												"statements": [
													{
														"expression": {
															"id": 627,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 621,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 301,
																	"src": "8285:9:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 623,
																"indexExpression": {
																	"id": 622,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 575,
																	"src": "8295:4:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "8285:15:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 626,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 624,
																	"name": "fromBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 609,
																	"src": "8303:11:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 625,
																	"name": "amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 579,
																	"src": "8317:6:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "8303:20:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "8285:38:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 628,
														"nodeType": "ExpressionStatement",
														"src": "8285:38:2"
													}
												]
											},
											{
												"expression": {
													"id": 634,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 630,
															"name": "_balances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 301,
															"src": "8343:9:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 632,
														"indexExpression": {
															"id": 631,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 577,
															"src": "8353:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "8343:13:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 633,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 579,
														"src": "8360:6:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8343:23:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 635,
												"nodeType": "ExpressionStatement",
												"src": "8343:23:2"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 637,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 575,
															"src": "8391:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 638,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 577,
															"src": "8397:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 639,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 579,
															"src": "8401:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 636,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 905,
														"src": "8382:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 640,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8382:26:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 641,
												"nodeType": "EmitStatement",
												"src": "8377:31:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 643,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 575,
															"src": "8439:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 644,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 577,
															"src": "8445:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 645,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 579,
															"src": "8449:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 642,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 887,
														"src": "8419:19:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 646,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8419:37:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 647,
												"nodeType": "ExpressionStatement",
												"src": "8419:37:2"
											}
										]
									},
									"documentation": {
										"id": 573,
										"nodeType": "StructuredDocumentation",
										"src": "7364:443:2",
										"text": " @dev Moves `amount` of tokens from `from` to `to`.\n This internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`."
									},
									"id": 649,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transfer",
									"nameLocation": "7821:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 580,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 575,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "7848:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 649,
												"src": "7840:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 574,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7840:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 577,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "7870:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 649,
												"src": "7862:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 576,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7862:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 579,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "7890:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 649,
												"src": "7882:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 578,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7882:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7830:72:2"
									},
									"returnParameters": {
										"id": 581,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7920:0:2"
									},
									"scope": 893,
									"src": "7812:651:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 704,
										"nodeType": "Block",
										"src": "8804:324:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 663,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 658,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 652,
																"src": "8822:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 661,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "8841:1:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 660,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "8833:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 659,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "8833:7:2",
																		"typeDescriptions": {}
																	}
																},
																"id": 662,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8833:10:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "8822:21:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206d696e7420746f20746865207a65726f2061646472657373",
															"id": 664,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8845:33:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
																"typeString": "literal_string \"ERC20: mint to the zero address\""
															},
															"value": "ERC20: mint to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
																"typeString": "literal_string \"ERC20: mint to the zero address\""
															}
														],
														"id": 657,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8814:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 665,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8814:65:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 666,
												"nodeType": "ExpressionStatement",
												"src": "8814:65:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 670,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8919:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 669,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8911:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 668,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8911:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 671,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8911:10:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 672,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 652,
															"src": "8923:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 673,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 654,
															"src": "8932:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 667,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 876,
														"src": "8890:20:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 674,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8890:49:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 675,
												"nodeType": "ExpressionStatement",
												"src": "8890:49:2"
											},
											{
												"expression": {
													"id": 678,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 676,
														"name": "_totalSupply",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 309,
														"src": "8950:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 677,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 654,
														"src": "8966:6:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8950:22:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 679,
												"nodeType": "ExpressionStatement",
												"src": "8950:22:2"
											},
											{
												"expression": {
													"id": 684,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 680,
															"name": "_balances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 301,
															"src": "8982:9:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 682,
														"indexExpression": {
															"id": 681,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 652,
															"src": "8992:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "8982:18:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 683,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 654,
														"src": "9004:6:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8982:28:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 685,
												"nodeType": "ExpressionStatement",
												"src": "8982:28:2"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 689,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9042:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 688,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9034:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 687,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9034:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 690,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9034:10:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 691,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 652,
															"src": "9046:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 692,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 654,
															"src": "9055:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 686,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 905,
														"src": "9025:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 693,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9025:37:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 694,
												"nodeType": "EmitStatement",
												"src": "9020:42:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 698,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9101:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 697,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9093:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 696,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9093:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 699,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9093:10:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 700,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 652,
															"src": "9105:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 701,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 654,
															"src": "9114:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 695,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 887,
														"src": "9073:19:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 702,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9073:48:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 703,
												"nodeType": "ExpressionStatement",
												"src": "9073:48:2"
											}
										]
									},
									"documentation": {
										"id": 650,
										"nodeType": "StructuredDocumentation",
										"src": "8469:265:2",
										"text": "@dev Creates `amount` tokens and assigns them to `account`, increasing\n the total supply.\n Emits a {Transfer} event with `from` set to the zero address.\n Requirements:\n - `account` cannot be the zero address."
									},
									"id": 705,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_mint",
									"nameLocation": "8748:5:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 655,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 652,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "8762:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 705,
												"src": "8754:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 651,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8754:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 654,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "8779:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 705,
												"src": "8771:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 653,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8771:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8753:33:2"
									},
									"returnParameters": {
										"id": 656,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8804:0:2"
									},
									"scope": 893,
									"src": "8739:389:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 776,
										"nodeType": "Block",
										"src": "9513:511:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 719,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 714,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 708,
																"src": "9531:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 717,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "9550:1:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 716,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "9542:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 715,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "9542:7:2",
																		"typeDescriptions": {}
																	}
																},
																"id": 718,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9542:10:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "9531:21:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206275726e2066726f6d20746865207a65726f2061646472657373",
															"id": 720,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9554:35:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f",
																"typeString": "literal_string \"ERC20: burn from the zero address\""
															},
															"value": "ERC20: burn from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f",
																"typeString": "literal_string \"ERC20: burn from the zero address\""
															}
														],
														"id": 713,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9523:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 721,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9523:67:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 722,
												"nodeType": "ExpressionStatement",
												"src": "9523:67:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 724,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 708,
															"src": "9622:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 727,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9639:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 726,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9631:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 725,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9631:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 728,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9631:10:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 729,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 710,
															"src": "9643:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 723,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 876,
														"src": "9601:20:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 730,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9601:49:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 731,
												"nodeType": "ExpressionStatement",
												"src": "9601:49:2"
											},
											{
												"assignments": [
													733
												],
												"declarations": [
													{
														"constant": false,
														"id": 733,
														"mutability": "mutable",
														"name": "accountBalance",
														"nameLocation": "9669:14:2",
														"nodeType": "VariableDeclaration",
														"scope": 776,
														"src": "9661:22:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 732,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9661:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 737,
												"initialValue": {
													"baseExpression": {
														"id": 734,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 301,
														"src": "9686:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 736,
													"indexExpression": {
														"id": 735,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 708,
														"src": "9696:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "9686:18:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9661:43:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 741,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 739,
																"name": "accountBalance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 733,
																"src": "9722:14:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 740,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 710,
																"src": "9740:6:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9722:24:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206275726e20616d6f756e7420657863656564732062616c616e6365",
															"id": 742,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9748:36:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd",
																"typeString": "literal_string \"ERC20: burn amount exceeds balance\""
															},
															"value": "ERC20: burn amount exceeds balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd",
																"typeString": "literal_string \"ERC20: burn amount exceeds balance\""
															}
														],
														"id": 738,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9714:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 743,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9714:71:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 744,
												"nodeType": "ExpressionStatement",
												"src": "9714:71:2"
											},
											{
												"id": 753,
												"nodeType": "UncheckedBlock",
												"src": "9795:79:2",
												"statements": [
													{
														"expression": {
															"id": 751,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 745,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 301,
																	"src": "9819:9:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 747,
																"indexExpression": {
																	"id": 746,
																	"name": "account",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 708,
																	"src": "9829:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "9819:18:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 750,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 748,
																	"name": "accountBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 733,
																	"src": "9840:14:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 749,
																	"name": "amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 710,
																	"src": "9857:6:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "9840:23:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9819:44:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 752,
														"nodeType": "ExpressionStatement",
														"src": "9819:44:2"
													}
												]
											},
											{
												"expression": {
													"id": 756,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 754,
														"name": "_totalSupply",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 309,
														"src": "9883:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "-=",
													"rightHandSide": {
														"id": 755,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 710,
														"src": "9899:6:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9883:22:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 757,
												"nodeType": "ExpressionStatement",
												"src": "9883:22:2"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 759,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 708,
															"src": "9930:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 762,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9947:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 761,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9939:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 760,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9939:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 763,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9939:10:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 764,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 710,
															"src": "9951:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 758,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 905,
														"src": "9921:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 765,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9921:37:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 766,
												"nodeType": "EmitStatement",
												"src": "9916:42:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 768,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 708,
															"src": "9989:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 771,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10006:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 770,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9998:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 769,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9998:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 772,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9998:10:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 773,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 710,
															"src": "10010:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 767,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 887,
														"src": "9969:19:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 774,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9969:48:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 775,
												"nodeType": "ExpressionStatement",
												"src": "9969:48:2"
											}
										]
									},
									"documentation": {
										"id": 706,
										"nodeType": "StructuredDocumentation",
										"src": "9134:309:2",
										"text": " @dev Destroys `amount` tokens from `account`, reducing the\n total supply.\n Emits a {Transfer} event with `to` set to the zero address.\n Requirements:\n - `account` cannot be the zero address.\n - `account` must have at least `amount` tokens."
									},
									"id": 777,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_burn",
									"nameLocation": "9457:5:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 711,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 708,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "9471:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 777,
												"src": "9463:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 707,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9463:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 710,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "9488:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 777,
												"src": "9480:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 709,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9480:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9462:33:2"
									},
									"returnParameters": {
										"id": 712,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9513:0:2"
									},
									"scope": 893,
									"src": "9448:576:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 821,
										"nodeType": "Block",
										"src": "10560:257:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 793,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 788,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 780,
																"src": "10578:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 791,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "10595:1:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 790,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "10587:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 789,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "10587:7:2",
																		"typeDescriptions": {}
																	}
																},
																"id": 792,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10587:10:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "10578:19:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373",
															"id": 794,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10599:38:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
																"typeString": "literal_string \"ERC20: approve from the zero address\""
															},
															"value": "ERC20: approve from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
																"typeString": "literal_string \"ERC20: approve from the zero address\""
															}
														],
														"id": 787,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "10570:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 795,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10570:68:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 796,
												"nodeType": "ExpressionStatement",
												"src": "10570:68:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 803,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 798,
																"name": "spender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 782,
																"src": "10656:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 801,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "10675:1:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 800,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "10667:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 799,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "10667:7:2",
																		"typeDescriptions": {}
																	}
																},
																"id": 802,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10667:10:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "10656:21:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a20617070726f766520746f20746865207a65726f2061646472657373",
															"id": 804,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10679:36:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
																"typeString": "literal_string \"ERC20: approve to the zero address\""
															},
															"value": "ERC20: approve to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
																"typeString": "literal_string \"ERC20: approve to the zero address\""
															}
														],
														"id": 797,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "10648:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 805,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10648:68:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 806,
												"nodeType": "ExpressionStatement",
												"src": "10648:68:2"
											},
											{
												"expression": {
													"id": 813,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 807,
																"name": "_allowances",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 307,
																"src": "10727:11:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																	"typeString": "mapping(address => mapping(address => uint256))"
																}
															},
															"id": 810,
															"indexExpression": {
																"id": 808,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 780,
																"src": "10739:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "10727:18:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 811,
														"indexExpression": {
															"id": 809,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 782,
															"src": "10746:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "10727:27:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 812,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 784,
														"src": "10757:6:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10727:36:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 814,
												"nodeType": "ExpressionStatement",
												"src": "10727:36:2"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 816,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 780,
															"src": "10787:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 817,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 782,
															"src": "10794:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 818,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 784,
															"src": "10803:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 815,
														"name": "Approval",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 914,
														"src": "10778:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 819,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10778:32:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 820,
												"nodeType": "EmitStatement",
												"src": "10773:37:2"
											}
										]
									},
									"documentation": {
										"id": 778,
										"nodeType": "StructuredDocumentation",
										"src": "10030:412:2",
										"text": " @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address."
									},
									"id": 822,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "10456:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 785,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 780,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "10482:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 822,
												"src": "10474:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 779,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10474:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 782,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "10505:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 822,
												"src": "10497:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 781,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10497:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 784,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "10530:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 822,
												"src": "10522:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 783,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10522:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10464:78:2"
									},
									"returnParameters": {
										"id": 786,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10560:0:2"
									},
									"scope": 893,
									"src": "10447:370:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 864,
										"nodeType": "Block",
										"src": "11218:321:2",
										"statements": [
											{
												"assignments": [
													833
												],
												"declarations": [
													{
														"constant": false,
														"id": 833,
														"mutability": "mutable",
														"name": "currentAllowance",
														"nameLocation": "11236:16:2",
														"nodeType": "VariableDeclaration",
														"scope": 864,
														"src": "11228:24:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 832,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "11228:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 838,
												"initialValue": {
													"arguments": [
														{
															"id": 835,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 825,
															"src": "11265:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 836,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 827,
															"src": "11272:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 834,
														"name": "allowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 444,
														"src": "11255:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view returns (uint256)"
														}
													},
													"id": 837,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11255:25:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "11228:52:2"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 845,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 839,
														"name": "currentAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 833,
														"src": "11294:16:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 842,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "11319:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 841,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "11319:7:2",
																		"typeDescriptions": {}
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	}
																],
																"id": 840,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "11314:4:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 843,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11314:13:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_uint256",
																"typeString": "type(uint256)"
															}
														},
														"id": 844,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberName": "max",
														"nodeType": "MemberAccess",
														"src": "11314:17:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "11294:37:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 863,
												"nodeType": "IfStatement",
												"src": "11290:243:2",
												"trueBody": {
													"id": 862,
													"nodeType": "Block",
													"src": "11333:200:2",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 849,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 847,
																			"name": "currentAllowance",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 833,
																			"src": "11355:16:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">=",
																		"rightExpression": {
																			"id": 848,
																			"name": "amount",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 829,
																			"src": "11375:6:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "11355:26:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "45524332303a20696e73756666696369656e7420616c6c6f77616e6365",
																		"id": 850,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "11383:31:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe",
																			"typeString": "literal_string \"ERC20: insufficient allowance\""
																		},
																		"value": "ERC20: insufficient allowance"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe",
																			"typeString": "literal_string \"ERC20: insufficient allowance\""
																		}
																	],
																	"id": 846,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "11347:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 851,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "11347:68:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 852,
															"nodeType": "ExpressionStatement",
															"src": "11347:68:2"
														},
														{
															"id": 861,
															"nodeType": "UncheckedBlock",
															"src": "11429:94:2",
															"statements": [
																{
																	"expression": {
																		"arguments": [
																			{
																				"id": 854,
																				"name": "owner",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 825,
																				"src": "11466:5:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"id": 855,
																				"name": "spender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 827,
																				"src": "11473:7:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 858,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 856,
																					"name": "currentAllowance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 833,
																					"src": "11482:16:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "-",
																				"rightExpression": {
																					"id": 857,
																					"name": "amount",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 829,
																					"src": "11501:6:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "11482:25:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 853,
																			"name": "_approve",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 822,
																			"src": "11457:8:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																				"typeString": "function (address,address,uint256)"
																			}
																		},
																		"id": 859,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "11457:51:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 860,
																	"nodeType": "ExpressionStatement",
																	"src": "11457:51:2"
																}
															]
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 823,
										"nodeType": "StructuredDocumentation",
										"src": "10823:270:2",
										"text": " @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n Does not update the allowance amount in case of infinite allowance.\n Revert if not enough allowance is available.\n Might emit an {Approval} event."
									},
									"id": 865,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_spendAllowance",
									"nameLocation": "11107:15:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 830,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 825,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "11140:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 865,
												"src": "11132:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 824,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11132:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 827,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "11163:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 865,
												"src": "11155:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 826,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11155:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 829,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "11188:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 865,
												"src": "11180:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 828,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11180:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11122:78:2"
									},
									"returnParameters": {
										"id": 831,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11218:0:2"
									},
									"scope": 893,
									"src": "11098:441:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 875,
										"nodeType": "Block",
										"src": "12242:2:2",
										"statements": []
									},
									"documentation": {
										"id": 866,
										"nodeType": "StructuredDocumentation",
										"src": "11545:573:2",
										"text": " @dev Hook that is called before any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n will be transferred to `to`.\n - when `from` is zero, `amount` tokens will be minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
									},
									"id": 876,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_beforeTokenTransfer",
									"nameLocation": "12132:20:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 873,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 868,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "12170:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 876,
												"src": "12162:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 867,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12162:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 870,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "12192:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 876,
												"src": "12184:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 869,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12184:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 872,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "12212:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 876,
												"src": "12204:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 871,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12204:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12152:72:2"
									},
									"returnParameters": {
										"id": 874,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12242:0:2"
									},
									"scope": 893,
									"src": "12123:121:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 886,
										"nodeType": "Block",
										"src": "12950:2:2",
										"statements": []
									},
									"documentation": {
										"id": 877,
										"nodeType": "StructuredDocumentation",
										"src": "12250:577:2",
										"text": " @dev Hook that is called after any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n has been transferred to `to`.\n - when `from` is zero, `amount` tokens have been minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
									},
									"id": 887,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_afterTokenTransfer",
									"nameLocation": "12841:19:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 884,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 879,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "12878:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 887,
												"src": "12870:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 878,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12870:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 881,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "12900:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 887,
												"src": "12892:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 880,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12892:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 883,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "12920:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 887,
												"src": "12912:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 882,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12912:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12860:72:2"
									},
									"returnParameters": {
										"id": 885,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12950:0:2"
									},
									"scope": 893,
									"src": "12832:120:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"constant": false,
									"documentation": {
										"id": 888,
										"nodeType": "StructuredDocumentation",
										"src": "12958:254:2",
										"text": " @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
									},
									"id": 892,
									"mutability": "mutable",
									"name": "__gap",
									"nameLocation": "13237:5:2",
									"nodeType": "VariableDeclaration",
									"scope": 893,
									"src": "13217:25:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_uint256_$45_storage",
										"typeString": "uint256[45]"
									},
									"typeName": {
										"baseType": {
											"id": 889,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "13217:7:2",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"id": 891,
										"length": {
											"hexValue": "3435",
											"id": 890,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "13225:2:2",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_45_by_1",
												"typeString": "int_const 45"
											},
											"value": "45"
										},
										"nodeType": "ArrayTypeName",
										"src": "13217:11:2",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_uint256_$45_storage_ptr",
											"typeString": "uint256[45]"
										}
									},
									"visibility": "private"
								}
							],
							"scope": 894,
							"src": "1482:11763:2",
							"usedErrors": []
						}
					],
					"src": "105:13141:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol",
					"exportedSymbols": {
						"IERC20Upgradeable": [
							971
						]
					},
					"id": 972,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 895,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "106:23:3"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20Upgradeable",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 896,
								"nodeType": "StructuredDocumentation",
								"src": "131:70:3",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 971,
							"linearizedBaseContracts": [
								971
							],
							"name": "IERC20Upgradeable",
							"nameLocation": "212:17:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 897,
										"nodeType": "StructuredDocumentation",
										"src": "236:158:3",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"id": 905,
									"name": "Transfer",
									"nameLocation": "405:8:3",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 904,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 899,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "430:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 905,
												"src": "414:20:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 898,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "414:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 901,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "452:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 905,
												"src": "436:18:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 900,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "436:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 903,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "464:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 905,
												"src": "456:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 902,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "456:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "413:57:3"
									},
									"src": "399:72:3"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 906,
										"nodeType": "StructuredDocumentation",
										"src": "477:148:3",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"id": 914,
									"name": "Approval",
									"nameLocation": "636:8:3",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 913,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 908,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "661:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 914,
												"src": "645:21:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 907,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "645:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 910,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "684:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 914,
												"src": "668:23:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 909,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "668:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 912,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "701:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 914,
												"src": "693:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 911,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "693:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "644:63:3"
									},
									"src": "630:78:3"
								},
								{
									"documentation": {
										"id": 915,
										"nodeType": "StructuredDocumentation",
										"src": "714:66:3",
										"text": " @dev Returns the amount of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 920,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "794:11:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 916,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "805:2:3"
									},
									"returnParameters": {
										"id": 919,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 918,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 920,
												"src": "831:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 917,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "831:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "830:9:3"
									},
									"scope": 971,
									"src": "785:55:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 921,
										"nodeType": "StructuredDocumentation",
										"src": "846:72:3",
										"text": " @dev Returns the amount of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 928,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "932:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 924,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 923,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "950:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 928,
												"src": "942:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 922,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "942:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "941:17:3"
									},
									"returnParameters": {
										"id": 927,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 926,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 928,
												"src": "982:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 925,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "982:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "981:9:3"
									},
									"scope": 971,
									"src": "923:68:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 929,
										"nodeType": "StructuredDocumentation",
										"src": "997:202:3",
										"text": " @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 938,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1213:8:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 934,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 931,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1230:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 938,
												"src": "1222:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 930,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1222:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 933,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1242:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 938,
												"src": "1234:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 932,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1234:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1221:28:3"
									},
									"returnParameters": {
										"id": 937,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 936,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 938,
												"src": "1268:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 935,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1268:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1267:6:3"
									},
									"scope": 971,
									"src": "1204:70:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 939,
										"nodeType": "StructuredDocumentation",
										"src": "1280:264:3",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 948,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1558:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 944,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 941,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1576:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 948,
												"src": "1568:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 940,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1568:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 943,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1591:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 948,
												"src": "1583:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 942,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1583:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1567:32:3"
									},
									"returnParameters": {
										"id": 947,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 946,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 948,
												"src": "1623:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 945,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1623:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1622:9:3"
									},
									"scope": 971,
									"src": "1549:83:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 949,
										"nodeType": "StructuredDocumentation",
										"src": "1638:642:3",
										"text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 958,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2294:7:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 954,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 951,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2310:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 958,
												"src": "2302:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 950,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2302:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 953,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2327:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 958,
												"src": "2319:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 952,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2319:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2301:33:3"
									},
									"returnParameters": {
										"id": 957,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 956,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 958,
												"src": "2353:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 955,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2353:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2352:6:3"
									},
									"scope": 971,
									"src": "2285:74:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 959,
										"nodeType": "StructuredDocumentation",
										"src": "2365:287:3",
										"text": " @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 970,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2666:12:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 966,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 961,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2696:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 970,
												"src": "2688:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 960,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2688:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 963,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2718:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 970,
												"src": "2710:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 962,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2710:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 965,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2738:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 970,
												"src": "2730:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 964,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2730:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2678:72:3"
									},
									"returnParameters": {
										"id": 969,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 968,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 970,
												"src": "2769:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 967,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2769:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2768:6:3"
									},
									"scope": 971,
									"src": "2657:118:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 972,
							"src": "202:2575:3",
							"usedErrors": []
						}
					],
					"src": "106:2672:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol",
					"exportedSymbols": {
						"IERC20MetadataUpgradeable": [
							996
						],
						"IERC20Upgradeable": [
							971
						]
					},
					"id": 997,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 973,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "110:23:4"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol",
							"file": "../IERC20Upgradeable.sol",
							"id": 974,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 997,
							"sourceUnit": 972,
							"src": "135:34:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 976,
										"name": "IERC20Upgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 971,
										"src": "327:17:4"
									},
									"id": 977,
									"nodeType": "InheritanceSpecifier",
									"src": "327:17:4"
								}
							],
							"canonicalName": "IERC20MetadataUpgradeable",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 975,
								"nodeType": "StructuredDocumentation",
								"src": "171:116:4",
								"text": " @dev Interface for the optional metadata functions from the ERC20 standard.\n _Available since v4.1._"
							},
							"fullyImplemented": false,
							"id": 996,
							"linearizedBaseContracts": [
								996,
								971
							],
							"name": "IERC20MetadataUpgradeable",
							"nameLocation": "298:25:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 978,
										"nodeType": "StructuredDocumentation",
										"src": "351:54:4",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 983,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "419:4:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 979,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "423:2:4"
									},
									"returnParameters": {
										"id": 982,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 981,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 983,
												"src": "449:13:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 980,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "449:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "448:15:4"
									},
									"scope": 996,
									"src": "410:54:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 984,
										"nodeType": "StructuredDocumentation",
										"src": "470:56:4",
										"text": " @dev Returns the symbol of the token."
									},
									"functionSelector": "95d89b41",
									"id": 989,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "540:6:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 985,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "546:2:4"
									},
									"returnParameters": {
										"id": 988,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 987,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 989,
												"src": "572:13:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 986,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "572:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "571:15:4"
									},
									"scope": 996,
									"src": "531:56:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 990,
										"nodeType": "StructuredDocumentation",
										"src": "593:65:4",
										"text": " @dev Returns the decimals places of the token."
									},
									"functionSelector": "313ce567",
									"id": 995,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "672:8:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 991,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "680:2:4"
									},
									"returnParameters": {
										"id": 994,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 993,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 995,
												"src": "706:5:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 992,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "706:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "705:7:4"
									},
									"scope": 996,
									"src": "663:50:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 997,
							"src": "288:427:4",
							"usedErrors": []
						}
					],
					"src": "110:606:4"
				},
				"id": 4
			},
			"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							1239
						]
					},
					"id": 1240,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 998,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".1"
							],
							"nodeType": "PragmaDirective",
							"src": "101:23:5"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "AddressUpgradeable",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 999,
								"nodeType": "StructuredDocumentation",
								"src": "126:67:5",
								"text": " @dev Collection of functions related to the address type"
							},
							"fullyImplemented": true,
							"id": 1239,
							"linearizedBaseContracts": [
								1239
							],
							"name": "AddressUpgradeable",
							"nameLocation": "202:18:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1013,
										"nodeType": "Block",
										"src": "1252:254:5",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1011,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"expression": {
																"id": 1007,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1002,
																"src": "1476:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 1008,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "code",
															"nodeType": "MemberAccess",
															"src": "1476:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1009,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "1476:19:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 1010,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1498:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1476:23:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1006,
												"id": 1012,
												"nodeType": "Return",
												"src": "1469:30:5"
											}
										]
									},
									"documentation": {
										"id": 1000,
										"nodeType": "StructuredDocumentation",
										"src": "227:954:5",
										"text": " @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="
									},
									"id": 1014,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isContract",
									"nameLocation": "1195:10:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1003,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1002,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1214:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 1014,
												"src": "1206:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1001,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1206:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1205:17:5"
									},
									"returnParameters": {
										"id": 1006,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1005,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1014,
												"src": "1246:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1004,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1246:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1245:6:5"
									},
									"scope": 1239,
									"src": "1186:320:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1047,
										"nodeType": "Block",
										"src": "2494:241:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1029,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 1025,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2520:4:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_AddressUpgradeable_$1239",
																				"typeString": "library AddressUpgradeable"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_AddressUpgradeable_$1239",
																				"typeString": "library AddressUpgradeable"
																			}
																		],
																		"id": 1024,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2512:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 1023,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2512:7:5",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1026,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2512:13:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 1027,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "2512:21:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 1028,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1019,
																"src": "2537:6:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2512:31:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e6365",
															"id": 1030,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2545:31:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															},
															"value": "Address: insufficient balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															}
														],
														"id": 1022,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2504:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1031,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2504:73:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1032,
												"nodeType": "ExpressionStatement",
												"src": "2504:73:5"
											},
											{
												"assignments": [
													1034,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 1034,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "2594:7:5",
														"nodeType": "VariableDeclaration",
														"scope": 1047,
														"src": "2589:12:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1033,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "2589:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 1041,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "",
															"id": 1039,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2637:2:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"id": 1035,
																"name": "recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1017,
																"src": "2607:9:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 1036,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "2607:14:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 1038,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 1037,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1019,
																"src": "2629:6:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "2607:29:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 1040,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2607:33:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2588:52:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1043,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1034,
															"src": "2658:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564",
															"id": 1044,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2667:60:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															},
															"value": "Address: unable to send value, recipient may have reverted"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															}
														],
														"id": 1042,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2650:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1045,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2650:78:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1046,
												"nodeType": "ExpressionStatement",
												"src": "2650:78:5"
											}
										]
									},
									"documentation": {
										"id": 1015,
										"nodeType": "StructuredDocumentation",
										"src": "1512:906:5",
										"text": " @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."
									},
									"id": 1048,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendValue",
									"nameLocation": "2432:9:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1020,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1017,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "2458:9:5",
												"nodeType": "VariableDeclaration",
												"scope": 1048,
												"src": "2442:25:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 1016,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2442:15:5",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1019,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2477:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1048,
												"src": "2469:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1018,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2469:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2441:43:5"
									},
									"returnParameters": {
										"id": 1021,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2494:0:5"
									},
									"scope": 1239,
									"src": "2423:312:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1064,
										"nodeType": "Block",
										"src": "3566:84:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1059,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1051,
															"src": "3596:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1060,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1053,
															"src": "3604:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 1061,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3610:32:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															},
															"value": "Address: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															}
														],
														"id": 1058,
														"name": "functionCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1065,
															1085
														],
														"referencedDeclaration": 1085,
														"src": "3583:12:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 1062,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3583:60:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1057,
												"id": 1063,
												"nodeType": "Return",
												"src": "3576:67:5"
											}
										]
									},
									"documentation": {
										"id": 1049,
										"nodeType": "StructuredDocumentation",
										"src": "2741:731:5",
										"text": " @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"
									},
									"id": 1065,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "3486:12:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1054,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1051,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3507:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1065,
												"src": "3499:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1050,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3499:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1053,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3528:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 1065,
												"src": "3515:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1052,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3515:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3498:35:5"
									},
									"returnParameters": {
										"id": 1057,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1056,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1065,
												"src": "3552:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1055,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3552:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3551:14:5"
									},
									"scope": 1239,
									"src": "3477:173:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1084,
										"nodeType": "Block",
										"src": "4019:76:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1078,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1068,
															"src": "4058:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1079,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1070,
															"src": "4066:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 1080,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4072:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"id": 1081,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1072,
															"src": "4075:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 1077,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1105,
															1155
														],
														"referencedDeclaration": 1155,
														"src": "4036:21:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 1082,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4036:52:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1076,
												"id": 1083,
												"nodeType": "Return",
												"src": "4029:59:5"
											}
										]
									},
									"documentation": {
										"id": 1066,
										"nodeType": "StructuredDocumentation",
										"src": "3656:211:5",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 1085,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "3881:12:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1073,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1068,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3911:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1085,
												"src": "3903:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1067,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3903:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1070,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3940:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 1085,
												"src": "3927:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1069,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3927:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1072,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "3968:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 1085,
												"src": "3954:26:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1071,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3954:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3893:93:5"
									},
									"returnParameters": {
										"id": 1076,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1075,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1085,
												"src": "4005:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1074,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4005:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4004:14:5"
									},
									"scope": 1239,
									"src": "3872:223:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1104,
										"nodeType": "Block",
										"src": "4600:111:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1098,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1088,
															"src": "4639:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1099,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1090,
															"src": "4647:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 1100,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1092,
															"src": "4653:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564",
															"id": 1101,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4660:43:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															},
															"value": "Address: low-level call with value failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															}
														],
														"id": 1097,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1105,
															1155
														],
														"referencedDeclaration": 1155,
														"src": "4617:21:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 1102,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4617:87:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1096,
												"id": 1103,
												"nodeType": "Return",
												"src": "4610:94:5"
											}
										]
									},
									"documentation": {
										"id": 1086,
										"nodeType": "StructuredDocumentation",
										"src": "4101:351:5",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"
									},
									"id": 1105,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "4466:21:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1093,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1088,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4505:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1105,
												"src": "4497:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1087,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4497:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1090,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4534:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 1105,
												"src": "4521:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1089,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4521:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1092,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4556:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1105,
												"src": "4548:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1091,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4548:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4487:80:5"
									},
									"returnParameters": {
										"id": 1096,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1095,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1105,
												"src": "4586:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1094,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4586:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4585:14:5"
									},
									"scope": 1239,
									"src": "4457:254:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1154,
										"nodeType": "Block",
										"src": "5138:320:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1126,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 1122,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "5164:4:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_AddressUpgradeable_$1239",
																				"typeString": "library AddressUpgradeable"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_AddressUpgradeable_$1239",
																				"typeString": "library AddressUpgradeable"
																			}
																		],
																		"id": 1121,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "5156:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 1120,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "5156:7:5",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1123,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5156:13:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 1124,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "5156:21:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 1125,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1112,
																"src": "5181:5:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5156:30:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c",
															"id": 1127,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5188:40:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															},
															"value": "Address: insufficient balance for call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															}
														],
														"id": 1119,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5148:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1128,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5148:81:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1129,
												"nodeType": "ExpressionStatement",
												"src": "5148:81:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1132,
																	"name": "target",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1108,
																	"src": "5258:6:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1131,
																"name": "isContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1014,
																"src": "5247:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 1133,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5247:18:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
															"id": 1134,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5267:31:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																"typeString": "literal_string \"Address: call to non-contract\""
															},
															"value": "Address: call to non-contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																"typeString": "literal_string \"Address: call to non-contract\""
															}
														],
														"id": 1130,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5239:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1135,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5239:60:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1136,
												"nodeType": "ExpressionStatement",
												"src": "5239:60:5"
											},
											{
												"assignments": [
													1138,
													1140
												],
												"declarations": [
													{
														"constant": false,
														"id": 1138,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "5316:7:5",
														"nodeType": "VariableDeclaration",
														"scope": 1154,
														"src": "5311:12:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1137,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "5311:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1140,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "5338:10:5",
														"nodeType": "VariableDeclaration",
														"scope": 1154,
														"src": "5325:23:5",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1139,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5325:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1147,
												"initialValue": {
													"arguments": [
														{
															"id": 1145,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1110,
															"src": "5378:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"expression": {
																"id": 1141,
																"name": "target",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1108,
																"src": "5352:6:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 1142,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "5352:11:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 1144,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 1143,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1112,
																"src": "5371:5:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "5352:25:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 1146,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5352:31:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5310:73:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1149,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1138,
															"src": "5417:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 1150,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1140,
															"src": "5426:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 1151,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1114,
															"src": "5438:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 1148,
														"name": "verifyCallResult",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1238,
														"src": "5400:16:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
														}
													},
													"id": 1152,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5400:51:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1118,
												"id": 1153,
												"nodeType": "Return",
												"src": "5393:58:5"
											}
										]
									},
									"documentation": {
										"id": 1106,
										"nodeType": "StructuredDocumentation",
										"src": "4717:237:5",
										"text": " @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 1155,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "4968:21:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1115,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1108,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5007:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1155,
												"src": "4999:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1107,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4999:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1110,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5036:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 1155,
												"src": "5023:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1109,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5023:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1112,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5058:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1155,
												"src": "5050:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1111,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5050:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1114,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "5087:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 1155,
												"src": "5073:26:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1113,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5073:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4989:116:5"
									},
									"returnParameters": {
										"id": 1118,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1117,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1155,
												"src": "5124:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1116,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5124:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5123:14:5"
									},
									"scope": 1239,
									"src": "4959:499:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1171,
										"nodeType": "Block",
										"src": "5735:97:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1166,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1158,
															"src": "5771:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1167,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1160,
															"src": "5779:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564",
															"id": 1168,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5785:39:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															},
															"value": "Address: low-level static call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															}
														],
														"id": 1165,
														"name": "functionStaticCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1172,
															1207
														],
														"referencedDeclaration": 1207,
														"src": "5752:18:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 1169,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5752:73:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1164,
												"id": 1170,
												"nodeType": "Return",
												"src": "5745:80:5"
											}
										]
									},
									"documentation": {
										"id": 1156,
										"nodeType": "StructuredDocumentation",
										"src": "5464:166:5",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 1172,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "5644:18:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1161,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1158,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5671:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1172,
												"src": "5663:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1157,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5663:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1160,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5692:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 1172,
												"src": "5679:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1159,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5679:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5662:35:5"
									},
									"returnParameters": {
										"id": 1164,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1163,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1172,
												"src": "5721:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1162,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5721:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5720:14:5"
									},
									"scope": 1239,
									"src": "5635:197:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1206,
										"nodeType": "Block",
										"src": "6174:228:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1186,
																	"name": "target",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1175,
																	"src": "6203:6:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1185,
																"name": "isContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1014,
																"src": "6192:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 1187,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6192:18:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a207374617469632063616c6c20746f206e6f6e2d636f6e7472616374",
															"id": 1188,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6212:38:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9",
																"typeString": "literal_string \"Address: static call to non-contract\""
															},
															"value": "Address: static call to non-contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9",
																"typeString": "literal_string \"Address: static call to non-contract\""
															}
														],
														"id": 1184,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6184:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1189,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6184:67:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1190,
												"nodeType": "ExpressionStatement",
												"src": "6184:67:5"
											},
											{
												"assignments": [
													1192,
													1194
												],
												"declarations": [
													{
														"constant": false,
														"id": 1192,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "6268:7:5",
														"nodeType": "VariableDeclaration",
														"scope": 1206,
														"src": "6263:12:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1191,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "6263:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1194,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "6290:10:5",
														"nodeType": "VariableDeclaration",
														"scope": 1206,
														"src": "6277:23:5",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1193,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "6277:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1199,
												"initialValue": {
													"arguments": [
														{
															"id": 1197,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1177,
															"src": "6322:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 1195,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1175,
															"src": "6304:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 1196,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "staticcall",
														"nodeType": "MemberAccess",
														"src": "6304:17:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) view returns (bool,bytes memory)"
														}
													},
													"id": 1198,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6304:23:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6262:65:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1201,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1192,
															"src": "6361:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 1202,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1194,
															"src": "6370:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 1203,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1179,
															"src": "6382:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 1200,
														"name": "verifyCallResult",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1238,
														"src": "6344:16:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
														}
													},
													"id": 1204,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6344:51:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1183,
												"id": 1205,
												"nodeType": "Return",
												"src": "6337:58:5"
											}
										]
									},
									"documentation": {
										"id": 1173,
										"nodeType": "StructuredDocumentation",
										"src": "5838:173:5",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 1207,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "6025:18:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1180,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1175,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6061:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1207,
												"src": "6053:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1174,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6053:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1177,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6090:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 1207,
												"src": "6077:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1176,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6077:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1179,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "6118:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 1207,
												"src": "6104:26:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1178,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6104:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6043:93:5"
									},
									"returnParameters": {
										"id": 1183,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1182,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1207,
												"src": "6160:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1181,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6160:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6159:14:5"
									},
									"scope": 1239,
									"src": "6016:386:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1237,
										"nodeType": "Block",
										"src": "6782:582:5",
										"statements": [
											{
												"condition": {
													"id": 1219,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1210,
													"src": "6796:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1235,
													"nodeType": "Block",
													"src": "6853:505:5",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1226,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 1223,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1212,
																		"src": "6937:10:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 1224,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "6937:17:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1225,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "6957:1:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "6937:21:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseBody": {
																"id": 1233,
																"nodeType": "Block",
																"src": "7295:53:5",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"id": 1230,
																					"name": "errorMessage",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1214,
																					"src": "7320:12:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_string_memory_ptr",
																						"typeString": "string memory"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_string_memory_ptr",
																						"typeString": "string memory"
																					}
																				],
																				"id": 1229,
																				"name": "revert",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [
																					4294967277,
																					4294967277
																				],
																				"referencedDeclaration": 4294967277,
																				"src": "7313:6:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																					"typeString": "function (string memory) pure"
																				}
																			},
																			"id": 1231,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "7313:20:5",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 1232,
																		"nodeType": "ExpressionStatement",
																		"src": "7313:20:5"
																	}
																]
															},
															"id": 1234,
															"nodeType": "IfStatement",
															"src": "6933:415:5",
															"trueBody": {
																"id": 1228,
																"nodeType": "Block",
																"src": "6960:329:5",
																"statements": [
																	{
																		"AST": {
																			"nodeType": "YulBlock",
																			"src": "7130:145:5",
																			"statements": [
																				{
																					"nodeType": "YulVariableDeclaration",
																					"src": "7152:40:5",
																					"value": {
																						"arguments": [
																							{
																								"name": "returndata",
																								"nodeType": "YulIdentifier",
																								"src": "7181:10:5"
																							}
																						],
																						"functionName": {
																							"name": "mload",
																							"nodeType": "YulIdentifier",
																							"src": "7175:5:5"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "7175:17:5"
																					},
																					"variables": [
																						{
																							"name": "returndata_size",
																							"nodeType": "YulTypedName",
																							"src": "7156:15:5",
																							"type": ""
																						}
																					]
																				},
																				{
																					"expression": {
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "7224:2:5",
																										"type": "",
																										"value": "32"
																									},
																									{
																										"name": "returndata",
																										"nodeType": "YulIdentifier",
																										"src": "7228:10:5"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "7220:3:5"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "7220:19:5"
																							},
																							{
																								"name": "returndata_size",
																								"nodeType": "YulIdentifier",
																								"src": "7241:15:5"
																							}
																						],
																						"functionName": {
																							"name": "revert",
																							"nodeType": "YulIdentifier",
																							"src": "7213:6:5"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "7213:44:5"
																					},
																					"nodeType": "YulExpressionStatement",
																					"src": "7213:44:5"
																				}
																			]
																		},
																		"documentation": "@solidity memory-safe-assembly",
																		"evmVersion": "london",
																		"externalReferences": [
																			{
																				"declaration": 1212,
																				"isOffset": false,
																				"isSlot": false,
																				"src": "7181:10:5",
																				"valueSize": 1
																			},
																			{
																				"declaration": 1212,
																				"isOffset": false,
																				"isSlot": false,
																				"src": "7228:10:5",
																				"valueSize": 1
																			}
																		],
																		"id": 1227,
																		"nodeType": "InlineAssembly",
																		"src": "7121:154:5"
																	}
																]
															}
														}
													]
												},
												"id": 1236,
												"nodeType": "IfStatement",
												"src": "6792:566:5",
												"trueBody": {
													"id": 1222,
													"nodeType": "Block",
													"src": "6805:42:5",
													"statements": [
														{
															"expression": {
																"id": 1220,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1212,
																"src": "6826:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 1218,
															"id": 1221,
															"nodeType": "Return",
															"src": "6819:17:5"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1208,
										"nodeType": "StructuredDocumentation",
										"src": "6408:209:5",
										"text": " @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason using the provided one.\n _Available since v4.3._"
									},
									"id": 1238,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResult",
									"nameLocation": "6631:16:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1215,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1210,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "6662:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 1238,
												"src": "6657:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1209,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6657:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1212,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "6692:10:5",
												"nodeType": "VariableDeclaration",
												"scope": 1238,
												"src": "6679:23:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1211,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6679:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1214,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "6726:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 1238,
												"src": "6712:26:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1213,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6712:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6647:97:5"
									},
									"returnParameters": {
										"id": 1218,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1217,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1238,
												"src": "6768:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1216,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6768:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6767:14:5"
									},
									"scope": 1239,
									"src": "6622:742:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1240,
							"src": "194:7172:5",
							"usedErrors": []
						}
					],
					"src": "101:7266:5"
				},
				"id": 5
			},
			"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							1239
						],
						"ContextUpgradeable": [
							1281
						],
						"Initializable": [
							282
						]
					},
					"id": 1282,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1241,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "86:23:6"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
							"file": "../proxy/utils/Initializable.sol",
							"id": 1242,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1282,
							"sourceUnit": 283,
							"src": "110:42:6",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 1244,
										"name": "Initializable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 282,
										"src": "691:13:6"
									},
									"id": 1245,
									"nodeType": "InheritanceSpecifier",
									"src": "691:13:6"
								}
							],
							"canonicalName": "ContextUpgradeable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1243,
								"nodeType": "StructuredDocumentation",
								"src": "154:496:6",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 1281,
							"linearizedBaseContracts": [
								1281,
								282
							],
							"name": "ContextUpgradeable",
							"nameLocation": "669:18:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1250,
										"nodeType": "Block",
										"src": "763:7:6",
										"statements": []
									},
									"id": 1251,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1248,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1247,
												"name": "onlyInitializing",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 245,
												"src": "746:16:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "746:16:6"
										}
									],
									"name": "__Context_init",
									"nameLocation": "720:14:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1246,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "734:2:6"
									},
									"returnParameters": {
										"id": 1249,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "763:0:6"
									},
									"scope": 1281,
									"src": "711:59:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1256,
										"nodeType": "Block",
										"src": "838:7:6",
										"statements": []
									},
									"id": 1257,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1254,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1253,
												"name": "onlyInitializing",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 245,
												"src": "821:16:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "821:16:6"
										}
									],
									"name": "__Context_init_unchained",
									"nameLocation": "785:24:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1252,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "809:2:6"
									},
									"returnParameters": {
										"id": 1255,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "838:0:6"
									},
									"scope": 1281,
									"src": "776:69:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1265,
										"nodeType": "Block",
										"src": "912:34:6",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1262,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "929:3:6",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1263,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "929:10:6",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1261,
												"id": 1264,
												"nodeType": "Return",
												"src": "922:17:6"
											}
										]
									},
									"id": 1266,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "859:10:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1258,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "869:2:6"
									},
									"returnParameters": {
										"id": 1261,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1260,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1266,
												"src": "903:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1259,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "903:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "902:9:6"
									},
									"scope": 1281,
									"src": "850:96:6",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1274,
										"nodeType": "Block",
										"src": "1019:32:6",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1271,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "1036:3:6",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1272,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "1036:8:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 1270,
												"id": 1273,
												"nodeType": "Return",
												"src": "1029:15:6"
											}
										]
									},
									"id": 1275,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "961:8:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1267,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "969:2:6"
									},
									"returnParameters": {
										"id": 1270,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1269,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1275,
												"src": "1003:14:6",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1268,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1003:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1002:16:6"
									},
									"scope": 1281,
									"src": "952:99:6",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"constant": false,
									"documentation": {
										"id": 1276,
										"nodeType": "StructuredDocumentation",
										"src": "1057:254:6",
										"text": " @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
									},
									"id": 1280,
									"mutability": "mutable",
									"name": "__gap",
									"nameLocation": "1336:5:6",
									"nodeType": "VariableDeclaration",
									"scope": 1281,
									"src": "1316:25:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_uint256_$50_storage",
										"typeString": "uint256[50]"
									},
									"typeName": {
										"baseType": {
											"id": 1277,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1316:7:6",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"id": 1279,
										"length": {
											"hexValue": "3530",
											"id": 1278,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "1324:2:6",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_50_by_1",
												"typeString": "int_const 50"
											},
											"value": "50"
										},
										"nodeType": "ArrayTypeName",
										"src": "1316:11:6",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_uint256_$50_storage_ptr",
											"typeString": "uint256[50]"
										}
									},
									"visibility": "private"
								}
							],
							"scope": 1282,
							"src": "651:693:6",
							"usedErrors": []
						}
					],
					"src": "86:1259:6"
				},
				"id": 6
			},
			"contracts/Detake3Token.sol": {
				"ast": {
					"absolutePath": "contracts/Detake3Token.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							1239
						],
						"ContextUpgradeable": [
							1281
						],
						"Detake3Token": [
							1541
						],
						"ERC20Upgradeable": [
							893
						],
						"IERC20MetadataUpgradeable": [
							996
						],
						"IERC20Upgradeable": [
							971
						],
						"Initializable": [
							282
						],
						"OwnableUpgradeable": [
							131
						]
					},
					"id": 1542,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1283,
							"literals": [
								"solidity",
								">=",
								"0.4",
								".22",
								"<",
								"0.9",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:32:7"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol",
							"file": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol",
							"id": 1284,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1542,
							"sourceUnit": 894,
							"src": "67:78:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol",
							"file": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol",
							"id": 1285,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1542,
							"sourceUnit": 132,
							"src": "147:75:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1286,
										"name": "ERC20Upgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 893,
										"src": "251:16:7"
									},
									"id": 1287,
									"nodeType": "InheritanceSpecifier",
									"src": "251:16:7"
								},
								{
									"baseName": {
										"id": 1288,
										"name": "OwnableUpgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 131,
										"src": "269:18:7"
									},
									"id": 1289,
									"nodeType": "InheritanceSpecifier",
									"src": "269:18:7"
								}
							],
							"canonicalName": "Detake3Token",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 1541,
							"linearizedBaseContracts": [
								1541,
								131,
								893,
								996,
								971,
								1281,
								282
							],
							"name": "Detake3Token",
							"nameLocation": "235:12:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 1291,
									"mutability": "mutable",
									"name": "_name",
									"nameLocation": "310:5:7",
									"nodeType": "VariableDeclaration",
									"scope": 1541,
									"src": "295:20:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 1290,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "295:6:7",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1293,
									"mutability": "mutable",
									"name": "_symbol",
									"nameLocation": "337:7:7",
									"nodeType": "VariableDeclaration",
									"scope": 1541,
									"src": "322:22:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 1292,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "322:6:7",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1295,
									"mutability": "mutable",
									"name": "_decimals",
									"nameLocation": "365:9:7",
									"nodeType": "VariableDeclaration",
									"scope": 1541,
									"src": "351:23:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 1294,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "351:5:7",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"functionSelector": "3b124fe7",
									"id": 1297,
									"mutability": "mutable",
									"name": "_taxFee",
									"nameLocation": "396:7:7",
									"nodeType": "VariableDeclaration",
									"scope": 1541,
									"src": "381:22:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1296,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "381:7:7",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 1299,
									"mutability": "mutable",
									"name": "_tokenOwnerAddress",
									"nameLocation": "426:18:7",
									"nodeType": "VariableDeclaration",
									"scope": 1541,
									"src": "410:34:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 1298,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "410:7:7",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1302,
									"mutability": "mutable",
									"name": "_signers",
									"nameLocation": "469:8:7",
									"nodeType": "VariableDeclaration",
									"scope": 1541,
									"src": "451:26:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_address_$dyn_storage",
										"typeString": "address[]"
									},
									"typeName": {
										"baseType": {
											"id": 1300,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "451:7:7",
											"stateMutability": "nonpayable",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"id": 1301,
										"nodeType": "ArrayTypeName",
										"src": "451:9:7",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
											"typeString": "address[]"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1306,
									"mutability": "mutable",
									"name": "_mapSigners",
									"nameLocation": "517:11:7",
									"nodeType": "VariableDeclaration",
									"scope": 1541,
									"src": "484:44:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
										"typeString": "mapping(address => bool)"
									},
									"typeName": {
										"id": 1305,
										"keyType": {
											"id": 1303,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "492:7:7",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "484:24:7",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
											"typeString": "mapping(address => bool)"
										},
										"valueType": {
											"id": 1304,
											"name": "bool",
											"nodeType": "ElementaryTypeName",
											"src": "503:4:7",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"functionSelector": "f9342285",
									"id": 1310,
									"mutability": "mutable",
									"name": "uniqueIdExists",
									"nameLocation": "567:14:7",
									"nodeType": "VariableDeclaration",
									"scope": 1541,
									"src": "535:46:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
										"typeString": "mapping(uint256 => bool)"
									},
									"typeName": {
										"id": 1309,
										"keyType": {
											"id": 1307,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "543:7:7",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "Mapping",
										"src": "535:24:7",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
											"typeString": "mapping(uint256 => bool)"
										},
										"valueType": {
											"id": 1308,
											"name": "bool",
											"nodeType": "ElementaryTypeName",
											"src": "554:4:7",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											}
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 1360,
										"nodeType": "Block",
										"src": "812:334:7",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1327,
														"name": "__Ownable_init",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 26,
														"src": "823:14:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 1328,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "823:16:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1329,
												"nodeType": "ExpressionStatement",
												"src": "823:16:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1331,
															"name": "name",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1312,
															"src": "863:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														{
															"id": 1332,
															"name": "symbol",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1314,
															"src": "869:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 1330,
														"name": "__ERC20_init",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 329,
														"src": "850:12:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (string memory,string memory)"
														}
													},
													"id": 1333,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "850:26:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1334,
												"nodeType": "ExpressionStatement",
												"src": "850:26:7"
											},
											{
												"expression": {
													"id": 1337,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1335,
														"name": "_name",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1291,
														"src": "887:5:7",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1336,
														"name": "name",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1312,
														"src": "895:4:7",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "887:12:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 1338,
												"nodeType": "ExpressionStatement",
												"src": "887:12:7"
											},
											{
												"expression": {
													"id": 1341,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1339,
														"name": "_symbol",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1293,
														"src": "910:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1340,
														"name": "symbol",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1314,
														"src": "920:6:7",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "910:16:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 1342,
												"nodeType": "ExpressionStatement",
												"src": "910:16:7"
											},
											{
												"expression": {
													"id": 1345,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1343,
														"name": "_decimals",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1295,
														"src": "937:9:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1344,
														"name": "decimals",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1316,
														"src": "949:8:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"src": "937:20:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"id": 1346,
												"nodeType": "ExpressionStatement",
												"src": "937:20:7"
											},
											{
												"expression": {
													"id": 1349,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1347,
														"name": "_taxFee",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1297,
														"src": "968:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1348,
														"name": "taxFee",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1320,
														"src": "978:6:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "968:16:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1350,
												"nodeType": "ExpressionStatement",
												"src": "968:16:7"
											},
											{
												"expression": {
													"id": 1353,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1351,
														"name": "_tokenOwnerAddress",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1299,
														"src": "995:18:7",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1352,
														"name": "tokenOwnerAddress",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1322,
														"src": "1016:17:7",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "995:38:7",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1354,
												"nodeType": "ExpressionStatement",
												"src": "995:38:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1356,
															"name": "tokenOwnerAddress",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1322,
															"src": "1107:17:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1357,
															"name": "totalSupply",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1318,
															"src": "1126:11:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1355,
														"name": "_mint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 705,
														"src": "1101:5:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 1358,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1101:37:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1359,
												"nodeType": "ExpressionStatement",
												"src": "1101:37:7"
											}
										]
									},
									"functionSelector": "2cd77a5a",
									"id": 1361,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1325,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1324,
												"name": "initializer",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 202,
												"src": "800:11:7"
											},
											"nodeType": "ModifierInvocation",
											"src": "800:11:7"
										}
									],
									"name": "initialize",
									"nameLocation": "599:10:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1323,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1312,
												"mutability": "mutable",
												"name": "name",
												"nameLocation": "634:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 1361,
												"src": "620:18:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1311,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "620:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1314,
												"mutability": "mutable",
												"name": "symbol",
												"nameLocation": "663:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 1361,
												"src": "649:20:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1313,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "649:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1316,
												"mutability": "mutable",
												"name": "decimals",
												"nameLocation": "686:8:7",
												"nodeType": "VariableDeclaration",
												"scope": 1361,
												"src": "680:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1315,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "680:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1318,
												"mutability": "mutable",
												"name": "totalSupply",
												"nameLocation": "713:11:7",
												"nodeType": "VariableDeclaration",
												"scope": 1361,
												"src": "705:19:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1317,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "705:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1320,
												"mutability": "mutable",
												"name": "taxFee",
												"nameLocation": "743:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 1361,
												"src": "735:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1319,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "735:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1322,
												"mutability": "mutable",
												"name": "tokenOwnerAddress",
												"nameLocation": "768:17:7",
												"nodeType": "VariableDeclaration",
												"scope": 1361,
												"src": "760:25:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1321,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "760:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "609:183:7"
									},
									"returnParameters": {
										"id": 1326,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "812:0:7"
									},
									"scope": 1541,
									"src": "590:556:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1368,
										"nodeType": "Block",
										"src": "1216:44:7",
										"statements": [
											{
												"expression": {
													"id": 1366,
													"name": "_tokenOwnerAddress",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1299,
													"src": "1234:18:7",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1365,
												"id": 1367,
												"nodeType": "Return",
												"src": "1227:25:7"
											}
										]
									},
									"functionSelector": "b722d0a5",
									"id": 1369,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getTokenOwnerAddress",
									"nameLocation": "1163:20:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1362,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1183:2:7"
									},
									"returnParameters": {
										"id": 1365,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1364,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1369,
												"src": "1207:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1363,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1207:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1206:9:7"
									},
									"scope": 1541,
									"src": "1154:106:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1401,
										"nodeType": "Block",
										"src": "1331:171:7",
										"statements": [
											{
												"assignments": [
													1377
												],
												"declarations": [
													{
														"constant": false,
														"id": 1377,
														"mutability": "mutable",
														"name": "burnAmt",
														"nameLocation": "1350:7:7",
														"nodeType": "VariableDeclaration",
														"scope": 1401,
														"src": "1342:15:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1376,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1342:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1381,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1380,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1378,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1373,
														"src": "1360:6:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"id": 1379,
														"name": "_taxFee",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1297,
														"src": "1369:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1360:16:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1342:34:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1383,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "1393:3:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1384,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "1393:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1385,
															"name": "burnAmt",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1377,
															"src": "1405:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1382,
														"name": "_burn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 777,
														"src": "1387:5:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 1386,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1387:26:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1387,
												"nodeType": "ExpressionStatement",
												"src": "1387:26:7"
											},
											{
												"assignments": [
													1389
												],
												"declarations": [
													{
														"constant": false,
														"id": 1389,
														"mutability": "mutable",
														"name": "newAmt",
														"nameLocation": "1432:6:7",
														"nodeType": "VariableDeclaration",
														"scope": 1401,
														"src": "1424:14:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1388,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1424:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1393,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1392,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1390,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1373,
														"src": "1441:6:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"id": 1391,
														"name": "burnAmt",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1377,
														"src": "1450:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1441:16:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1424:33:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1397,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1371,
															"src": "1483:2:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1398,
															"name": "newAmt",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1389,
															"src": "1487:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1394,
															"name": "super",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967271,
															"src": "1468:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_super$_Detake3Token_$1541_$",
																"typeString": "type(contract super Detake3Token)"
															}
														},
														"id": 1396,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "transfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 426,
														"src": "1468:14:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
															"typeString": "function (address,uint256) returns (bool)"
														}
													},
													"id": 1399,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1468:26:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1400,
												"nodeType": "ExpressionStatement",
												"src": "1468:26:7"
											}
										]
									},
									"id": 1402,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferWithBurn",
									"nameLocation": "1277:17:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1374,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1371,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1303:2:7",
												"nodeType": "VariableDeclaration",
												"scope": 1402,
												"src": "1295:10:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1370,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1295:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1373,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1315:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 1402,
												"src": "1307:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1372,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1307:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1294:28:7"
									},
									"returnParameters": {
										"id": 1375,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1331:0:7"
									},
									"scope": 1541,
									"src": "1268:234:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 1410,
										"nodeType": "Block",
										"src": "1570:34:7",
										"statements": [
											{
												"expression": {
													"id": 1408,
													"name": "_signers",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1302,
													"src": "1588:8:7",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage",
														"typeString": "address[] storage ref"
													}
												},
												"functionReturnParameters": 1407,
												"id": 1409,
												"nodeType": "Return",
												"src": "1581:15:7"
											}
										]
									},
									"functionSelector": "46f0975a",
									"id": 1411,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "signers",
									"nameLocation": "1519:7:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1403,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1526:2:7"
									},
									"returnParameters": {
										"id": 1407,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1406,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1411,
												"src": "1552:16:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 1404,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "1552:7:7",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 1405,
													"nodeType": "ArrayTypeName",
													"src": "1552:9:7",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1551:18:7"
									},
									"scope": 1541,
									"src": "1510:94:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1438,
										"nodeType": "Block",
										"src": "1686:165:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1420,
															"name": "_signers",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1302,
															"src": "1708:8:7",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_address_$dyn_storage",
																"typeString": "address[] storage ref"
															}
														},
														{
															"hexValue": "66616c7365",
															"id": 1421,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1718:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "false"
														},
														{
															"id": 1422,
															"name": "_mapSigners",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1306,
															"src": "1725:11:7",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																"typeString": "mapping(address => bool)"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_array$_t_address_$dyn_storage",
																"typeString": "address[] storage ref"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																"typeString": "mapping(address => bool)"
															}
														],
														"id": 1419,
														"name": "_updateMap",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1485,
														"src": "1697:10:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_array$_t_address_$dyn_memory_ptr_$_t_bool_$_t_mapping$_t_address_$_t_bool_$_$returns$__$",
															"typeString": "function (address[] memory,bool,mapping(address => bool))"
														}
													},
													"id": 1423,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1697:40:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1424,
												"nodeType": "ExpressionStatement",
												"src": "1697:40:7"
											},
											{
												"expression": {
													"id": 1426,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "delete",
													"prefix": true,
													"src": "1748:15:7",
													"subExpression": {
														"id": 1425,
														"name": "_signers",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1302,
														"src": "1755:8:7",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_address_$dyn_storage",
															"typeString": "address[] storage ref"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1427,
												"nodeType": "ExpressionStatement",
												"src": "1748:15:7"
											},
											{
												"expression": {
													"id": 1430,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1428,
														"name": "_signers",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1302,
														"src": "1774:8:7",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_address_$dyn_storage",
															"typeString": "address[] storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1429,
														"name": "signers_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1414,
														"src": "1785:8:7",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
															"typeString": "address[] memory"
														}
													},
													"src": "1774:19:7",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage",
														"typeString": "address[] storage ref"
													}
												},
												"id": 1431,
												"nodeType": "ExpressionStatement",
												"src": "1774:19:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1433,
															"name": "signers_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1414,
															"src": "1815:8:7",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
																"typeString": "address[] memory"
															}
														},
														{
															"hexValue": "74727565",
															"id": 1434,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1825:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														{
															"id": 1435,
															"name": "_mapSigners",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1306,
															"src": "1831:11:7",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																"typeString": "mapping(address => bool)"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
																"typeString": "address[] memory"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																"typeString": "mapping(address => bool)"
															}
														],
														"id": 1432,
														"name": "_updateMap",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1485,
														"src": "1804:10:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_array$_t_address_$dyn_memory_ptr_$_t_bool_$_t_mapping$_t_address_$_t_bool_$_$returns$__$",
															"typeString": "function (address[] memory,bool,mapping(address => bool))"
														}
													},
													"id": 1436,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1804:39:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1437,
												"nodeType": "ExpressionStatement",
												"src": "1804:39:7"
											}
										]
									},
									"functionSelector": "a3772662",
									"id": 1439,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1417,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1416,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 45,
												"src": "1676:9:7"
											},
											"nodeType": "ModifierInvocation",
											"src": "1676:9:7"
										}
									],
									"name": "setSigners",
									"nameLocation": "1621:10:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1415,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1414,
												"mutability": "mutable",
												"name": "signers_",
												"nameLocation": "1649:8:7",
												"nodeType": "VariableDeclaration",
												"scope": 1439,
												"src": "1632:25:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 1412,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "1632:7:7",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 1413,
													"nodeType": "ArrayTypeName",
													"src": "1632:9:7",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1631:27:7"
									},
									"returnParameters": {
										"id": 1418,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1686:0:7"
									},
									"scope": 1541,
									"src": "1612:239:7",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1450,
										"nodeType": "Block",
										"src": "1923:45:7",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 1446,
														"name": "_mapSigners",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1306,
														"src": "1941:11:7",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
															"typeString": "mapping(address => bool)"
														}
													},
													"id": 1448,
													"indexExpression": {
														"id": 1447,
														"name": "signer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1441,
														"src": "1953:6:7",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "1941:19:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1445,
												"id": 1449,
												"nodeType": "Return",
												"src": "1934:26:7"
											}
										]
									},
									"functionSelector": "07c351dd",
									"id": 1451,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mapSigner",
									"nameLocation": "1868:9:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1442,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1441,
												"mutability": "mutable",
												"name": "signer",
												"nameLocation": "1886:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 1451,
												"src": "1878:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1440,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1878:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1877:16:7"
									},
									"returnParameters": {
										"id": 1445,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1444,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1451,
												"src": "1917:4:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1443,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1917:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1916:6:7"
									},
									"scope": 1541,
									"src": "1859:109:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1484,
										"nodeType": "Block",
										"src": "2112:105:7",
										"statements": [
											{
												"body": {
													"id": 1482,
													"nodeType": "Block",
													"src": "2163:47:7",
													"statements": [
														{
															"expression": {
																"id": 1480,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 1474,
																		"name": "map",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1460,
																		"src": "2178:3:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																			"typeString": "mapping(address => bool)"
																		}
																	},
																	"id": 1478,
																	"indexExpression": {
																		"baseExpression": {
																			"id": 1475,
																			"name": "arr",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1454,
																			"src": "2182:3:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
																				"typeString": "address[] memory"
																			}
																		},
																		"id": 1477,
																		"indexExpression": {
																			"id": 1476,
																			"name": "i",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1464,
																			"src": "2186:1:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint64",
																				"typeString": "uint64"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "2182:6:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "2178:11:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"id": 1479,
																	"name": "status",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1456,
																	"src": "2192:6:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"src": "2178:20:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1481,
															"nodeType": "ExpressionStatement",
															"src": "2178:20:7"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1470,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1467,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1464,
														"src": "2142:1:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 1468,
															"name": "arr",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1454,
															"src": "2146:3:7",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
																"typeString": "address[] memory"
															}
														},
														"id": 1469,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "2146:10:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2142:14:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1483,
												"initializationExpression": {
													"assignments": [
														1464
													],
													"declarations": [
														{
															"constant": false,
															"id": 1464,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "2135:1:7",
															"nodeType": "VariableDeclaration",
															"scope": 1483,
															"src": "2128:8:7",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															},
															"typeName": {
																"id": 1463,
																"name": "uint64",
																"nodeType": "ElementaryTypeName",
																"src": "2128:6:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 1466,
													"initialValue": {
														"hexValue": "30",
														"id": 1465,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2139:1:7",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "2128:12:7"
												},
												"loopExpression": {
													"expression": {
														"id": 1472,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "2158:3:7",
														"subExpression": {
															"id": 1471,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1464,
															"src": "2158:1:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														}
													},
													"id": 1473,
													"nodeType": "ExpressionStatement",
													"src": "2158:3:7"
												},
												"nodeType": "ForStatement",
												"src": "2123:87:7"
											}
										]
									},
									"id": 1485,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_updateMap",
									"nameLocation": "1985:10:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1461,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1454,
												"mutability": "mutable",
												"name": "arr",
												"nameLocation": "2023:3:7",
												"nodeType": "VariableDeclaration",
												"scope": 1485,
												"src": "2006:20:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 1452,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "2006:7:7",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 1453,
													"nodeType": "ArrayTypeName",
													"src": "2006:9:7",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1456,
												"mutability": "mutable",
												"name": "status",
												"nameLocation": "2042:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 1485,
												"src": "2037:11:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1455,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2037:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1460,
												"mutability": "mutable",
												"name": "map",
												"nameLocation": "2092:3:7",
												"nodeType": "VariableDeclaration",
												"scope": 1485,
												"src": "2059:36:7",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
													"typeString": "mapping(address => bool)"
												},
												"typeName": {
													"id": 1459,
													"keyType": {
														"id": 1457,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "2067:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Mapping",
													"src": "2059:24:7",
													"typeDescriptions": {
														"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
														"typeString": "mapping(address => bool)"
													},
													"valueType": {
														"id": 1458,
														"name": "bool",
														"nodeType": "ElementaryTypeName",
														"src": "2078:4:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1995:107:7"
									},
									"returnParameters": {
										"id": 1462,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2112:0:7"
									},
									"scope": 1541,
									"src": "1976:241:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1539,
										"nodeType": "Block",
										"src": "2422:1055:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1500,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "!",
															"prefix": true,
															"src": "2510:25:7",
															"subExpression": {
																"baseExpression": {
																	"id": 1497,
																	"name": "uniqueIdExists",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1310,
																	"src": "2511:14:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
																		"typeString": "mapping(uint256 => bool)"
																	}
																},
																"id": 1499,
																"indexExpression": {
																	"id": 1498,
																	"name": "uniqueId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1489,
																	"src": "2526:8:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "2511:24:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "556e6971756520696420657869737473",
															"id": 1501,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2537:18:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_188268226e967b97bf30adf89a0df618e65d0f4d1c829a35f07843e0a6c57f7b",
																"typeString": "literal_string \"Unique id exists\""
															},
															"value": "Unique id exists"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_188268226e967b97bf30adf89a0df618e65d0f4d1c829a35f07843e0a6c57f7b",
																"typeString": "literal_string \"Unique id exists\""
															}
														],
														"id": 1496,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2502:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1502,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2502:54:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1503,
												"nodeType": "ExpressionStatement",
												"src": "2502:54:7"
											},
											{
												"assignments": [
													1505
												],
												"declarations": [
													{
														"constant": false,
														"id": 1505,
														"mutability": "mutable",
														"name": "sender",
														"nameLocation": "2577:6:7",
														"nodeType": "VariableDeclaration",
														"scope": 1539,
														"src": "2569:14:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1504,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2569:7:7",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1508,
												"initialValue": {
													"expression": {
														"id": 1506,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "2586:3:7",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1507,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "2586:10:7",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2569:27:7"
											},
											{
												"assignments": [
													1510
												],
												"declarations": [
													{
														"constant": false,
														"id": 1510,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "2615:5:7",
														"nodeType": "VariableDeclaration",
														"scope": 1539,
														"src": "2607:13:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1509,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2607:7:7",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1514,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"id": 1511,
															"name": "super",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967271,
															"src": "2623:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_super$_Detake3Token_$1541_$",
																"typeString": "type(contract super Detake3Token)"
															}
														},
														"id": 1512,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "owner",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 54,
														"src": "2623:11:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 1513,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2623:13:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2607:29:7"
											},
											{
												"expression": {
													"id": 1519,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1515,
															"name": "uniqueIdExists",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1310,
															"src": "3230:14:7",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
																"typeString": "mapping(uint256 => bool)"
															}
														},
														"id": 1517,
														"indexExpression": {
															"id": 1516,
															"name": "uniqueId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1489,
															"src": "3245:8:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "3230:24:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 1518,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3257:4:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "3230:31:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1520,
												"nodeType": "ExpressionStatement",
												"src": "3230:31:7"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1523,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1521,
														"name": "sender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1505,
														"src": "3276:6:7",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"id": 1522,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1510,
														"src": "3286:5:7",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "3276:15:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1537,
													"nodeType": "Block",
													"src": "3407:63:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1533,
																		"name": "recipient",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1487,
																		"src": "3440:9:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1534,
																		"name": "amount",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1491,
																		"src": "3451:6:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1532,
																	"name": "_transferWithBurn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1402,
																	"src": "3422:17:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (address,uint256)"
																	}
																},
																"id": 1535,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3422:36:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1536,
															"nodeType": "ExpressionStatement",
															"src": "3422:36:7"
														}
													]
												},
												"id": 1538,
												"nodeType": "IfStatement",
												"src": "3272:198:7",
												"trueBody": {
													"id": 1531,
													"nodeType": "Block",
													"src": "3293:108:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1527,
																		"name": "recipient",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1487,
																		"src": "3371:9:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1528,
																		"name": "amount",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1491,
																		"src": "3382:6:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 1524,
																		"name": "super",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967271,
																		"src": "3356:5:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_super$_Detake3Token_$1541_$",
																			"typeString": "type(contract super Detake3Token)"
																		}
																	},
																	"id": 1526,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "transfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 426,
																	"src": "3356:14:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,uint256) returns (bool)"
																	}
																},
																"id": 1529,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3356:33:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1530,
															"nodeType": "ExpressionStatement",
															"src": "3356:33:7"
														}
													]
												}
											}
										]
									},
									"functionSelector": "55b7dc67",
									"id": 1540,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_permitTransfer",
									"nameLocation": "2234:15:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1494,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1487,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "2268:9:7",
												"nodeType": "VariableDeclaration",
												"scope": 1540,
												"src": "2260:17:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1486,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2260:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1489,
												"mutability": "mutable",
												"name": "uniqueId",
												"nameLocation": "2296:8:7",
												"nodeType": "VariableDeclaration",
												"scope": 1540,
												"src": "2288:16:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1488,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2288:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1491,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2323:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 1540,
												"src": "2315:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1490,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2315:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1493,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "2348:8:7",
												"nodeType": "VariableDeclaration",
												"scope": 1540,
												"src": "2340:16:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1492,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2340:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2249:157:7"
									},
									"returnParameters": {
										"id": 1495,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2422:0:7"
									},
									"scope": 1541,
									"src": "2225:1252:7",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								}
							],
							"scope": 1542,
							"src": "226:3254:7",
							"usedErrors": []
						}
					],
					"src": "33:3449:7"
				},
				"id": 7
			}
		}
	}
}