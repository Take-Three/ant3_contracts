{
  "manifestVersion": "3.2",
  "admin": {
    "address": "0x0CaDB950e7CA963F2afE749a675560d2498bc6C9",
    "txHash": "0x75d9a9e19c3811677408b01cba7f591b056b3092e84a6be1f71a578449c18c5e"
  },
  "proxies": [
    {
      "address": "0x89B972eEE4293226271F7bB021400a6dFA4d433A",
      "txHash": "0xa3529d2a2602aa690634add91685235cc1514dc87ab7756fb6d034d2dfe2c96c",
      "kind": "transparent"
    },
    {
      "address": "0x2a660d297739Ee66634939631bAb27F4881eB497",
      "txHash": "0x3df083a6cdde2414588a7c86adce1edd1bce714920e08502dd707d615d724e82",
      "kind": "transparent"
    },
    {
      "address": "0xB3b8085651A3a9CD1b13e17ED171DeFC4A3970C6",
      "txHash": "0x0d5253d564dba9796ba6bbcffbd96974a1c8b3dae475da465488e02ee8acab6c",
      "kind": "transparent"
    },
    {
      "address": "0x6b0e0B605a64d272eed8F7562d498a56c09dA626",
      "txHash": "0x445fea3a5706df2e90d4a552d80fbfca4e48c890163b852e50a8480295619b78",
      "kind": "transparent"
    },
    {
      "address": "0x24b53Ef7a37c9a601d37604256c00c2D14E73fb3",
      "txHash": "0xed70a38d54b9b2d36bf3f299a63daed8cbe78c0de42ec8dc8770b170af3deb7d",
      "kind": "transparent"
    },
    {
      "address": "0x932aDc1a2bc739ae6b22D93e86787C3707a9d133",
      "txHash": "0xd1d2b94ba5339a985964b0bf88d7bdf8b7e49c4d46363fbcaee623f9cf74832a",
      "kind": "transparent"
    },
    {
      "address": "0x1FA7c0E558f04775fAE11103e903e21671f420a6",
      "txHash": "0x3f45b4f54440cebbe003a703d11d5537c1fbb485ef3afe9f40234cfb14431484",
      "kind": "transparent"
    },
    {
      "address": "0x4d788D418f39F6A222FB75cB64e285c71525345C",
      "txHash": "0x8f3839f58887177bb4f63b4c99e316745ede1fd16e1da00b8d900c047f881b75",
      "kind": "transparent"
    },
    {
      "address": "0x6041E4E37C2B0B8c841eA250F3b8Fa6B36c8C8E0",
      "txHash": "0xc34a5cb9321930a00ac08736470b610bc5e6d29f4bab30a7dd9f6452be25901f",
      "kind": "transparent"
    },
    {
      "address": "0xdb23672b36f7b70FB82B538A953E8ea3A4BCF965",
      "txHash": "0x8e7ffeb2c3fde0d8c7d713625fb2e58e5b58c221ab98d95ab00196ef4426c981",
      "kind": "transparent"
    },
    {
      "address": "0x9E844Bd2A33f8bfaB029e29221Ab17B2604CbE89",
      "txHash": "0x16bd8360fdace3087409f0e84df60127d3df6099527298a25b5107836e66a586",
      "kind": "transparent"
    },
    {
      "address": "0xb3e926e941D1754620571a45B6249859De8D70F5",
      "txHash": "0x7991758c9c9b528660241fd67c8d4f12d0fa04d53ddbce55ed638650d038ef9b",
      "kind": "transparent"
    },
    {
      "address": "0x8dF37Ed8b50c2Bcd5908E4388cf76172A8CC7d17",
      "txHash": "0xf6d57e5bf81296926be1e753e8bb91497fedb39a0a79e6ee404e038726e7bb2b",
      "kind": "transparent"
    },
    {
      "address": "0x906E0beCF3FfAc20d248922F1cf27d54455fecC2",
      "txHash": "0x6628fd220c7945d8c15dcdea335dfa511cf724a5d0e0211c339925296016affd",
      "kind": "transparent"
    },
    {
      "address": "0x3bd8ceD89783F82CCc5c6220b70d240Fc3f30C37",
      "txHash": "0xb9ab8a6cfc3ec228c0aa8bb634dfdd444ad07ae4e3d106136c059a171e7d499a",
      "kind": "transparent"
    },
    {
      "address": "0x53C1bF6d4b68b50974aAFF964cc39A364aCDFD37",
      "txHash": "0xda835118e5b483f0a7cd631f15c6acddc9014c5b707cb1c35305cca292ea9eb8",
      "kind": "transparent"
    },
    {
      "address": "0x8b2Ad6998c8908c2BfbE24cE194B4F7f832f6850",
      "txHash": "0x608fe7f58c48b5806ec1ee61604bb308520e7f0d645bb7a3bfded7dcd179c382",
      "kind": "transparent"
    },
    {
      "address": "0x1BdeA899CF648a813C533168459c07DbF6fa446A",
      "txHash": "0x63018311d6543eeb3735d6956e53b0924f6c95b3eec63fa5510ad5fd027ccdcb",
      "kind": "transparent"
    },
    {
      "address": "0x57D7Eaedd49ad76F199BC87D4b09b802d8E760fD",
      "txHash": "0x3e5bb6a0068cd43c4ca4db69b326114acf823eb6837cea0eebddd178d94ced5f",
      "kind": "transparent"
    }
  ],
  "impls": {
    "fec1f2d4cf640360a34f440348486deb6b097de8cda0fb451b614ba6c06c0e3d": {
      "address": "0x15b00B0cB75F8Dd1aBAF279e5DbB9Cca1DaE1840",
      "txHash": "0x998d03ad76865b3841f8f0a2fb92c98617840f3320f315337ae08dae4fd96673",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:44"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:394"
          },
          {
            "contract": "ERC20CappedUpgradeable",
            "label": "_cap",
            "type": "t_uint256",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20CappedUpgradeable.sol:15"
          },
          {
            "contract": "ERC20CappedUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20CappedUpgradeable.sol:50"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "DeAnt3Token",
            "label": "_name",
            "type": "t_string_storage",
            "src": "..\\project:\\contracts\\token\\DeAnt3Token.sol:8"
          },
          {
            "contract": "DeAnt3Token",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "..\\project:\\contracts\\token\\DeAnt3Token.sol:9"
          },
          {
            "contract": "DeAnt3Token",
            "label": "_decimals",
            "type": "t_uint8",
            "src": "..\\project:\\contracts\\token\\DeAnt3Token.sol:10"
          },
          {
            "contract": "DeAnt3Token",
            "label": "_rewardAmt",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\token\\DeAnt3Token.sol:11"
          },
          {
            "contract": "DeAnt3Token",
            "label": "_cap",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\token\\DeAnt3Token.sol:12"
          },
          {
            "contract": "DeAnt3Token",
            "label": "_taxFee",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\token\\DeAnt3Token.sol:13"
          },
          {
            "contract": "DeAnt3Token",
            "label": "totalBurned",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\token\\DeAnt3Token.sol:14"
          },
          {
            "contract": "DeAnt3Token",
            "label": "_signers",
            "type": "t_array(t_address)dyn_storage",
            "src": "..\\project:\\contracts\\token\\DeAnt3Token.sol:15"
          },
          {
            "contract": "DeAnt3Token",
            "label": "_mapSigners",
            "type": "t_mapping(t_address,t_bool)",
            "src": "..\\project:\\contracts\\token\\DeAnt3Token.sol:16"
          },
          {
            "contract": "DeAnt3Token",
            "label": "uniqueIdExists",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "..\\project:\\contracts\\token\\DeAnt3Token.sol:17"
          },
          {
            "contract": "DeAnt3Token",
            "label": "userTotalBurned",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\token\\DeAnt3Token.sol:18"
          },
          {
            "contract": "DeAnt3Token",
            "label": "nodeControllerContract",
            "type": "t_address",
            "src": "..\\project:\\contracts\\token\\DeAnt3Token.sol:20"
          }
        ],
        "types": {
          "t_string_storage": {
            "label": "string"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          }
        }
      }
    },
    "a5fd15f20fce1ceb8e7f9cbf60f95fd40421ab203987804035bd52a83fc3c890": {
      "address": "0xc798Aa340Cda6d9C940Cf8fB6Ab42ECD1342f3E4",
      "txHash": "0x8b1d8efc1083b002a912035a386465cfa9b81644fc4cf68a36e4fe71080ee54c",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "Ant3Token",
            "label": "_rOwned",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:17"
          },
          {
            "contract": "Ant3Token",
            "label": "_tOwned",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:18"
          },
          {
            "contract": "Ant3Token",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:19"
          },
          {
            "contract": "Ant3Token",
            "label": "_isExcludedFromFee",
            "type": "t_mapping(t_address,t_bool)",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:20"
          },
          {
            "contract": "Ant3Token",
            "label": "_isExcluded",
            "type": "t_mapping(t_address,t_bool)",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:21"
          },
          {
            "contract": "Ant3Token",
            "label": "_excluded",
            "type": "t_array(t_address)dyn_storage",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:22"
          },
          {
            "contract": "Ant3Token",
            "label": "_tTotal",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:24"
          },
          {
            "contract": "Ant3Token",
            "label": "_rTotal",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:25"
          },
          {
            "contract": "Ant3Token",
            "label": "_tFeeTotal",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:26"
          },
          {
            "contract": "Ant3Token",
            "label": "_name",
            "type": "t_string_storage",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:27"
          },
          {
            "contract": "Ant3Token",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:28"
          },
          {
            "contract": "Ant3Token",
            "label": "_decimals",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:29"
          },
          {
            "contract": "Ant3Token",
            "label": "_taxFee",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:30"
          },
          {
            "contract": "Ant3Token",
            "label": "_previousTaxFee",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:31"
          },
          {
            "contract": "Ant3Token",
            "label": "totalBurned",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:32"
          },
          {
            "contract": "Ant3Token",
            "label": "holderTaxFeePercentage",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:33"
          },
          {
            "contract": "Ant3Token",
            "label": "teamTaxFeePercentage",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:34"
          },
          {
            "contract": "Ant3Token",
            "label": "burnTaxFeePercentage",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:35"
          },
          {
            "contract": "Ant3Token",
            "label": "_teamAddress",
            "type": "t_address",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:36"
          },
          {
            "contract": "Ant3Token",
            "label": "_signers",
            "type": "t_array(t_address)dyn_storage",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:38"
          },
          {
            "contract": "Ant3Token",
            "label": "nodeControllerContract",
            "type": "t_address",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:39"
          },
          {
            "contract": "Ant3Token",
            "label": "stackingControllerContract",
            "type": "t_address",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:40"
          },
          {
            "contract": "Ant3Token",
            "label": "_mapSigners",
            "type": "t_mapping(t_address,t_bool)",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:42"
          },
          {
            "contract": "Ant3Token",
            "label": "uniqueIdExists",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:43"
          },
          {
            "contract": "Ant3Token",
            "label": "userTotalBurned",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:44"
          },
          {
            "contract": "Ant3Token",
            "label": "_team2Address",
            "type": "t_address",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:48"
          },
          {
            "contract": "Ant3Token",
            "label": "_gameChangerAddress",
            "type": "t_address",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:49"
          },
          {
            "contract": "Ant3Token",
            "label": "_farmingPoolAddress",
            "type": "t_address",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:50"
          }
        ],
        "types": {
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          }
        }
      }
    },
    "fcaef29a06e9131336df9df3e66001891b5fcd3829819ae1ff96e265980b1dac": {
      "address": "0x3F0432658a27b5802d8B24A6436e7A621dDCb51D",
      "txHash": "0xdfecf4e2ad7965480db58e654fb70f9fbd473810f2df53a3ef4494ae05f7b378",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "MemberController",
            "label": "root",
            "type": "t_address",
            "src": "..\\project:\\contracts\\members\\MemberController.sol:13"
          },
          {
            "contract": "MemberController",
            "label": "members",
            "type": "t_mapping(t_address,t_struct(Member)2180_storage)",
            "src": "..\\project:\\contracts\\members\\MemberController.sol:14"
          },
          {
            "contract": "MemberController",
            "label": "validCaller",
            "type": "t_mapping(t_address,t_bool)",
            "src": "..\\project:\\contracts\\members\\MemberController.sol:15"
          },
          {
            "contract": "MemberController",
            "label": "lastReferralCode",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\members\\MemberController.sol:16"
          },
          {
            "contract": "MemberController",
            "label": "referralCodeList",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "..\\project:\\contracts\\members\\MemberController.sol:17"
          },
          {
            "contract": "MemberController",
            "label": "burnedLP",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\members\\MemberController.sol:18"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(Member)2180_storage)": {
            "label": "mapping(address => struct Member)"
          },
          "t_struct(Member)2180_storage": {
            "label": "struct Member",
            "members": [
              {
                "label": "active",
                "type": "t_bool"
              },
              {
                "label": "upline",
                "type": "t_address"
              },
              {
                "label": "directs",
                "type": "t_array(t_address)dyn_storage"
              },
              {
                "label": "referralCode",
                "type": "t_uint256"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          }
        }
      }
    },
    "87c8474c846888e68dc368363412fb4e9df288675334ab927ee6bc16f3fa547f": {
      "address": "0x2FE52364476381BDef4ee29e325C9fEE497c2018",
      "txHash": "0x79f9ff3b5094930f92a4cdea59d18c7b7594b0cfed92417faecf261c44e576c1",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "NodeController",
            "label": "deAnt3Token",
            "type": "t_contract(IDeAnt3)13551",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:30"
          },
          {
            "contract": "NodeController",
            "label": "ant3Token",
            "type": "t_contract(IAnt3)13541",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:31"
          },
          {
            "contract": "NodeController",
            "label": "guardianToken",
            "type": "t_contract(IERC20Upgradeable)971",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:32"
          },
          {
            "contract": "NodeController",
            "label": "packagePrices",
            "type": "t_struct(PackagePrice)3600_storage",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:33"
          },
          {
            "contract": "NodeController",
            "label": "nodePassive",
            "type": "t_contract(INodePassive)6651",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:34"
          },
          {
            "contract": "NodeController",
            "label": "nodeActiveL1",
            "type": "t_contract(INodeActive)6550",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:35"
          },
          {
            "contract": "NodeController",
            "label": "nodeActiveL2",
            "type": "t_contract(INodeActive)6550",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:36"
          },
          {
            "contract": "NodeController",
            "label": "nodeActiveL3",
            "type": "t_contract(INodeActive)6550",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:37"
          },
          {
            "contract": "NodeController",
            "label": "nodeActiveL4",
            "type": "t_contract(INodeActive)6550",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:38"
          },
          {
            "contract": "NodeController",
            "label": "nodeActiveL5",
            "type": "t_contract(INodeActive)6550",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:39"
          },
          {
            "contract": "NodeController",
            "label": "nodeActiveL6",
            "type": "t_contract(INodeActive)6550",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:40"
          },
          {
            "contract": "NodeController",
            "label": "nodeActiveArray",
            "type": "t_array(t_contract(INodeActive)6550)dyn_storage",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:41"
          },
          {
            "contract": "NodeController",
            "label": "memberController",
            "type": "t_contract(IMemberController)2231",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:42"
          },
          {
            "contract": "NodeController",
            "label": "alphaAccmQty",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:43"
          },
          {
            "contract": "NodeController",
            "label": "betaAccmQty",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:44"
          },
          {
            "contract": "NodeController",
            "label": "gammaAccmQty",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:45"
          },
          {
            "contract": "NodeController",
            "label": "referralRank",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:46"
          },
          {
            "contract": "NodeController",
            "label": "validCaller",
            "type": "t_mapping(t_address,t_bool)",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:47"
          },
          {
            "contract": "NodeController",
            "label": "today",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:50"
          },
          {
            "contract": "NodeController",
            "label": "defaultQuota",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:51"
          },
          {
            "contract": "NodeController",
            "label": "allQuota",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:52"
          },
          {
            "contract": "NodeController",
            "label": "lastPromoCode",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:53"
          },
          {
            "contract": "NodeController",
            "label": "maxClaimRound",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:54"
          },
          {
            "contract": "NodeController",
            "label": "allPromoCode",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:55"
          },
          {
            "contract": "NodeController",
            "label": "deAnt3Decimals",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:76"
          },
          {
            "contract": "NodeController",
            "label": "guardianDecimals",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:77"
          },
          {
            "contract": "NodeController",
            "label": "_guardianCollectAddress",
            "type": "t_address",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:78"
          }
        ],
        "types": {
          "t_contract(IDeAnt3)13551": {
            "label": "contract IDeAnt3"
          },
          "t_contract(IAnt3)13541": {
            "label": "contract IAnt3"
          },
          "t_contract(IERC20Upgradeable)971": {
            "label": "contract IERC20Upgradeable"
          },
          "t_struct(PackagePrice)3600_storage": {
            "label": "struct NodeController.PackagePrice",
            "members": [
              {
                "label": "alphaDeAntPrice",
                "type": "t_uint256"
              },
              {
                "label": "alphaGuardianPrice",
                "type": "t_uint256"
              },
              {
                "label": "betaDeAntPrice",
                "type": "t_uint256"
              },
              {
                "label": "betaGuardianPrice",
                "type": "t_uint256"
              },
              {
                "label": "gammaDeAntPrice",
                "type": "t_uint256"
              },
              {
                "label": "gammaGuardianPrice",
                "type": "t_uint256"
              },
              {
                "label": "packageId",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(INodePassive)6651": {
            "label": "contract INodePassive"
          },
          "t_contract(INodeActive)6550": {
            "label": "contract INodeActive"
          },
          "t_array(t_contract(INodeActive)6550)dyn_storage": {
            "label": "contract INodeActive[]"
          },
          "t_contract(IMemberController)2231": {
            "label": "contract IMemberController"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          }
        }
      }
    },
    "631ad7c887366d4624366be4a88769ed6e6ad226c5550db51c8f7d511c1a1f7d": {
      "address": "0x828c3107ac61877cb4a3C3fa2313af29bF5aea24",
      "txHash": "0x28b738f2bdeb0c0ea72119915b119333eda66e06d1ef24711897269c7a53b0a7",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "NodePassive",
            "label": "ant3Token",
            "type": "t_contract(IAnt3)13541",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:17"
          },
          {
            "contract": "NodePassive",
            "label": "nodeControllerContract",
            "type": "t_contract(INodeController)6558",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:18"
          },
          {
            "contract": "NodePassive",
            "label": "dividingValue",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:19"
          },
          {
            "contract": "NodePassive",
            "label": "lastRound",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:20"
          },
          {
            "contract": "NodePassive",
            "label": "lastMoId",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:21"
          },
          {
            "contract": "NodePassive",
            "label": "sortedRoundForDeductShare",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:22"
          },
          {
            "contract": "NodePassive",
            "label": "roundDeductShare",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:23"
          },
          {
            "contract": "NodePassive",
            "label": "rounds",
            "type": "t_mapping(t_uint256,t_struct(Round)6569_storage)",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:24"
          },
          {
            "contract": "NodePassive",
            "label": "allOrders",
            "type": "t_mapping(t_uint256,t_struct(Order)6604_storage)",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:25"
          },
          {
            "contract": "NodePassive",
            "label": "allUsers",
            "type": "t_mapping(t_address,t_struct(User)6593_storage)",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:26"
          },
          {
            "contract": "NodePassive",
            "label": "roundTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:27"
          },
          {
            "contract": "NodePassive",
            "label": "userClockActive",
            "type": "t_mapping(t_address,t_bool)",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:28"
          },
          {
            "contract": "NodePassive",
            "label": "userValidOrderCount",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:29"
          }
        ],
        "types": {
          "t_contract(IAnt3)13541": {
            "label": "contract IAnt3"
          },
          "t_contract(INodeController)6558": {
            "label": "contract INodeController"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_struct(Round)6569_storage)": {
            "label": "mapping(uint256 => struct Round)"
          },
          "t_struct(Round)6569_storage": {
            "label": "struct Round",
            "members": [
              {
                "label": "toDistribute",
                "type": "t_uint256"
              },
              {
                "label": "toCarryForward",
                "type": "t_uint256"
              },
              {
                "label": "accmStakedShare",
                "type": "t_uint256"
              },
              {
                "label": "startTime",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(Order)6604_storage)": {
            "label": "mapping(uint256 => struct Order)"
          },
          "t_struct(Order)6604_storage": {
            "label": "struct Order",
            "members": [
              {
                "label": "startRound",
                "type": "t_uint256"
              },
              {
                "label": "endRound",
                "type": "t_uint256"
              },
              {
                "label": "shareReward",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "packageId",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(User)6593_storage)": {
            "label": "mapping(address => struct User)"
          },
          "t_struct(User)6593_storage": {
            "label": "struct User",
            "members": [
              {
                "label": "startingIndexForAddShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForAddShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundAddShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "startingIndexForDeductShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForDeductShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundDeductShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "userOrders",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "lastClaimRound",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          }
        }
      }
    },
    "024e1b4bb91e7f9f5dbc06838ea34ac554ad8c39fbca0d7610da9ecac8b2d03f": {
      "address": "0x8Ac701067Ed22A0b1CE8283fdf720FC30d8E3778",
      "txHash": "0x8bee1ca1219267c7915b58c661ee58d2426bc5e501a97adbdc54fd0bb44c4da2",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "StackingController",
            "label": "ant3Token",
            "type": "t_contract(IAnt3)13547",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:29"
          },
          {
            "contract": "StackingController",
            "label": "lpToken",
            "type": "t_contract(IERC20Upgradeable)971",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:30"
          },
          {
            "contract": "StackingController",
            "label": "stackingPassive",
            "type": "t_contract(IStackingPassive)10681",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:31"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL1",
            "type": "t_contract(IStackingActive)10559",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:32"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL2",
            "type": "t_contract(IStackingActive)10559",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:33"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL3",
            "type": "t_contract(IStackingActive)10559",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:34"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL4",
            "type": "t_contract(IStackingActive)10559",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:35"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL5",
            "type": "t_contract(IStackingActive)10559",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:36"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL6",
            "type": "t_contract(IStackingActive)10559",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:37"
          },
          {
            "contract": "StackingController",
            "label": "memberController",
            "type": "t_contract(IMemberController)2231",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:39"
          },
          {
            "contract": "StackingController",
            "label": "packagePrices",
            "type": "t_struct(PackagePrice)7620_storage",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:40"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveArray",
            "type": "t_array(t_contract(IStackingActive)10559)dyn_storage",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:42"
          },
          {
            "contract": "StackingController",
            "label": "alphaAccmQty",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:43"
          },
          {
            "contract": "StackingController",
            "label": "betaAccmQty",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:44"
          },
          {
            "contract": "StackingController",
            "label": "gammaAccmQty",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:45"
          },
          {
            "contract": "StackingController",
            "label": "referralRank",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:46"
          },
          {
            "contract": "StackingController",
            "label": "today",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:49"
          },
          {
            "contract": "StackingController",
            "label": "minStackForReferral",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:50"
          },
          {
            "contract": "StackingController",
            "label": "defaultSystemQuota",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:51"
          },
          {
            "contract": "StackingController",
            "label": "systemQuota",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:52"
          },
          {
            "contract": "StackingController",
            "label": "defaultUserQuota",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:53"
          },
          {
            "contract": "StackingController",
            "label": "userQuota",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:54"
          },
          {
            "contract": "StackingController",
            "label": "userToday",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:55"
          },
          {
            "contract": "StackingController",
            "label": "maxClaimRound",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:56"
          },
          {
            "contract": "StackingController",
            "label": "minStackAmt",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:57"
          }
        ],
        "types": {
          "t_contract(IAnt3)13547": {
            "label": "contract IAnt3"
          },
          "t_contract(IERC20Upgradeable)971": {
            "label": "contract IERC20Upgradeable"
          },
          "t_contract(IStackingPassive)10681": {
            "label": "contract IStackingPassive"
          },
          "t_contract(IStackingActive)10559": {
            "label": "contract IStackingActive"
          },
          "t_contract(IMemberController)2231": {
            "label": "contract IMemberController"
          },
          "t_struct(PackagePrice)7620_storage": {
            "label": "struct StackingController.PackagePrice",
            "members": [
              {
                "label": "alphaLockPeriod",
                "type": "t_uint256"
              },
              {
                "label": "alphaShareRate",
                "type": "t_uint256"
              },
              {
                "label": "betaLockPeriod",
                "type": "t_uint256"
              },
              {
                "label": "betaShareRate",
                "type": "t_uint256"
              },
              {
                "label": "gammaLockPeriod",
                "type": "t_uint256"
              },
              {
                "label": "gammaShareRate",
                "type": "t_uint256"
              },
              {
                "label": "packageId",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_contract(IStackingActive)10559)dyn_storage": {
            "label": "contract IStackingActive[]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "9d820bd9c9058aeded8074591b7a2cd838c1066e94a598c6b3b29bd54eb5172d": {
      "address": "0x07EfdAFBb2A0d753Da4BB3d3A0Fc575B750C937c",
      "txHash": "0x4e4bb49a174edaf2c4b9129ae6c34902a4ad1b975e057c0f8586058a82a8d572",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "StackingPassive",
            "label": "ant3Token",
            "type": "t_contract(IAnt3)13547",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:17"
          },
          {
            "contract": "StackingPassive",
            "label": "stackingControllerContract",
            "type": "t_contract(IStackingController)10567",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:18"
          },
          {
            "contract": "StackingPassive",
            "label": "dividingValue",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:19"
          },
          {
            "contract": "StackingPassive",
            "label": "lastRound",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:20"
          },
          {
            "contract": "StackingPassive",
            "label": "lastMoId",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:21"
          },
          {
            "contract": "StackingPassive",
            "label": "sortedRoundForDeductShare",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:22"
          },
          {
            "contract": "StackingPassive",
            "label": "roundDeductShare",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:23"
          },
          {
            "contract": "StackingPassive",
            "label": "rounds",
            "type": "t_mapping(t_uint256,t_struct(Round)10578_storage)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:24"
          },
          {
            "contract": "StackingPassive",
            "label": "allOrders",
            "type": "t_mapping(t_uint256,t_struct(Order)10619_storage)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:25"
          },
          {
            "contract": "StackingPassive",
            "label": "allUsers",
            "type": "t_mapping(t_address,t_struct(User)10602_storage)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:26"
          },
          {
            "contract": "StackingPassive",
            "label": "roundTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:27"
          },
          {
            "contract": "StackingPassive",
            "label": "userClockActive",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:28"
          }
        ],
        "types": {
          "t_contract(IAnt3)13547": {
            "label": "contract IAnt3"
          },
          "t_contract(IStackingController)10567": {
            "label": "contract IStackingController"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_struct(Round)10578_storage)": {
            "label": "mapping(uint256 => struct Round)"
          },
          "t_struct(Round)10578_storage": {
            "label": "struct Round",
            "members": [
              {
                "label": "toDistribute",
                "type": "t_uint256"
              },
              {
                "label": "toCarryForward",
                "type": "t_uint256"
              },
              {
                "label": "accmStakedShare",
                "type": "t_uint256"
              },
              {
                "label": "startTime",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(Order)10619_storage)": {
            "label": "mapping(uint256 => struct Order)"
          },
          "t_struct(Order)10619_storage": {
            "label": "struct Order",
            "members": [
              {
                "label": "startRound",
                "type": "t_uint256"
              },
              {
                "label": "endRound",
                "type": "t_uint256"
              },
              {
                "label": "shareReward",
                "type": "t_uint256"
              },
              {
                "label": "oriClock",
                "type": "t_uint256"
              },
              {
                "label": "endClock",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "packageId",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(User)10602_storage)": {
            "label": "mapping(address => struct User)"
          },
          "t_struct(User)10602_storage": {
            "label": "struct User",
            "members": [
              {
                "label": "startingIndexForAddShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForAddShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundAddShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "startingIndexForDeductShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForDeductShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundDeductShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "userOrders",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "lastClaimRound",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "df1b803b466dfb8317e961e0562b39d96467af05053ae283f353e3969e524b19": {
      "address": "0x4d14a433873C2f90305bd193bCeB4bb6c6d85Dac",
      "txHash": "0x5ae368aaa3e4910e448cbb6e56ac3eeb4a003eb75805b066eb27e9a2c137e538",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "NodeActiveL1",
            "label": "ant3Token",
            "type": "t_contract(IAnt3)13547",
            "src": "..\\project:\\contracts\\nodes\\interfaces\\INodes.sol:24"
          },
          {
            "contract": "NodeActiveL1",
            "label": "nodeControllerContract",
            "type": "t_contract(INodeController)6558",
            "src": "..\\project:\\contracts\\nodes\\interfaces\\INodes.sol:25"
          },
          {
            "contract": "NodeActiveL1",
            "label": "dividingValue",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\interfaces\\INodes.sol:30"
          },
          {
            "contract": "NodeActiveL1",
            "label": "lastRound",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\interfaces\\INodes.sol:30"
          },
          {
            "contract": "NodeActiveL1",
            "label": "lastMoId",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\interfaces\\INodes.sol:30"
          },
          {
            "contract": "NodeActiveL1",
            "label": "sortedRoundForDeductShare",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "..\\project:\\contracts\\nodes\\interfaces\\INodes.sol:32"
          },
          {
            "contract": "NodeActiveL1",
            "label": "roundDeductShare",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\nodes\\interfaces\\INodes.sol:33"
          },
          {
            "contract": "NodeActiveL1",
            "label": "rounds",
            "type": "t_mapping(t_uint256,t_struct(Round)6569_storage)",
            "src": "..\\project:\\contracts\\nodes\\interfaces\\INodes.sol:34"
          },
          {
            "contract": "NodeActiveL1",
            "label": "allOrders",
            "type": "t_mapping(t_uint256,t_struct(Order)6604_storage)",
            "src": "..\\project:\\contracts\\nodes\\interfaces\\INodes.sol:34"
          },
          {
            "contract": "NodeActiveL1",
            "label": "allUsers",
            "type": "t_mapping(t_address,t_struct(User)6593_storage)",
            "src": "..\\project:\\contracts\\nodes\\interfaces\\INodes.sol:34"
          },
          {
            "contract": "NodeActiveL1",
            "label": "roundTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\nodes\\interfaces\\INodes.sol:34"
          }
        ],
        "types": {
          "t_contract(IAnt3)13547": {
            "label": "contract IAnt3"
          },
          "t_contract(INodeController)6558": {
            "label": "contract INodeController"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_struct(Round)6569_storage)": {
            "label": "mapping(uint256 => struct Round)"
          },
          "t_struct(Round)6569_storage": {
            "label": "struct Round",
            "members": [
              {
                "label": "toDistribute",
                "type": "t_uint256"
              },
              {
                "label": "toCarryForward",
                "type": "t_uint256"
              },
              {
                "label": "accmStakedShare",
                "type": "t_uint256"
              },
              {
                "label": "startTime",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(Order)6604_storage)": {
            "label": "mapping(uint256 => struct Order)"
          },
          "t_struct(Order)6604_storage": {
            "label": "struct Order",
            "members": [
              {
                "label": "startRound",
                "type": "t_uint256"
              },
              {
                "label": "endRound",
                "type": "t_uint256"
              },
              {
                "label": "shareReward",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "packageId",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(User)6593_storage)": {
            "label": "mapping(address => struct User)"
          },
          "t_struct(User)6593_storage": {
            "label": "struct User",
            "members": [
              {
                "label": "startingIndexForAddShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForAddShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundAddShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "startingIndexForDeductShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForDeductShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundDeductShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "userOrders",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "lastClaimRound",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "93214d36740b5f217f22f199a0b64443bdb198aad99beca82f31f71fa0e5be38": {
      "address": "0x105279C87897AF47b7FF2ddaf7992ac809e46184",
      "txHash": "0x22bcdb4ce512acad8982ef6cb42976ac34e868ad6f65db92e2205219873df49c",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "StackingActiveL1",
            "label": "ant3Token",
            "type": "t_contract(IAnt3)13547",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:18"
          },
          {
            "contract": "StackingActiveL1",
            "label": "stackingControllerContract",
            "type": "t_contract(IStackingController)10567",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:20"
          },
          {
            "contract": "StackingActiveL1",
            "label": "dividingValue",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:21"
          },
          {
            "contract": "StackingActiveL1",
            "label": "lastRound",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:22"
          },
          {
            "contract": "StackingActiveL1",
            "label": "lastMoId",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:23"
          },
          {
            "contract": "StackingActiveL1",
            "label": "sortedRoundForDeductShare",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:24"
          },
          {
            "contract": "StackingActiveL1",
            "label": "roundDeductShare",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:25"
          },
          {
            "contract": "StackingActiveL1",
            "label": "rounds",
            "type": "t_mapping(t_uint256,t_struct(Round)10578_storage)",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:26"
          },
          {
            "contract": "StackingActiveL1",
            "label": "allOrders",
            "type": "t_mapping(t_uint256,t_struct(Order)10619_storage)",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:27"
          },
          {
            "contract": "StackingActiveL1",
            "label": "allUsers",
            "type": "t_mapping(t_address,t_struct(User)10602_storage)",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:28"
          },
          {
            "contract": "StackingActiveL1",
            "label": "roundTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:29"
          }
        ],
        "types": {
          "t_contract(IAnt3)13547": {
            "label": "contract IAnt3"
          },
          "t_contract(IStackingController)10567": {
            "label": "contract IStackingController"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_struct(Round)10578_storage)": {
            "label": "mapping(uint256 => struct Round)"
          },
          "t_struct(Round)10578_storage": {
            "label": "struct Round",
            "members": [
              {
                "label": "toDistribute",
                "type": "t_uint256"
              },
              {
                "label": "toCarryForward",
                "type": "t_uint256"
              },
              {
                "label": "accmStakedShare",
                "type": "t_uint256"
              },
              {
                "label": "startTime",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(Order)10619_storage)": {
            "label": "mapping(uint256 => struct Order)"
          },
          "t_struct(Order)10619_storage": {
            "label": "struct Order",
            "members": [
              {
                "label": "startRound",
                "type": "t_uint256"
              },
              {
                "label": "endRound",
                "type": "t_uint256"
              },
              {
                "label": "shareReward",
                "type": "t_uint256"
              },
              {
                "label": "oriClock",
                "type": "t_uint256"
              },
              {
                "label": "endClock",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "packageId",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(User)10602_storage)": {
            "label": "mapping(address => struct User)"
          },
          "t_struct(User)10602_storage": {
            "label": "struct User",
            "members": [
              {
                "label": "startingIndexForAddShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForAddShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundAddShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "startingIndexForDeductShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForDeductShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundDeductShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "userOrders",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "lastClaimRound",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "dc28e86129e22c0e32d775036e6a53c531739e9c60d70784dde18934312f6d76": {
      "address": "0xEbFDE4B80B640B7803F5Bcb5e9aa1Ff0a405A271",
      "txHash": "0x7deecbb15abbbfdc7526f5c696c5356091e9554c02aee3eab0536f855d975238",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "Ant3Token",
            "label": "_rOwned",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:17"
          },
          {
            "contract": "Ant3Token",
            "label": "_tOwned",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:18"
          },
          {
            "contract": "Ant3Token",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:19"
          },
          {
            "contract": "Ant3Token",
            "label": "_isExcludedFromFee",
            "type": "t_mapping(t_address,t_bool)",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:20"
          },
          {
            "contract": "Ant3Token",
            "label": "_isExcluded",
            "type": "t_mapping(t_address,t_bool)",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:21"
          },
          {
            "contract": "Ant3Token",
            "label": "_excluded",
            "type": "t_array(t_address)dyn_storage",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:22"
          },
          {
            "contract": "Ant3Token",
            "label": "_tTotal",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:24"
          },
          {
            "contract": "Ant3Token",
            "label": "_rTotal",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:25"
          },
          {
            "contract": "Ant3Token",
            "label": "_tFeeTotal",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:26"
          },
          {
            "contract": "Ant3Token",
            "label": "_name",
            "type": "t_string_storage",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:27"
          },
          {
            "contract": "Ant3Token",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:28"
          },
          {
            "contract": "Ant3Token",
            "label": "_decimals",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:29"
          },
          {
            "contract": "Ant3Token",
            "label": "_taxFee",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:30"
          },
          {
            "contract": "Ant3Token",
            "label": "_previousTaxFee",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:31"
          },
          {
            "contract": "Ant3Token",
            "label": "totalBurned",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:32"
          },
          {
            "contract": "Ant3Token",
            "label": "holderTaxFeePercentage",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:33"
          },
          {
            "contract": "Ant3Token",
            "label": "teamTaxFeePercentage",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:34"
          },
          {
            "contract": "Ant3Token",
            "label": "burnTaxFeePercentage",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:35"
          },
          {
            "contract": "Ant3Token",
            "label": "_teamAddress",
            "type": "t_address",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:36"
          },
          {
            "contract": "Ant3Token",
            "label": "_signers",
            "type": "t_array(t_address)dyn_storage",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:38"
          },
          {
            "contract": "Ant3Token",
            "label": "nodeControllerContract",
            "type": "t_address",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:39"
          },
          {
            "contract": "Ant3Token",
            "label": "stackingControllerContract",
            "type": "t_address",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:40"
          },
          {
            "contract": "Ant3Token",
            "label": "_mapSigners",
            "type": "t_mapping(t_address,t_bool)",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:42"
          },
          {
            "contract": "Ant3Token",
            "label": "uniqueIdExists",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:43"
          },
          {
            "contract": "Ant3Token",
            "label": "userTotalBurned",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:44"
          },
          {
            "contract": "Ant3Token",
            "label": "_team2Address",
            "type": "t_address",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:48"
          },
          {
            "contract": "Ant3Token",
            "label": "_gameChangerAddress",
            "type": "t_address",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:49"
          },
          {
            "contract": "Ant3Token",
            "label": "_farmingPoolAddress",
            "type": "t_address",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:50"
          }
        ],
        "types": {
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          }
        }
      }
    },
    "136a2feebab36be3935d408f55c73cce851a36d4568ad19e0621936f6147334d": {
      "address": "0x3B5251412348B5c0a3DC4f161E9e437d309aeB74",
      "txHash": "0xfa3a303fbbfa4e6121b2311ae2d0256db16fa429991fbae041d760ff55e2c7a4",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "Ant3Token",
            "label": "_rOwned",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:17"
          },
          {
            "contract": "Ant3Token",
            "label": "_tOwned",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:18"
          },
          {
            "contract": "Ant3Token",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:19"
          },
          {
            "contract": "Ant3Token",
            "label": "_isExcludedFromFee",
            "type": "t_mapping(t_address,t_bool)",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:20"
          },
          {
            "contract": "Ant3Token",
            "label": "_isExcluded",
            "type": "t_mapping(t_address,t_bool)",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:21"
          },
          {
            "contract": "Ant3Token",
            "label": "_excluded",
            "type": "t_array(t_address)dyn_storage",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:22"
          },
          {
            "contract": "Ant3Token",
            "label": "_tTotal",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:24"
          },
          {
            "contract": "Ant3Token",
            "label": "_rTotal",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:25"
          },
          {
            "contract": "Ant3Token",
            "label": "_tFeeTotal",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:26"
          },
          {
            "contract": "Ant3Token",
            "label": "_name",
            "type": "t_string_storage",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:27"
          },
          {
            "contract": "Ant3Token",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:28"
          },
          {
            "contract": "Ant3Token",
            "label": "_decimals",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:29"
          },
          {
            "contract": "Ant3Token",
            "label": "_taxFee",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:30"
          },
          {
            "contract": "Ant3Token",
            "label": "_previousTaxFee",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:31"
          },
          {
            "contract": "Ant3Token",
            "label": "totalBurned",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:32"
          },
          {
            "contract": "Ant3Token",
            "label": "holderTaxFeePercentage",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:33"
          },
          {
            "contract": "Ant3Token",
            "label": "teamTaxFeePercentage",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:34"
          },
          {
            "contract": "Ant3Token",
            "label": "burnTaxFeePercentage",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:35"
          },
          {
            "contract": "Ant3Token",
            "label": "_teamAddress",
            "type": "t_address",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:36"
          },
          {
            "contract": "Ant3Token",
            "label": "_signers",
            "type": "t_array(t_address)dyn_storage",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:38"
          },
          {
            "contract": "Ant3Token",
            "label": "nodeControllerContract",
            "type": "t_address",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:39"
          },
          {
            "contract": "Ant3Token",
            "label": "stackingControllerContract",
            "type": "t_address",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:40"
          },
          {
            "contract": "Ant3Token",
            "label": "_mapSigners",
            "type": "t_mapping(t_address,t_bool)",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:42"
          },
          {
            "contract": "Ant3Token",
            "label": "uniqueIdExists",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:43"
          },
          {
            "contract": "Ant3Token",
            "label": "userTotalBurned",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:44"
          },
          {
            "contract": "Ant3Token",
            "label": "_team2Address",
            "type": "t_address",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:48"
          },
          {
            "contract": "Ant3Token",
            "label": "_gameChangerAddress",
            "type": "t_address",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:49"
          },
          {
            "contract": "Ant3Token",
            "label": "_farmingPoolAddress",
            "type": "t_address",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:50"
          }
        ],
        "types": {
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          }
        }
      }
    },
    "cd8c321b155abf64a477806265ab8ed38946366068d1243c30d63a3746d07049": {
      "address": "0x74EB2e8E0544aEfd462a6E4465F1C180F6B0902B",
      "txHash": "0xfca1ef99a8b742f3260c9866468c7981662db26c93e268cfda1b621f8ed12d7c",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "Ant3Token",
            "label": "_rOwned",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:17"
          },
          {
            "contract": "Ant3Token",
            "label": "_tOwned",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:18"
          },
          {
            "contract": "Ant3Token",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:19"
          },
          {
            "contract": "Ant3Token",
            "label": "_isExcludedFromFee",
            "type": "t_mapping(t_address,t_bool)",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:20"
          },
          {
            "contract": "Ant3Token",
            "label": "_isExcluded",
            "type": "t_mapping(t_address,t_bool)",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:21"
          },
          {
            "contract": "Ant3Token",
            "label": "_excluded",
            "type": "t_array(t_address)dyn_storage",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:22"
          },
          {
            "contract": "Ant3Token",
            "label": "_tTotal",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:24"
          },
          {
            "contract": "Ant3Token",
            "label": "_rTotal",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:25"
          },
          {
            "contract": "Ant3Token",
            "label": "_tFeeTotal",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:26"
          },
          {
            "contract": "Ant3Token",
            "label": "_name",
            "type": "t_string_storage",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:27"
          },
          {
            "contract": "Ant3Token",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:28"
          },
          {
            "contract": "Ant3Token",
            "label": "_decimals",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:29"
          },
          {
            "contract": "Ant3Token",
            "label": "_taxFee",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:30"
          },
          {
            "contract": "Ant3Token",
            "label": "_previousTaxFee",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:31"
          },
          {
            "contract": "Ant3Token",
            "label": "totalBurned",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:32"
          },
          {
            "contract": "Ant3Token",
            "label": "holderTaxFeePercentage",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:33"
          },
          {
            "contract": "Ant3Token",
            "label": "teamTaxFeePercentage",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:34"
          },
          {
            "contract": "Ant3Token",
            "label": "burnTaxFeePercentage",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:35"
          },
          {
            "contract": "Ant3Token",
            "label": "_teamAddress",
            "type": "t_address",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:36"
          },
          {
            "contract": "Ant3Token",
            "label": "_signers",
            "type": "t_array(t_address)dyn_storage",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:38"
          },
          {
            "contract": "Ant3Token",
            "label": "nodeControllerContract",
            "type": "t_address",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:39"
          },
          {
            "contract": "Ant3Token",
            "label": "stackingControllerContract",
            "type": "t_address",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:40"
          },
          {
            "contract": "Ant3Token",
            "label": "_mapSigners",
            "type": "t_mapping(t_address,t_bool)",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:42"
          },
          {
            "contract": "Ant3Token",
            "label": "uniqueIdExists",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:43"
          },
          {
            "contract": "Ant3Token",
            "label": "userTotalBurned",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:44"
          },
          {
            "contract": "Ant3Token",
            "label": "_team2Address",
            "type": "t_address",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:48"
          },
          {
            "contract": "Ant3Token",
            "label": "_gameChangerAddress",
            "type": "t_address",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:49"
          },
          {
            "contract": "Ant3Token",
            "label": "_farmingPoolAddress",
            "type": "t_address",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:50"
          }
        ],
        "types": {
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          }
        }
      }
    },
    "cfa2249a9d726c11ac3698023b0934e249f2dbd71797a6e6b055e5e828ae3404": {
      "address": "0xFec0f833b66077989Cea95cf5Dd1d643Ef5dC185",
      "txHash": "0x8c89362925e29db0b8b003481ad776846cdff12376cc511fa39eb934225eb20d",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:44"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:394"
          },
          {
            "contract": "ERC20CappedUpgradeable",
            "label": "_cap",
            "type": "t_uint256",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20CappedUpgradeable.sol:15"
          },
          {
            "contract": "ERC20CappedUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20CappedUpgradeable.sol:50"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "DeAnt3Token",
            "label": "_name",
            "type": "t_string_storage",
            "src": "..\\project:\\contracts\\token\\DeAnt3Token.sol:8"
          },
          {
            "contract": "DeAnt3Token",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "..\\project:\\contracts\\token\\DeAnt3Token.sol:9"
          },
          {
            "contract": "DeAnt3Token",
            "label": "_decimals",
            "type": "t_uint8",
            "src": "..\\project:\\contracts\\token\\DeAnt3Token.sol:10"
          },
          {
            "contract": "DeAnt3Token",
            "label": "_rewardAmt",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\token\\DeAnt3Token.sol:11"
          },
          {
            "contract": "DeAnt3Token",
            "label": "_cap",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\token\\DeAnt3Token.sol:12"
          },
          {
            "contract": "DeAnt3Token",
            "label": "_taxFee",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\token\\DeAnt3Token.sol:13"
          },
          {
            "contract": "DeAnt3Token",
            "label": "totalBurned",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\token\\DeAnt3Token.sol:14"
          },
          {
            "contract": "DeAnt3Token",
            "label": "_signers",
            "type": "t_array(t_address)dyn_storage",
            "src": "..\\project:\\contracts\\token\\DeAnt3Token.sol:15"
          },
          {
            "contract": "DeAnt3Token",
            "label": "_mapSigners",
            "type": "t_mapping(t_address,t_bool)",
            "src": "..\\project:\\contracts\\token\\DeAnt3Token.sol:16"
          },
          {
            "contract": "DeAnt3Token",
            "label": "uniqueIdExists",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "..\\project:\\contracts\\token\\DeAnt3Token.sol:17"
          },
          {
            "contract": "DeAnt3Token",
            "label": "userTotalBurned",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\token\\DeAnt3Token.sol:18"
          },
          {
            "contract": "DeAnt3Token",
            "label": "nodeControllerContract",
            "type": "t_address",
            "src": "..\\project:\\contracts\\token\\DeAnt3Token.sol:20"
          }
        ],
        "types": {
          "t_string_storage": {
            "label": "string"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          }
        }
      }
    },
    "f07e605c88caa4225acea64d762fc3dbbd043960cd4b50e0b6ad90322fda2901": {
      "address": "0x9F2b5F0CdD1f02Fab1aF57f07Fd56D36B78F97BC",
      "txHash": "0x84ebff048d34f5bfb7784dfc2dd3a44f9e81edf428c6df2c6b818a0e5a31c027",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "StackingController",
            "label": "ant3Token",
            "type": "t_contract(IAnt3)13576",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:29"
          },
          {
            "contract": "StackingController",
            "label": "lpToken",
            "type": "t_contract(IERC20Upgradeable)971",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:30"
          },
          {
            "contract": "StackingController",
            "label": "stackingPassive",
            "type": "t_contract(IStackingPassive)10681",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:31"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL1",
            "type": "t_contract(IStackingActive)10559",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:32"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL2",
            "type": "t_contract(IStackingActive)10559",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:33"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL3",
            "type": "t_contract(IStackingActive)10559",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:34"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL4",
            "type": "t_contract(IStackingActive)10559",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:35"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL5",
            "type": "t_contract(IStackingActive)10559",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:36"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL6",
            "type": "t_contract(IStackingActive)10559",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:37"
          },
          {
            "contract": "StackingController",
            "label": "memberController",
            "type": "t_contract(IMemberController)2231",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:39"
          },
          {
            "contract": "StackingController",
            "label": "packagePrices",
            "type": "t_struct(PackagePrice)7620_storage",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:40"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveArray",
            "type": "t_array(t_contract(IStackingActive)10559)dyn_storage",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:42"
          },
          {
            "contract": "StackingController",
            "label": "alphaAccmQty",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:43"
          },
          {
            "contract": "StackingController",
            "label": "betaAccmQty",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:44"
          },
          {
            "contract": "StackingController",
            "label": "gammaAccmQty",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:45"
          },
          {
            "contract": "StackingController",
            "label": "referralRank",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:46"
          },
          {
            "contract": "StackingController",
            "label": "today",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:49"
          },
          {
            "contract": "StackingController",
            "label": "minStackForReferral",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:50"
          },
          {
            "contract": "StackingController",
            "label": "defaultSystemQuota",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:51"
          },
          {
            "contract": "StackingController",
            "label": "systemQuota",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:52"
          },
          {
            "contract": "StackingController",
            "label": "defaultUserQuota",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:53"
          },
          {
            "contract": "StackingController",
            "label": "userQuota",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:54"
          },
          {
            "contract": "StackingController",
            "label": "userToday",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:55"
          },
          {
            "contract": "StackingController",
            "label": "maxClaimRound",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:56"
          },
          {
            "contract": "StackingController",
            "label": "minStackAmt",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:57"
          }
        ],
        "types": {
          "t_contract(IAnt3)13576": {
            "label": "contract IAnt3"
          },
          "t_contract(IERC20Upgradeable)971": {
            "label": "contract IERC20Upgradeable"
          },
          "t_contract(IStackingPassive)10681": {
            "label": "contract IStackingPassive"
          },
          "t_contract(IStackingActive)10559": {
            "label": "contract IStackingActive"
          },
          "t_contract(IMemberController)2231": {
            "label": "contract IMemberController"
          },
          "t_struct(PackagePrice)7620_storage": {
            "label": "struct StackingController.PackagePrice",
            "members": [
              {
                "label": "alphaLockPeriod",
                "type": "t_uint256"
              },
              {
                "label": "alphaShareRate",
                "type": "t_uint256"
              },
              {
                "label": "betaLockPeriod",
                "type": "t_uint256"
              },
              {
                "label": "betaShareRate",
                "type": "t_uint256"
              },
              {
                "label": "gammaLockPeriod",
                "type": "t_uint256"
              },
              {
                "label": "gammaShareRate",
                "type": "t_uint256"
              },
              {
                "label": "packageId",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_contract(IStackingActive)10559)dyn_storage": {
            "label": "contract IStackingActive[]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "d125559cce276b7273866935fc010297f4502fcd436b90e8a0f0598e97e64e0e": {
      "address": "0x17cBfE68a82866700821e450534A82cfFccc54CB",
      "txHash": "0x1d005a01886e24c7ae2331a61896220cc129cc70e34d304e32bd31160ff331ac",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "StackingController",
            "label": "ant3Token",
            "type": "t_contract(IAnt3)13576",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:29"
          },
          {
            "contract": "StackingController",
            "label": "lpToken",
            "type": "t_contract(IERC20Upgradeable)971",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:30"
          },
          {
            "contract": "StackingController",
            "label": "stackingPassive",
            "type": "t_contract(IStackingPassive)10681",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:31"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL1",
            "type": "t_contract(IStackingActive)10559",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:32"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL2",
            "type": "t_contract(IStackingActive)10559",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:33"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL3",
            "type": "t_contract(IStackingActive)10559",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:34"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL4",
            "type": "t_contract(IStackingActive)10559",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:35"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL5",
            "type": "t_contract(IStackingActive)10559",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:36"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL6",
            "type": "t_contract(IStackingActive)10559",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:37"
          },
          {
            "contract": "StackingController",
            "label": "memberController",
            "type": "t_contract(IMemberController)2231",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:39"
          },
          {
            "contract": "StackingController",
            "label": "packagePrices",
            "type": "t_struct(PackagePrice)7620_storage",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:40"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveArray",
            "type": "t_array(t_contract(IStackingActive)10559)dyn_storage",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:42"
          },
          {
            "contract": "StackingController",
            "label": "alphaAccmQty",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:43"
          },
          {
            "contract": "StackingController",
            "label": "betaAccmQty",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:44"
          },
          {
            "contract": "StackingController",
            "label": "gammaAccmQty",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:45"
          },
          {
            "contract": "StackingController",
            "label": "referralRank",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:46"
          },
          {
            "contract": "StackingController",
            "label": "today",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:49"
          },
          {
            "contract": "StackingController",
            "label": "minStackForReferral",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:50"
          },
          {
            "contract": "StackingController",
            "label": "defaultSystemQuota",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:51"
          },
          {
            "contract": "StackingController",
            "label": "systemQuota",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:52"
          },
          {
            "contract": "StackingController",
            "label": "defaultUserQuota",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:53"
          },
          {
            "contract": "StackingController",
            "label": "userQuota",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:54"
          },
          {
            "contract": "StackingController",
            "label": "userToday",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:55"
          },
          {
            "contract": "StackingController",
            "label": "maxClaimRound",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:56"
          },
          {
            "contract": "StackingController",
            "label": "minStackAmt",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:57"
          }
        ],
        "types": {
          "t_contract(IAnt3)13576": {
            "label": "contract IAnt3"
          },
          "t_contract(IERC20Upgradeable)971": {
            "label": "contract IERC20Upgradeable"
          },
          "t_contract(IStackingPassive)10681": {
            "label": "contract IStackingPassive"
          },
          "t_contract(IStackingActive)10559": {
            "label": "contract IStackingActive"
          },
          "t_contract(IMemberController)2231": {
            "label": "contract IMemberController"
          },
          "t_struct(PackagePrice)7620_storage": {
            "label": "struct StackingController.PackagePrice",
            "members": [
              {
                "label": "alphaLockPeriod",
                "type": "t_uint256"
              },
              {
                "label": "alphaShareRate",
                "type": "t_uint256"
              },
              {
                "label": "betaLockPeriod",
                "type": "t_uint256"
              },
              {
                "label": "betaShareRate",
                "type": "t_uint256"
              },
              {
                "label": "gammaLockPeriod",
                "type": "t_uint256"
              },
              {
                "label": "gammaShareRate",
                "type": "t_uint256"
              },
              {
                "label": "packageId",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_contract(IStackingActive)10559)dyn_storage": {
            "label": "contract IStackingActive[]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "332bce84500fe86b75cb858a10f048ce2522503fc27cb726484db585e70e8a52": {
      "address": "0x34e3710d287aC68B9B4928538888030c2C23d23F",
      "txHash": "0x1e3b3992ae918c23173cb5b85c3f101b7c610189d047f9ca8672696145ffc2a9",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "NodeController",
            "label": "deAnt3Token",
            "type": "t_contract(IDeAnt3)13578",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:30"
          },
          {
            "contract": "NodeController",
            "label": "ant3Token",
            "type": "t_contract(IAnt3)13568",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:31"
          },
          {
            "contract": "NodeController",
            "label": "guardianToken",
            "type": "t_contract(IERC20Upgradeable)971",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:32"
          },
          {
            "contract": "NodeController",
            "label": "packagePrices",
            "type": "t_struct(PackagePrice)3600_storage",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:33"
          },
          {
            "contract": "NodeController",
            "label": "nodePassive",
            "type": "t_contract(INodePassive)6643",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:34"
          },
          {
            "contract": "NodeController",
            "label": "nodeActiveL1",
            "type": "t_contract(INodeActive)6542",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:35"
          },
          {
            "contract": "NodeController",
            "label": "nodeActiveL2",
            "type": "t_contract(INodeActive)6542",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:36"
          },
          {
            "contract": "NodeController",
            "label": "nodeActiveL3",
            "type": "t_contract(INodeActive)6542",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:37"
          },
          {
            "contract": "NodeController",
            "label": "nodeActiveL4",
            "type": "t_contract(INodeActive)6542",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:38"
          },
          {
            "contract": "NodeController",
            "label": "nodeActiveL5",
            "type": "t_contract(INodeActive)6542",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:39"
          },
          {
            "contract": "NodeController",
            "label": "nodeActiveL6",
            "type": "t_contract(INodeActive)6542",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:40"
          },
          {
            "contract": "NodeController",
            "label": "nodeActiveArray",
            "type": "t_array(t_contract(INodeActive)6542)dyn_storage",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:41"
          },
          {
            "contract": "NodeController",
            "label": "memberController",
            "type": "t_contract(IMemberController)2231",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:42"
          },
          {
            "contract": "NodeController",
            "label": "alphaAccmQty",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:43"
          },
          {
            "contract": "NodeController",
            "label": "betaAccmQty",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:44"
          },
          {
            "contract": "NodeController",
            "label": "gammaAccmQty",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:45"
          },
          {
            "contract": "NodeController",
            "label": "referralRank",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:46"
          },
          {
            "contract": "NodeController",
            "label": "validCaller",
            "type": "t_mapping(t_address,t_bool)",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:47"
          },
          {
            "contract": "NodeController",
            "label": "today",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:50"
          },
          {
            "contract": "NodeController",
            "label": "defaultQuota",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:51"
          },
          {
            "contract": "NodeController",
            "label": "allQuota",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:52"
          },
          {
            "contract": "NodeController",
            "label": "lastPromoCode",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:53"
          },
          {
            "contract": "NodeController",
            "label": "maxClaimRound",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:54"
          },
          {
            "contract": "NodeController",
            "label": "allPromoCode",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:55"
          },
          {
            "contract": "NodeController",
            "label": "deAnt3Decimals",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:76"
          },
          {
            "contract": "NodeController",
            "label": "guardianDecimals",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:77"
          },
          {
            "contract": "NodeController",
            "label": "_guardianCollectAddress",
            "type": "t_address",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:78"
          }
        ],
        "types": {
          "t_contract(IDeAnt3)13578": {
            "label": "contract IDeAnt3"
          },
          "t_contract(IAnt3)13568": {
            "label": "contract IAnt3"
          },
          "t_contract(IERC20Upgradeable)971": {
            "label": "contract IERC20Upgradeable"
          },
          "t_struct(PackagePrice)3600_storage": {
            "label": "struct NodeController.PackagePrice",
            "members": [
              {
                "label": "alphaDeAntPrice",
                "type": "t_uint256"
              },
              {
                "label": "alphaGuardianPrice",
                "type": "t_uint256"
              },
              {
                "label": "betaDeAntPrice",
                "type": "t_uint256"
              },
              {
                "label": "betaGuardianPrice",
                "type": "t_uint256"
              },
              {
                "label": "gammaDeAntPrice",
                "type": "t_uint256"
              },
              {
                "label": "gammaGuardianPrice",
                "type": "t_uint256"
              },
              {
                "label": "packageId",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(INodePassive)6643": {
            "label": "contract INodePassive"
          },
          "t_contract(INodeActive)6542": {
            "label": "contract INodeActive"
          },
          "t_array(t_contract(INodeActive)6542)dyn_storage": {
            "label": "contract INodeActive[]"
          },
          "t_contract(IMemberController)2231": {
            "label": "contract IMemberController"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          }
        }
      }
    },
    "10d26d25ae29e2e5c69e0bba9f27ee1c4ffa2fefd471c3da06263a812409675a": {
      "address": "0x66D169c40A43c7ee6F0910F0188712f79ed0AF68",
      "txHash": "0x65cf0944c5f580cb6ddbf8986f261e856743e37bd602d744f01cef856908917b",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "StackingController",
            "label": "ant3Token",
            "type": "t_contract(IAnt3)13568",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:29"
          },
          {
            "contract": "StackingController",
            "label": "lpToken",
            "type": "t_contract(IERC20Upgradeable)971",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:30"
          },
          {
            "contract": "StackingController",
            "label": "stackingPassive",
            "type": "t_contract(IStackingPassive)10673",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:31"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL1",
            "type": "t_contract(IStackingActive)10551",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:32"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL2",
            "type": "t_contract(IStackingActive)10551",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:33"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL3",
            "type": "t_contract(IStackingActive)10551",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:34"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL4",
            "type": "t_contract(IStackingActive)10551",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:35"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL5",
            "type": "t_contract(IStackingActive)10551",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:36"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL6",
            "type": "t_contract(IStackingActive)10551",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:37"
          },
          {
            "contract": "StackingController",
            "label": "memberController",
            "type": "t_contract(IMemberController)2231",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:39"
          },
          {
            "contract": "StackingController",
            "label": "packagePrices",
            "type": "t_struct(PackagePrice)7612_storage",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:40"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveArray",
            "type": "t_array(t_contract(IStackingActive)10551)dyn_storage",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:42"
          },
          {
            "contract": "StackingController",
            "label": "alphaAccmQty",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:43"
          },
          {
            "contract": "StackingController",
            "label": "betaAccmQty",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:44"
          },
          {
            "contract": "StackingController",
            "label": "gammaAccmQty",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:45"
          },
          {
            "contract": "StackingController",
            "label": "referralRank",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:46"
          },
          {
            "contract": "StackingController",
            "label": "today",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:49"
          },
          {
            "contract": "StackingController",
            "label": "minStackForReferral",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:50"
          },
          {
            "contract": "StackingController",
            "label": "defaultSystemQuota",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:51"
          },
          {
            "contract": "StackingController",
            "label": "systemQuota",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:52"
          },
          {
            "contract": "StackingController",
            "label": "defaultUserQuota",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:53"
          },
          {
            "contract": "StackingController",
            "label": "userQuota",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:54"
          },
          {
            "contract": "StackingController",
            "label": "userToday",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:55"
          },
          {
            "contract": "StackingController",
            "label": "maxClaimRound",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:56"
          },
          {
            "contract": "StackingController",
            "label": "minStackAmt",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:57"
          }
        ],
        "types": {
          "t_contract(IAnt3)13568": {
            "label": "contract IAnt3"
          },
          "t_contract(IERC20Upgradeable)971": {
            "label": "contract IERC20Upgradeable"
          },
          "t_contract(IStackingPassive)10673": {
            "label": "contract IStackingPassive"
          },
          "t_contract(IStackingActive)10551": {
            "label": "contract IStackingActive"
          },
          "t_contract(IMemberController)2231": {
            "label": "contract IMemberController"
          },
          "t_struct(PackagePrice)7612_storage": {
            "label": "struct StackingController.PackagePrice",
            "members": [
              {
                "label": "alphaLockPeriod",
                "type": "t_uint256"
              },
              {
                "label": "alphaShareRate",
                "type": "t_uint256"
              },
              {
                "label": "betaLockPeriod",
                "type": "t_uint256"
              },
              {
                "label": "betaShareRate",
                "type": "t_uint256"
              },
              {
                "label": "gammaLockPeriod",
                "type": "t_uint256"
              },
              {
                "label": "gammaShareRate",
                "type": "t_uint256"
              },
              {
                "label": "packageId",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_contract(IStackingActive)10551)dyn_storage": {
            "label": "contract IStackingActive[]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "8528059c319e0c36ccadde79bbe76a0b5d9c659bf0c019e746df483c9eea0547": {
      "address": "0xaF4D333B6F74A70330996b5A8e14Ed02b9EdA4e2",
      "txHash": "0xecc79b5240bb41bc53b4cab1333635d4b63aa5039ebbe50af6db0e78edd75bf5",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "StackingPassive",
            "label": "ant3Token",
            "type": "t_contract(IAnt3)13680",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:17"
          },
          {
            "contract": "StackingPassive",
            "label": "stackingControllerContract",
            "type": "t_contract(IStackingController)10614",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:18"
          },
          {
            "contract": "StackingPassive",
            "label": "dividingValue",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:19"
          },
          {
            "contract": "StackingPassive",
            "label": "lastRound",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:20"
          },
          {
            "contract": "StackingPassive",
            "label": "lastMoId",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:21"
          },
          {
            "contract": "StackingPassive",
            "label": "sortedRoundForDeductShare",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:22"
          },
          {
            "contract": "StackingPassive",
            "label": "roundDeductShare",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:23"
          },
          {
            "contract": "StackingPassive",
            "label": "rounds",
            "type": "t_mapping(t_uint256,t_struct(Round)10625_storage)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:24"
          },
          {
            "contract": "StackingPassive",
            "label": "allOrders",
            "type": "t_mapping(t_uint256,t_struct(Order)10666_storage)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:25"
          },
          {
            "contract": "StackingPassive",
            "label": "allUsers",
            "type": "t_mapping(t_address,t_struct(User)10649_storage)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:26"
          },
          {
            "contract": "StackingPassive",
            "label": "roundTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:27"
          },
          {
            "contract": "StackingPassive",
            "label": "userClockActive",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:28"
          }
        ],
        "types": {
          "t_contract(IAnt3)13680": {
            "label": "contract IAnt3"
          },
          "t_contract(IStackingController)10614": {
            "label": "contract IStackingController"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_struct(Round)10625_storage)": {
            "label": "mapping(uint256 => struct Round)"
          },
          "t_struct(Round)10625_storage": {
            "label": "struct Round",
            "members": [
              {
                "label": "toDistribute",
                "type": "t_uint256"
              },
              {
                "label": "toCarryForward",
                "type": "t_uint256"
              },
              {
                "label": "accmStakedShare",
                "type": "t_uint256"
              },
              {
                "label": "startTime",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(Order)10666_storage)": {
            "label": "mapping(uint256 => struct Order)"
          },
          "t_struct(Order)10666_storage": {
            "label": "struct Order",
            "members": [
              {
                "label": "startRound",
                "type": "t_uint256"
              },
              {
                "label": "endRound",
                "type": "t_uint256"
              },
              {
                "label": "shareReward",
                "type": "t_uint256"
              },
              {
                "label": "oriClock",
                "type": "t_uint256"
              },
              {
                "label": "endClock",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "packageId",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(User)10649_storage)": {
            "label": "mapping(address => struct User)"
          },
          "t_struct(User)10649_storage": {
            "label": "struct User",
            "members": [
              {
                "label": "startingIndexForAddShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForAddShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundAddShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "startingIndexForDeductShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForDeductShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundDeductShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "userOrders",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "lastClaimRound",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "f65465d5cdf1e0a31caa7d4f076b80174de93bdb1e7a049fb5416b8c3243206f": {
      "address": "0x4880a9a1B27E8d0d32c868CEeA95EDC2FE3D0D93",
      "txHash": "0xad707fcfb4e026544d8ea226610b858b8a42887e82f3ca52865c43550ec619d3",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "StackingPassive",
            "label": "ant3Token",
            "type": "t_contract(IAnt3)13711",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:17"
          },
          {
            "contract": "StackingPassive",
            "label": "stackingControllerContract",
            "type": "t_contract(IStackingController)10645",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:18"
          },
          {
            "contract": "StackingPassive",
            "label": "dividingValue",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:19"
          },
          {
            "contract": "StackingPassive",
            "label": "lastRound",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:20"
          },
          {
            "contract": "StackingPassive",
            "label": "lastMoId",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:21"
          },
          {
            "contract": "StackingPassive",
            "label": "sortedRoundForDeductShare",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:22"
          },
          {
            "contract": "StackingPassive",
            "label": "roundDeductShare",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:23"
          },
          {
            "contract": "StackingPassive",
            "label": "rounds",
            "type": "t_mapping(t_uint256,t_struct(Round)10656_storage)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:24"
          },
          {
            "contract": "StackingPassive",
            "label": "allOrders",
            "type": "t_mapping(t_uint256,t_struct(Order)10697_storage)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:25"
          },
          {
            "contract": "StackingPassive",
            "label": "allUsers",
            "type": "t_mapping(t_address,t_struct(User)10680_storage)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:26"
          },
          {
            "contract": "StackingPassive",
            "label": "roundTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:27"
          },
          {
            "contract": "StackingPassive",
            "label": "userClockActive",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:28"
          }
        ],
        "types": {
          "t_contract(IAnt3)13711": {
            "label": "contract IAnt3"
          },
          "t_contract(IStackingController)10645": {
            "label": "contract IStackingController"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_struct(Round)10656_storage)": {
            "label": "mapping(uint256 => struct Round)"
          },
          "t_struct(Round)10656_storage": {
            "label": "struct Round",
            "members": [
              {
                "label": "toDistribute",
                "type": "t_uint256"
              },
              {
                "label": "toCarryForward",
                "type": "t_uint256"
              },
              {
                "label": "accmStakedShare",
                "type": "t_uint256"
              },
              {
                "label": "startTime",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(Order)10697_storage)": {
            "label": "mapping(uint256 => struct Order)"
          },
          "t_struct(Order)10697_storage": {
            "label": "struct Order",
            "members": [
              {
                "label": "startRound",
                "type": "t_uint256"
              },
              {
                "label": "endRound",
                "type": "t_uint256"
              },
              {
                "label": "shareReward",
                "type": "t_uint256"
              },
              {
                "label": "oriClock",
                "type": "t_uint256"
              },
              {
                "label": "endClock",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "packageId",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(User)10680_storage)": {
            "label": "mapping(address => struct User)"
          },
          "t_struct(User)10680_storage": {
            "label": "struct User",
            "members": [
              {
                "label": "startingIndexForAddShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForAddShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundAddShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "startingIndexForDeductShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForDeductShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundDeductShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "userOrders",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "lastClaimRound",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "fb1153bb22a51d4b373d2580b0d8e9640caedc4d1370c78e1c346900947755a9": {
      "address": "0x0B2817aE0d578138f9d073899f5cBA3eACb59899",
      "txHash": "0xce0b9391a47e23971dcf27b3cf0e24f6690e90d552f4f45ee284e4fe4f8266b8",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "StackingPassive",
            "label": "ant3Token",
            "type": "t_contract(IAnt3)13728",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:17"
          },
          {
            "contract": "StackingPassive",
            "label": "stackingControllerContract",
            "type": "t_contract(IStackingController)10662",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:18"
          },
          {
            "contract": "StackingPassive",
            "label": "dividingValue",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:19"
          },
          {
            "contract": "StackingPassive",
            "label": "lastRound",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:20"
          },
          {
            "contract": "StackingPassive",
            "label": "lastMoId",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:21"
          },
          {
            "contract": "StackingPassive",
            "label": "sortedRoundForDeductShare",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:22"
          },
          {
            "contract": "StackingPassive",
            "label": "roundDeductShare",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:23"
          },
          {
            "contract": "StackingPassive",
            "label": "rounds",
            "type": "t_mapping(t_uint256,t_struct(Round)10673_storage)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:24"
          },
          {
            "contract": "StackingPassive",
            "label": "allOrders",
            "type": "t_mapping(t_uint256,t_struct(Order)10714_storage)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:25"
          },
          {
            "contract": "StackingPassive",
            "label": "allUsers",
            "type": "t_mapping(t_address,t_struct(User)10697_storage)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:26"
          },
          {
            "contract": "StackingPassive",
            "label": "roundTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:27"
          },
          {
            "contract": "StackingPassive",
            "label": "userClockActive",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:28"
          }
        ],
        "types": {
          "t_contract(IAnt3)13728": {
            "label": "contract IAnt3"
          },
          "t_contract(IStackingController)10662": {
            "label": "contract IStackingController"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_struct(Round)10673_storage)": {
            "label": "mapping(uint256 => struct Round)"
          },
          "t_struct(Round)10673_storage": {
            "label": "struct Round",
            "members": [
              {
                "label": "toDistribute",
                "type": "t_uint256"
              },
              {
                "label": "toCarryForward",
                "type": "t_uint256"
              },
              {
                "label": "accmStakedShare",
                "type": "t_uint256"
              },
              {
                "label": "startTime",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(Order)10714_storage)": {
            "label": "mapping(uint256 => struct Order)"
          },
          "t_struct(Order)10714_storage": {
            "label": "struct Order",
            "members": [
              {
                "label": "startRound",
                "type": "t_uint256"
              },
              {
                "label": "endRound",
                "type": "t_uint256"
              },
              {
                "label": "shareReward",
                "type": "t_uint256"
              },
              {
                "label": "oriClock",
                "type": "t_uint256"
              },
              {
                "label": "endClock",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "packageId",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(User)10697_storage)": {
            "label": "mapping(address => struct User)"
          },
          "t_struct(User)10697_storage": {
            "label": "struct User",
            "members": [
              {
                "label": "startingIndexForAddShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForAddShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundAddShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "startingIndexForDeductShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForDeductShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundDeductShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "userOrders",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "lastClaimRound",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "060b0c51b1b30794f05ad5dc12204ef35ed4f6d1bbadcb00680116d62f301008": {
      "address": "0x5cc1E8734ad1bFCEeA736343e8b78d34d97c14ac",
      "txHash": "0x2ec10fd8d67ef88fe02375f976f0c885de95f2fa3ae18dc5d0483aa7c25714e1",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "StackingPassive",
            "label": "ant3Token",
            "type": "t_contract(IAnt3)13734",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:17"
          },
          {
            "contract": "StackingPassive",
            "label": "stackingControllerContract",
            "type": "t_contract(IStackingController)10668",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:18"
          },
          {
            "contract": "StackingPassive",
            "label": "dividingValue",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:19"
          },
          {
            "contract": "StackingPassive",
            "label": "lastRound",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:20"
          },
          {
            "contract": "StackingPassive",
            "label": "lastMoId",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:21"
          },
          {
            "contract": "StackingPassive",
            "label": "sortedRoundForDeductShare",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:22"
          },
          {
            "contract": "StackingPassive",
            "label": "roundDeductShare",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:23"
          },
          {
            "contract": "StackingPassive",
            "label": "rounds",
            "type": "t_mapping(t_uint256,t_struct(Round)10679_storage)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:24"
          },
          {
            "contract": "StackingPassive",
            "label": "allOrders",
            "type": "t_mapping(t_uint256,t_struct(Order)10720_storage)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:25"
          },
          {
            "contract": "StackingPassive",
            "label": "allUsers",
            "type": "t_mapping(t_address,t_struct(User)10703_storage)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:26"
          },
          {
            "contract": "StackingPassive",
            "label": "roundTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:27"
          },
          {
            "contract": "StackingPassive",
            "label": "userClockActive",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:28"
          }
        ],
        "types": {
          "t_contract(IAnt3)13734": {
            "label": "contract IAnt3"
          },
          "t_contract(IStackingController)10668": {
            "label": "contract IStackingController"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_struct(Round)10679_storage)": {
            "label": "mapping(uint256 => struct Round)"
          },
          "t_struct(Round)10679_storage": {
            "label": "struct Round",
            "members": [
              {
                "label": "toDistribute",
                "type": "t_uint256"
              },
              {
                "label": "toCarryForward",
                "type": "t_uint256"
              },
              {
                "label": "accmStakedShare",
                "type": "t_uint256"
              },
              {
                "label": "startTime",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(Order)10720_storage)": {
            "label": "mapping(uint256 => struct Order)"
          },
          "t_struct(Order)10720_storage": {
            "label": "struct Order",
            "members": [
              {
                "label": "startRound",
                "type": "t_uint256"
              },
              {
                "label": "endRound",
                "type": "t_uint256"
              },
              {
                "label": "shareReward",
                "type": "t_uint256"
              },
              {
                "label": "oriClock",
                "type": "t_uint256"
              },
              {
                "label": "endClock",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "packageId",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(User)10703_storage)": {
            "label": "mapping(address => struct User)"
          },
          "t_struct(User)10703_storage": {
            "label": "struct User",
            "members": [
              {
                "label": "startingIndexForAddShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForAddShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundAddShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "startingIndexForDeductShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForDeductShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundDeductShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "userOrders",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "lastClaimRound",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "3386f5851b322951cab64c522c8ad327a935d8c7afce762837f576f493c81d5a": {
      "address": "0xf252606003fF68Fae96429c592b50ADc11E00202",
      "txHash": "0x2ab86f71afe46c54283b150feef9b211aa47a6034df63c3085622d4c5081de4b",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "StackingPassive",
            "label": "ant3Token",
            "type": "t_contract(IAnt3)13706",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:17"
          },
          {
            "contract": "StackingPassive",
            "label": "stackingControllerContract",
            "type": "t_contract(IStackingController)10640",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:18"
          },
          {
            "contract": "StackingPassive",
            "label": "dividingValue",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:19"
          },
          {
            "contract": "StackingPassive",
            "label": "lastRound",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:20"
          },
          {
            "contract": "StackingPassive",
            "label": "lastMoId",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:21"
          },
          {
            "contract": "StackingPassive",
            "label": "sortedRoundForDeductShare",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:22"
          },
          {
            "contract": "StackingPassive",
            "label": "roundDeductShare",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:23"
          },
          {
            "contract": "StackingPassive",
            "label": "rounds",
            "type": "t_mapping(t_uint256,t_struct(Round)10651_storage)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:24"
          },
          {
            "contract": "StackingPassive",
            "label": "allOrders",
            "type": "t_mapping(t_uint256,t_struct(Order)10692_storage)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:25"
          },
          {
            "contract": "StackingPassive",
            "label": "allUsers",
            "type": "t_mapping(t_address,t_struct(User)10675_storage)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:26"
          },
          {
            "contract": "StackingPassive",
            "label": "roundTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:27"
          },
          {
            "contract": "StackingPassive",
            "label": "userClockActive",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:28"
          }
        ],
        "types": {
          "t_contract(IAnt3)13706": {
            "label": "contract IAnt3"
          },
          "t_contract(IStackingController)10640": {
            "label": "contract IStackingController"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_struct(Round)10651_storage)": {
            "label": "mapping(uint256 => struct Round)"
          },
          "t_struct(Round)10651_storage": {
            "label": "struct Round",
            "members": [
              {
                "label": "toDistribute",
                "type": "t_uint256"
              },
              {
                "label": "toCarryForward",
                "type": "t_uint256"
              },
              {
                "label": "accmStakedShare",
                "type": "t_uint256"
              },
              {
                "label": "startTime",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(Order)10692_storage)": {
            "label": "mapping(uint256 => struct Order)"
          },
          "t_struct(Order)10692_storage": {
            "label": "struct Order",
            "members": [
              {
                "label": "startRound",
                "type": "t_uint256"
              },
              {
                "label": "endRound",
                "type": "t_uint256"
              },
              {
                "label": "shareReward",
                "type": "t_uint256"
              },
              {
                "label": "oriClock",
                "type": "t_uint256"
              },
              {
                "label": "endClock",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "packageId",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(User)10675_storage)": {
            "label": "mapping(address => struct User)"
          },
          "t_struct(User)10675_storage": {
            "label": "struct User",
            "members": [
              {
                "label": "startingIndexForAddShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForAddShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundAddShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "startingIndexForDeductShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForDeductShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundDeductShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "userOrders",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "lastClaimRound",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "b4c8ed31bf0e96ea40fc60521feafcdeff0d306e7a0f723d5c56f27404f645f5": {
      "address": "0xf031Df09B43F98932709e483F48835ae756F1Dc1",
      "txHash": "0xc374f4f91e38b7e9b64b28e57cf2f38ac734c4ceca01482dbe752440fcb7244f",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "StackingPassive",
            "label": "ant3Token",
            "type": "t_contract(IAnt3)13676",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:17"
          },
          {
            "contract": "StackingPassive",
            "label": "stackingControllerContract",
            "type": "t_contract(IStackingController)10610",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:18"
          },
          {
            "contract": "StackingPassive",
            "label": "dividingValue",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:19"
          },
          {
            "contract": "StackingPassive",
            "label": "lastRound",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:20"
          },
          {
            "contract": "StackingPassive",
            "label": "lastMoId",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:21"
          },
          {
            "contract": "StackingPassive",
            "label": "sortedRoundForDeductShare",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:22"
          },
          {
            "contract": "StackingPassive",
            "label": "roundDeductShare",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:23"
          },
          {
            "contract": "StackingPassive",
            "label": "rounds",
            "type": "t_mapping(t_uint256,t_struct(Round)10621_storage)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:24"
          },
          {
            "contract": "StackingPassive",
            "label": "allOrders",
            "type": "t_mapping(t_uint256,t_struct(Order)10662_storage)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:25"
          },
          {
            "contract": "StackingPassive",
            "label": "allUsers",
            "type": "t_mapping(t_address,t_struct(User)10645_storage)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:26"
          },
          {
            "contract": "StackingPassive",
            "label": "roundTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:27"
          },
          {
            "contract": "StackingPassive",
            "label": "userClockActive",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:28"
          }
        ],
        "types": {
          "t_contract(IAnt3)13676": {
            "label": "contract IAnt3"
          },
          "t_contract(IStackingController)10610": {
            "label": "contract IStackingController"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_struct(Round)10621_storage)": {
            "label": "mapping(uint256 => struct Round)"
          },
          "t_struct(Round)10621_storage": {
            "label": "struct Round",
            "members": [
              {
                "label": "toDistribute",
                "type": "t_uint256"
              },
              {
                "label": "toCarryForward",
                "type": "t_uint256"
              },
              {
                "label": "accmStakedShare",
                "type": "t_uint256"
              },
              {
                "label": "startTime",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(Order)10662_storage)": {
            "label": "mapping(uint256 => struct Order)"
          },
          "t_struct(Order)10662_storage": {
            "label": "struct Order",
            "members": [
              {
                "label": "startRound",
                "type": "t_uint256"
              },
              {
                "label": "endRound",
                "type": "t_uint256"
              },
              {
                "label": "shareReward",
                "type": "t_uint256"
              },
              {
                "label": "oriClock",
                "type": "t_uint256"
              },
              {
                "label": "endClock",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "packageId",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(User)10645_storage)": {
            "label": "mapping(address => struct User)"
          },
          "t_struct(User)10645_storage": {
            "label": "struct User",
            "members": [
              {
                "label": "startingIndexForAddShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForAddShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundAddShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "startingIndexForDeductShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForDeductShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundDeductShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "userOrders",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "lastClaimRound",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "d159401f1bf3f1e6f1cedddff901cf769badb4e668d090972e4c1e5ec3081d11": {
      "address": "0x8865B60d565F67AB38dc166A68e3e3D752a9f2e4",
      "txHash": "0xf6fa4d72aff12e46585a0cdfcda5df3e693f602e0bbb490cd34cbadb00084ae1",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "StackingActiveL1",
            "label": "ant3Token",
            "type": "t_contract(IAnt3)13715",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:18"
          },
          {
            "contract": "StackingActiveL1",
            "label": "stackingControllerContract",
            "type": "t_contract(IStackingController)10649",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:20"
          },
          {
            "contract": "StackingActiveL1",
            "label": "dividingValue",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:21"
          },
          {
            "contract": "StackingActiveL1",
            "label": "lastRound",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:22"
          },
          {
            "contract": "StackingActiveL1",
            "label": "lastMoId",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:23"
          },
          {
            "contract": "StackingActiveL1",
            "label": "sortedRoundForDeductShare",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:24"
          },
          {
            "contract": "StackingActiveL1",
            "label": "roundDeductShare",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:25"
          },
          {
            "contract": "StackingActiveL1",
            "label": "rounds",
            "type": "t_mapping(t_uint256,t_struct(Round)10660_storage)",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:26"
          },
          {
            "contract": "StackingActiveL1",
            "label": "allOrders",
            "type": "t_mapping(t_uint256,t_struct(Order)10701_storage)",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:27"
          },
          {
            "contract": "StackingActiveL1",
            "label": "allUsers",
            "type": "t_mapping(t_address,t_struct(User)10684_storage)",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:28"
          },
          {
            "contract": "StackingActiveL1",
            "label": "roundTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:29"
          }
        ],
        "types": {
          "t_contract(IAnt3)13715": {
            "label": "contract IAnt3"
          },
          "t_contract(IStackingController)10649": {
            "label": "contract IStackingController"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_struct(Round)10660_storage)": {
            "label": "mapping(uint256 => struct Round)"
          },
          "t_struct(Round)10660_storage": {
            "label": "struct Round",
            "members": [
              {
                "label": "toDistribute",
                "type": "t_uint256"
              },
              {
                "label": "toCarryForward",
                "type": "t_uint256"
              },
              {
                "label": "accmStakedShare",
                "type": "t_uint256"
              },
              {
                "label": "startTime",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(Order)10701_storage)": {
            "label": "mapping(uint256 => struct Order)"
          },
          "t_struct(Order)10701_storage": {
            "label": "struct Order",
            "members": [
              {
                "label": "startRound",
                "type": "t_uint256"
              },
              {
                "label": "endRound",
                "type": "t_uint256"
              },
              {
                "label": "shareReward",
                "type": "t_uint256"
              },
              {
                "label": "oriClock",
                "type": "t_uint256"
              },
              {
                "label": "endClock",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "packageId",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(User)10684_storage)": {
            "label": "mapping(address => struct User)"
          },
          "t_struct(User)10684_storage": {
            "label": "struct User",
            "members": [
              {
                "label": "startingIndexForAddShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForAddShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundAddShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "startingIndexForDeductShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForDeductShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundDeductShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "userOrders",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "lastClaimRound",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "dc09422ecb1c5dd8ec31fba3b65facb97875ef6b249f67e6a5f66d39e746aa33": {
      "address": "0x4d56677ea65ae7790DFEB7094f7388ED71818D8F",
      "txHash": "0x6dbb076f5274ae5e5a35deb847aa6e468ab51d210d7878fdb1c8c44f8a065e53",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "NodePassive",
            "label": "ant3Token",
            "type": "t_contract(IAnt3)13715",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:17"
          },
          {
            "contract": "NodePassive",
            "label": "nodeControllerContract",
            "type": "t_contract(INodeController)6606",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:18"
          },
          {
            "contract": "NodePassive",
            "label": "dividingValue",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:19"
          },
          {
            "contract": "NodePassive",
            "label": "lastRound",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:20"
          },
          {
            "contract": "NodePassive",
            "label": "lastMoId",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:21"
          },
          {
            "contract": "NodePassive",
            "label": "sortedRoundForDeductShare",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:22"
          },
          {
            "contract": "NodePassive",
            "label": "roundDeductShare",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:23"
          },
          {
            "contract": "NodePassive",
            "label": "rounds",
            "type": "t_mapping(t_uint256,t_struct(Round)6617_storage)",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:24"
          },
          {
            "contract": "NodePassive",
            "label": "allOrders",
            "type": "t_mapping(t_uint256,t_struct(Order)6652_storage)",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:25"
          },
          {
            "contract": "NodePassive",
            "label": "allUsers",
            "type": "t_mapping(t_address,t_struct(User)6641_storage)",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:26"
          },
          {
            "contract": "NodePassive",
            "label": "roundTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:27"
          },
          {
            "contract": "NodePassive",
            "label": "userClockActive",
            "type": "t_mapping(t_address,t_bool)",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:28"
          },
          {
            "contract": "NodePassive",
            "label": "userValidOrderCount",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:29"
          }
        ],
        "types": {
          "t_contract(IAnt3)13715": {
            "label": "contract IAnt3"
          },
          "t_contract(INodeController)6606": {
            "label": "contract INodeController"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_struct(Round)6617_storage)": {
            "label": "mapping(uint256 => struct Round)"
          },
          "t_struct(Round)6617_storage": {
            "label": "struct Round",
            "members": [
              {
                "label": "toDistribute",
                "type": "t_uint256"
              },
              {
                "label": "toCarryForward",
                "type": "t_uint256"
              },
              {
                "label": "accmStakedShare",
                "type": "t_uint256"
              },
              {
                "label": "startTime",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(Order)6652_storage)": {
            "label": "mapping(uint256 => struct Order)"
          },
          "t_struct(Order)6652_storage": {
            "label": "struct Order",
            "members": [
              {
                "label": "startRound",
                "type": "t_uint256"
              },
              {
                "label": "endRound",
                "type": "t_uint256"
              },
              {
                "label": "shareReward",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "packageId",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(User)6641_storage)": {
            "label": "mapping(address => struct User)"
          },
          "t_struct(User)6641_storage": {
            "label": "struct User",
            "members": [
              {
                "label": "startingIndexForAddShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForAddShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundAddShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "startingIndexForDeductShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForDeductShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundDeductShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "userOrders",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "lastClaimRound",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          }
        }
      }
    },
    "1facad8ffe05d5b0daf9b41d060b1aaa9c10394d39b10b1ed558d7c59b6be1e8": {
      "address": "0x28D5E06D78b239662ff177270cF41709b3F1Cd4e",
      "txHash": "0xfa8e84233b33a966a234899daec9e2ea7b98b41121b18bcf11fed710d25e2be7",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "NodeActiveL1",
            "label": "ant3Token",
            "type": "t_contract(IAnt3)13715",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:18"
          },
          {
            "contract": "NodeActiveL1",
            "label": "nodeControllerContract",
            "type": "t_contract(INodeController)6606",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:20"
          },
          {
            "contract": "NodeActiveL1",
            "label": "dividingValue",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:21"
          },
          {
            "contract": "NodeActiveL1",
            "label": "lastRound",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:22"
          },
          {
            "contract": "NodeActiveL1",
            "label": "lastMoId",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:23"
          },
          {
            "contract": "NodeActiveL1",
            "label": "sortedRoundForDeductShare",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:24"
          },
          {
            "contract": "NodeActiveL1",
            "label": "roundDeductShare",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:25"
          },
          {
            "contract": "NodeActiveL1",
            "label": "rounds",
            "type": "t_mapping(t_uint256,t_struct(Round)6617_storage)",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:26"
          },
          {
            "contract": "NodeActiveL1",
            "label": "allOrders",
            "type": "t_mapping(t_uint256,t_struct(Order)6652_storage)",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:27"
          },
          {
            "contract": "NodeActiveL1",
            "label": "allUsers",
            "type": "t_mapping(t_address,t_struct(User)6641_storage)",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:28"
          },
          {
            "contract": "NodeActiveL1",
            "label": "roundTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:29"
          }
        ],
        "types": {
          "t_contract(IAnt3)13715": {
            "label": "contract IAnt3"
          },
          "t_contract(INodeController)6606": {
            "label": "contract INodeController"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_struct(Round)6617_storage)": {
            "label": "mapping(uint256 => struct Round)"
          },
          "t_struct(Round)6617_storage": {
            "label": "struct Round",
            "members": [
              {
                "label": "toDistribute",
                "type": "t_uint256"
              },
              {
                "label": "toCarryForward",
                "type": "t_uint256"
              },
              {
                "label": "accmStakedShare",
                "type": "t_uint256"
              },
              {
                "label": "startTime",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(Order)6652_storage)": {
            "label": "mapping(uint256 => struct Order)"
          },
          "t_struct(Order)6652_storage": {
            "label": "struct Order",
            "members": [
              {
                "label": "startRound",
                "type": "t_uint256"
              },
              {
                "label": "endRound",
                "type": "t_uint256"
              },
              {
                "label": "shareReward",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "packageId",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(User)6641_storage)": {
            "label": "mapping(address => struct User)"
          },
          "t_struct(User)6641_storage": {
            "label": "struct User",
            "members": [
              {
                "label": "startingIndexForAddShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForAddShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundAddShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "startingIndexForDeductShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForDeductShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundDeductShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "userOrders",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "lastClaimRound",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "ab3527640d8cd0b1d551c26767f96a326310f192bf761ac9e33d7f1e0b682e1c": {
      "address": "0x365590a513a1Ee7957BBA8C8210eB18e6414EA8a",
      "txHash": "0xfb5443f9a2c0b71e4c30c11ce1d9c29c35a11218e9aef614b93649e8237d96f4",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "StackingController",
            "label": "ant3Token",
            "type": "t_contract(IAnt3)13761",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:29"
          },
          {
            "contract": "StackingController",
            "label": "lpToken",
            "type": "t_contract(IERC20Upgradeable)971",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:30"
          },
          {
            "contract": "StackingController",
            "label": "stackingPassive",
            "type": "t_contract(IStackingPassive)10780",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:31"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL1",
            "type": "t_contract(IStackingActive)10658",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:32"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL2",
            "type": "t_contract(IStackingActive)10658",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:33"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL3",
            "type": "t_contract(IStackingActive)10658",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:34"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL4",
            "type": "t_contract(IStackingActive)10658",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:35"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL5",
            "type": "t_contract(IStackingActive)10658",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:36"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL6",
            "type": "t_contract(IStackingActive)10658",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:37"
          },
          {
            "contract": "StackingController",
            "label": "memberController",
            "type": "t_contract(IMemberController)2269",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:39"
          },
          {
            "contract": "StackingController",
            "label": "packagePrices",
            "type": "t_struct(PackagePrice)7689_storage",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:40"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveArray",
            "type": "t_array(t_contract(IStackingActive)10658)dyn_storage",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:42"
          },
          {
            "contract": "StackingController",
            "label": "alphaAccmQty",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:43"
          },
          {
            "contract": "StackingController",
            "label": "betaAccmQty",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:44"
          },
          {
            "contract": "StackingController",
            "label": "gammaAccmQty",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:45"
          },
          {
            "contract": "StackingController",
            "label": "referralRank",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:46"
          },
          {
            "contract": "StackingController",
            "label": "today",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:49"
          },
          {
            "contract": "StackingController",
            "label": "minStackForReferral",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:50"
          },
          {
            "contract": "StackingController",
            "label": "defaultSystemQuota",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:51"
          },
          {
            "contract": "StackingController",
            "label": "systemQuota",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:52"
          },
          {
            "contract": "StackingController",
            "label": "defaultUserQuota",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:53"
          },
          {
            "contract": "StackingController",
            "label": "userQuota",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:54"
          },
          {
            "contract": "StackingController",
            "label": "userToday",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:55"
          },
          {
            "contract": "StackingController",
            "label": "maxClaimRound",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:56"
          },
          {
            "contract": "StackingController",
            "label": "minStackAmt",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:57"
          }
        ],
        "types": {
          "t_contract(IAnt3)13761": {
            "label": "contract IAnt3"
          },
          "t_contract(IERC20Upgradeable)971": {
            "label": "contract IERC20Upgradeable"
          },
          "t_contract(IStackingPassive)10780": {
            "label": "contract IStackingPassive"
          },
          "t_contract(IStackingActive)10658": {
            "label": "contract IStackingActive"
          },
          "t_contract(IMemberController)2269": {
            "label": "contract IMemberController"
          },
          "t_struct(PackagePrice)7689_storage": {
            "label": "struct StackingController.PackagePrice",
            "members": [
              {
                "label": "alphaLockPeriod",
                "type": "t_uint256"
              },
              {
                "label": "alphaShareRate",
                "type": "t_uint256"
              },
              {
                "label": "betaLockPeriod",
                "type": "t_uint256"
              },
              {
                "label": "betaShareRate",
                "type": "t_uint256"
              },
              {
                "label": "gammaLockPeriod",
                "type": "t_uint256"
              },
              {
                "label": "gammaShareRate",
                "type": "t_uint256"
              },
              {
                "label": "packageId",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_contract(IStackingActive)10658)dyn_storage": {
            "label": "contract IStackingActive[]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "1c1e83f91a1ecb122a84a3d49b6629deb991de06607f04f494c44c1b646a4147": {
      "address": "0x9E189c7E5f74BeEBdBA58bD527ebEc0A33C5E311",
      "txHash": "0x38607149a49ee05146a48c3e969dc25c01cded015ffa23bfd41e9d7580e8ada2",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "StackingController",
            "label": "ant3Token",
            "type": "t_contract(IAnt3)13808",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:29"
          },
          {
            "contract": "StackingController",
            "label": "lpToken",
            "type": "t_contract(IERC20Upgradeable)971",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:30"
          },
          {
            "contract": "StackingController",
            "label": "stackingPassive",
            "type": "t_contract(IStackingPassive)10811",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:31"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL1",
            "type": "t_contract(IStackingActive)10684",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:32"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL2",
            "type": "t_contract(IStackingActive)10684",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:33"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL3",
            "type": "t_contract(IStackingActive)10684",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:34"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL4",
            "type": "t_contract(IStackingActive)10684",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:35"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL5",
            "type": "t_contract(IStackingActive)10684",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:36"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL6",
            "type": "t_contract(IStackingActive)10684",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:37"
          },
          {
            "contract": "StackingController",
            "label": "memberController",
            "type": "t_contract(IMemberController)2269",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:39"
          },
          {
            "contract": "StackingController",
            "label": "packagePrices",
            "type": "t_struct(PackagePrice)7687_storage",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:40"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveArray",
            "type": "t_array(t_contract(IStackingActive)10684)dyn_storage",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:42"
          },
          {
            "contract": "StackingController",
            "label": "alphaAccmQty",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:43"
          },
          {
            "contract": "StackingController",
            "label": "betaAccmQty",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:44"
          },
          {
            "contract": "StackingController",
            "label": "gammaAccmQty",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:45"
          },
          {
            "contract": "StackingController",
            "label": "referralRank",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:46"
          },
          {
            "contract": "StackingController",
            "label": "today",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:49"
          },
          {
            "contract": "StackingController",
            "label": "minStackForReferral",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:50"
          },
          {
            "contract": "StackingController",
            "label": "defaultSystemQuota",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:51"
          },
          {
            "contract": "StackingController",
            "label": "systemQuota",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:52"
          },
          {
            "contract": "StackingController",
            "label": "defaultUserQuota",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:53"
          },
          {
            "contract": "StackingController",
            "label": "userQuota",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:54"
          },
          {
            "contract": "StackingController",
            "label": "userToday",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:55"
          },
          {
            "contract": "StackingController",
            "label": "maxClaimRound",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:56"
          },
          {
            "contract": "StackingController",
            "label": "minStackAmt",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:57"
          },
          {
            "contract": "StackingController",
            "label": "shareMultiplier",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:58"
          }
        ],
        "types": {
          "t_contract(IAnt3)13808": {
            "label": "contract IAnt3"
          },
          "t_contract(IERC20Upgradeable)971": {
            "label": "contract IERC20Upgradeable"
          },
          "t_contract(IStackingPassive)10811": {
            "label": "contract IStackingPassive"
          },
          "t_contract(IStackingActive)10684": {
            "label": "contract IStackingActive"
          },
          "t_contract(IMemberController)2269": {
            "label": "contract IMemberController"
          },
          "t_struct(PackagePrice)7687_storage": {
            "label": "struct StackingController.PackagePrice",
            "members": [
              {
                "label": "alphaLockPeriod",
                "type": "t_uint256"
              },
              {
                "label": "alphaShareRate",
                "type": "t_uint256"
              },
              {
                "label": "betaLockPeriod",
                "type": "t_uint256"
              },
              {
                "label": "betaShareRate",
                "type": "t_uint256"
              },
              {
                "label": "gammaLockPeriod",
                "type": "t_uint256"
              },
              {
                "label": "gammaShareRate",
                "type": "t_uint256"
              },
              {
                "label": "packageId",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_contract(IStackingActive)10684)dyn_storage": {
            "label": "contract IStackingActive[]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "24bc5dcb36ad2eebbb8cf4012aad350d620a72fbc0c56e68f7998745432324fe": {
      "address": "0x5B5c8164cb05Be4E37A2dab3c0C263B86d94d8Bb",
      "txHash": "0x65af85a8c16c25fdbe0b542d0974bbd04a070fba1256f09ee240211543099052",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "StackingPassive",
            "label": "ant3Token",
            "type": "t_contract(IAnt3)13808",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:17"
          },
          {
            "contract": "StackingPassive",
            "label": "stackingControllerContract",
            "type": "t_contract(IStackingController)10697",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:18"
          },
          {
            "contract": "StackingPassive",
            "label": "dividingValue",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:19"
          },
          {
            "contract": "StackingPassive",
            "label": "lastRound",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:20"
          },
          {
            "contract": "StackingPassive",
            "label": "lastMoId",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:21"
          },
          {
            "contract": "StackingPassive",
            "label": "sortedRoundForDeductShare",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:22"
          },
          {
            "contract": "StackingPassive",
            "label": "roundDeductShare",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:23"
          },
          {
            "contract": "StackingPassive",
            "label": "rounds",
            "type": "t_mapping(t_uint256,t_struct(Round)10708_storage)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:24"
          },
          {
            "contract": "StackingPassive",
            "label": "allOrders",
            "type": "t_mapping(t_uint256,t_struct(Order)10749_storage)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:25"
          },
          {
            "contract": "StackingPassive",
            "label": "allUsers",
            "type": "t_mapping(t_address,t_struct(User)10732_storage)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:26"
          },
          {
            "contract": "StackingPassive",
            "label": "roundTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:27"
          },
          {
            "contract": "StackingPassive",
            "label": "userClockActive",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:28"
          }
        ],
        "types": {
          "t_contract(IAnt3)13808": {
            "label": "contract IAnt3"
          },
          "t_contract(IStackingController)10697": {
            "label": "contract IStackingController"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_struct(Round)10708_storage)": {
            "label": "mapping(uint256 => struct Round)"
          },
          "t_struct(Round)10708_storage": {
            "label": "struct Round",
            "members": [
              {
                "label": "toDistribute",
                "type": "t_uint256"
              },
              {
                "label": "toCarryForward",
                "type": "t_uint256"
              },
              {
                "label": "accmStakedShare",
                "type": "t_uint256"
              },
              {
                "label": "startTime",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(Order)10749_storage)": {
            "label": "mapping(uint256 => struct Order)"
          },
          "t_struct(Order)10749_storage": {
            "label": "struct Order",
            "members": [
              {
                "label": "startRound",
                "type": "t_uint256"
              },
              {
                "label": "endRound",
                "type": "t_uint256"
              },
              {
                "label": "shareReward",
                "type": "t_uint256"
              },
              {
                "label": "oriClock",
                "type": "t_uint256"
              },
              {
                "label": "endClock",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "packageId",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(User)10732_storage)": {
            "label": "mapping(address => struct User)"
          },
          "t_struct(User)10732_storage": {
            "label": "struct User",
            "members": [
              {
                "label": "startingIndexForAddShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForAddShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundAddShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "startingIndexForDeductShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForDeductShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundDeductShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "userOrders",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "lastClaimRound",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "d4ba700bdd66831d606e4a9ac67cb9259edf0a9d46e354d4bdc2c695b9160765": {
      "address": "0x7d6ABe36416241921fc923cD9c5e2025b85FF85a",
      "txHash": "0xe434d401f02483a07731fecf80aeea5f5374932244c1af17b54247945bfcb3b0",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "StackingActiveL1",
            "label": "ant3Token",
            "type": "t_contract(IAnt3)13808",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:18"
          },
          {
            "contract": "StackingActiveL1",
            "label": "stackingControllerContract",
            "type": "t_contract(IStackingController)10697",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:19"
          },
          {
            "contract": "StackingActiveL1",
            "label": "dividingValue",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:20"
          },
          {
            "contract": "StackingActiveL1",
            "label": "lastRound",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:21"
          },
          {
            "contract": "StackingActiveL1",
            "label": "lastMoId",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:22"
          },
          {
            "contract": "StackingActiveL1",
            "label": "sortedRoundForDeductShare",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:23"
          },
          {
            "contract": "StackingActiveL1",
            "label": "roundDeductShare",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:24"
          },
          {
            "contract": "StackingActiveL1",
            "label": "rounds",
            "type": "t_mapping(t_uint256,t_struct(Round)10708_storage)",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:25"
          },
          {
            "contract": "StackingActiveL1",
            "label": "allOrders",
            "type": "t_mapping(t_uint256,t_struct(Order)10749_storage)",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:26"
          },
          {
            "contract": "StackingActiveL1",
            "label": "allUsers",
            "type": "t_mapping(t_address,t_struct(User)10732_storage)",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:27"
          },
          {
            "contract": "StackingActiveL1",
            "label": "roundTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:28"
          }
        ],
        "types": {
          "t_contract(IAnt3)13808": {
            "label": "contract IAnt3"
          },
          "t_contract(IStackingController)10697": {
            "label": "contract IStackingController"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_struct(Round)10708_storage)": {
            "label": "mapping(uint256 => struct Round)"
          },
          "t_struct(Round)10708_storage": {
            "label": "struct Round",
            "members": [
              {
                "label": "toDistribute",
                "type": "t_uint256"
              },
              {
                "label": "toCarryForward",
                "type": "t_uint256"
              },
              {
                "label": "accmStakedShare",
                "type": "t_uint256"
              },
              {
                "label": "startTime",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(Order)10749_storage)": {
            "label": "mapping(uint256 => struct Order)"
          },
          "t_struct(Order)10749_storage": {
            "label": "struct Order",
            "members": [
              {
                "label": "startRound",
                "type": "t_uint256"
              },
              {
                "label": "endRound",
                "type": "t_uint256"
              },
              {
                "label": "shareReward",
                "type": "t_uint256"
              },
              {
                "label": "oriClock",
                "type": "t_uint256"
              },
              {
                "label": "endClock",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "packageId",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(User)10732_storage)": {
            "label": "mapping(address => struct User)"
          },
          "t_struct(User)10732_storage": {
            "label": "struct User",
            "members": [
              {
                "label": "startingIndexForAddShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForAddShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundAddShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "startingIndexForDeductShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForDeductShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundDeductShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "userOrders",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "lastClaimRound",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "7aca3744e571a210770e7fa00da4036d439a409a99b12a2acec8059a950575fa": {
      "address": "0x1599f3957856c99e8A1Df630468EE7Da7153C258",
      "txHash": "0xc1ef5869e844c8a1e26a28b6e3ca502c4446d06919d63478b0c3c60667a17b47",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:44"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:394"
          },
          {
            "contract": "ERC20CappedUpgradeable",
            "label": "_cap",
            "type": "t_uint256",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20CappedUpgradeable.sol:15"
          },
          {
            "contract": "ERC20CappedUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20CappedUpgradeable.sol:50"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "DeAnt3Token",
            "label": "_name",
            "type": "t_string_storage",
            "src": "..\\project:\\contracts\\token\\DeAnt3Token.sol:8"
          },
          {
            "contract": "DeAnt3Token",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "..\\project:\\contracts\\token\\DeAnt3Token.sol:9"
          },
          {
            "contract": "DeAnt3Token",
            "label": "_decimals",
            "type": "t_uint8",
            "src": "..\\project:\\contracts\\token\\DeAnt3Token.sol:10"
          },
          {
            "contract": "DeAnt3Token",
            "label": "_rewardAmt",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\token\\DeAnt3Token.sol:11"
          },
          {
            "contract": "DeAnt3Token",
            "label": "_cap",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\token\\DeAnt3Token.sol:12"
          },
          {
            "contract": "DeAnt3Token",
            "label": "_taxFee",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\token\\DeAnt3Token.sol:13"
          },
          {
            "contract": "DeAnt3Token",
            "label": "totalBurned",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\token\\DeAnt3Token.sol:14"
          },
          {
            "contract": "DeAnt3Token",
            "label": "_signers",
            "type": "t_array(t_address)dyn_storage",
            "src": "..\\project:\\contracts\\token\\DeAnt3Token.sol:15"
          },
          {
            "contract": "DeAnt3Token",
            "label": "_mapSigners",
            "type": "t_mapping(t_address,t_bool)",
            "src": "..\\project:\\contracts\\token\\DeAnt3Token.sol:16"
          },
          {
            "contract": "DeAnt3Token",
            "label": "uniqueIdExists",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "..\\project:\\contracts\\token\\DeAnt3Token.sol:17"
          },
          {
            "contract": "DeAnt3Token",
            "label": "userTotalBurned",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\token\\DeAnt3Token.sol:18"
          },
          {
            "contract": "DeAnt3Token",
            "label": "nodeControllerContract",
            "type": "t_address",
            "src": "..\\project:\\contracts\\token\\DeAnt3Token.sol:19"
          },
          {
            "contract": "DeAnt3Token",
            "label": "_rewardAmtInPackage",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\token\\DeAnt3Token.sol:20"
          }
        ],
        "types": {
          "t_string_storage": {
            "label": "string"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          }
        }
      }
    },
    "7a81f937205a494ba1ef8dbfd9794a56e53954f518b33bd47ba2ef721589319c": {
      "address": "0xBb78D6412CC4BeaD9226D69d33C8E53A38DFD571",
      "txHash": "0x8c186e301fc3d069a733ad709ebeca3bed263996ff1a538c429fda8ec9dc3bfe",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:44"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:394"
          },
          {
            "contract": "ERC20CappedUpgradeable",
            "label": "_cap",
            "type": "t_uint256",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20CappedUpgradeable.sol:15"
          },
          {
            "contract": "ERC20CappedUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20CappedUpgradeable.sol:50"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "DeAnt3Token",
            "label": "_name",
            "type": "t_string_storage",
            "src": "..\\project:\\contracts\\token\\DeAnt3Token.sol:8"
          },
          {
            "contract": "DeAnt3Token",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "..\\project:\\contracts\\token\\DeAnt3Token.sol:9"
          },
          {
            "contract": "DeAnt3Token",
            "label": "_decimals",
            "type": "t_uint8",
            "src": "..\\project:\\contracts\\token\\DeAnt3Token.sol:10"
          },
          {
            "contract": "DeAnt3Token",
            "label": "_rewardAmt",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\token\\DeAnt3Token.sol:11"
          },
          {
            "contract": "DeAnt3Token",
            "label": "_cap",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\token\\DeAnt3Token.sol:12"
          },
          {
            "contract": "DeAnt3Token",
            "label": "_taxFee",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\token\\DeAnt3Token.sol:13"
          },
          {
            "contract": "DeAnt3Token",
            "label": "totalBurned",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\token\\DeAnt3Token.sol:14"
          },
          {
            "contract": "DeAnt3Token",
            "label": "_signers",
            "type": "t_array(t_address)dyn_storage",
            "src": "..\\project:\\contracts\\token\\DeAnt3Token.sol:15"
          },
          {
            "contract": "DeAnt3Token",
            "label": "_mapSigners",
            "type": "t_mapping(t_address,t_bool)",
            "src": "..\\project:\\contracts\\token\\DeAnt3Token.sol:16"
          },
          {
            "contract": "DeAnt3Token",
            "label": "uniqueIdExists",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "..\\project:\\contracts\\token\\DeAnt3Token.sol:17"
          },
          {
            "contract": "DeAnt3Token",
            "label": "userTotalBurned",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\token\\DeAnt3Token.sol:18"
          },
          {
            "contract": "DeAnt3Token",
            "label": "nodeControllerContract",
            "type": "t_address",
            "src": "..\\project:\\contracts\\token\\DeAnt3Token.sol:19"
          },
          {
            "contract": "DeAnt3Token",
            "label": "_rewardAmtInPackage",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\token\\DeAnt3Token.sol:20"
          }
        ],
        "types": {
          "t_string_storage": {
            "label": "string"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          }
        }
      }
    },
    "fc61dad0f515b19051adc0acf0bd4f95c1fbe39b66317a5e7e37a077e685bf46": {
      "address": "0x7e094989B747f16ea0F01389AF69B942B5be74a8",
      "txHash": "0x353625cbe84e29cfb94d6d0dc3573c09eee0fd59a55acef828b6653966e1de19",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "NodeController",
            "label": "deAnt3Token",
            "type": "t_contract(IDeAnt3)13836",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:30"
          },
          {
            "contract": "NodeController",
            "label": "ant3Token",
            "type": "t_contract(IAnt3)13826",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:31"
          },
          {
            "contract": "NodeController",
            "label": "guardianToken",
            "type": "t_contract(IERC20Upgradeable)971",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:32"
          },
          {
            "contract": "NodeController",
            "label": "packagePrices",
            "type": "t_struct(PackagePrice)3647_storage",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:33"
          },
          {
            "contract": "NodeController",
            "label": "nodePassive",
            "type": "t_contract(INodePassive)6708",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:34"
          },
          {
            "contract": "NodeController",
            "label": "nodeActiveL1",
            "type": "t_contract(INodeActive)6607",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:35"
          },
          {
            "contract": "NodeController",
            "label": "nodeActiveL2",
            "type": "t_contract(INodeActive)6607",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:36"
          },
          {
            "contract": "NodeController",
            "label": "nodeActiveL3",
            "type": "t_contract(INodeActive)6607",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:37"
          },
          {
            "contract": "NodeController",
            "label": "nodeActiveL4",
            "type": "t_contract(INodeActive)6607",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:38"
          },
          {
            "contract": "NodeController",
            "label": "nodeActiveL5",
            "type": "t_contract(INodeActive)6607",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:39"
          },
          {
            "contract": "NodeController",
            "label": "nodeActiveL6",
            "type": "t_contract(INodeActive)6607",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:40"
          },
          {
            "contract": "NodeController",
            "label": "nodeActiveArray",
            "type": "t_array(t_contract(INodeActive)6607)dyn_storage",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:41"
          },
          {
            "contract": "NodeController",
            "label": "memberController",
            "type": "t_contract(IMemberController)2269",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:42"
          },
          {
            "contract": "NodeController",
            "label": "alphaAccmQty",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:43"
          },
          {
            "contract": "NodeController",
            "label": "betaAccmQty",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:44"
          },
          {
            "contract": "NodeController",
            "label": "gammaAccmQty",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:45"
          },
          {
            "contract": "NodeController",
            "label": "referralRank",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:46"
          },
          {
            "contract": "NodeController",
            "label": "validCaller",
            "type": "t_mapping(t_address,t_bool)",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:47"
          },
          {
            "contract": "NodeController",
            "label": "today",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:50"
          },
          {
            "contract": "NodeController",
            "label": "defaultQuota",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:51"
          },
          {
            "contract": "NodeController",
            "label": "allQuota",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:52"
          },
          {
            "contract": "NodeController",
            "label": "lastPromoCode",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:53"
          },
          {
            "contract": "NodeController",
            "label": "maxClaimRound",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:54"
          },
          {
            "contract": "NodeController",
            "label": "allPromoCode",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:55"
          },
          {
            "contract": "NodeController",
            "label": "deAnt3Decimals",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:76"
          },
          {
            "contract": "NodeController",
            "label": "guardianDecimals",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:77"
          },
          {
            "contract": "NodeController",
            "label": "_guardianCollectAddress",
            "type": "t_address",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:78"
          }
        ],
        "types": {
          "t_contract(IDeAnt3)13836": {
            "label": "contract IDeAnt3"
          },
          "t_contract(IAnt3)13826": {
            "label": "contract IAnt3"
          },
          "t_contract(IERC20Upgradeable)971": {
            "label": "contract IERC20Upgradeable"
          },
          "t_struct(PackagePrice)3647_storage": {
            "label": "struct NodeController.PackagePrice",
            "members": [
              {
                "label": "alphaDeAntPrice",
                "type": "t_uint256"
              },
              {
                "label": "alphaGuardianPrice",
                "type": "t_uint256"
              },
              {
                "label": "betaDeAntPrice",
                "type": "t_uint256"
              },
              {
                "label": "betaGuardianPrice",
                "type": "t_uint256"
              },
              {
                "label": "gammaDeAntPrice",
                "type": "t_uint256"
              },
              {
                "label": "gammaGuardianPrice",
                "type": "t_uint256"
              },
              {
                "label": "packageId",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(INodePassive)6708": {
            "label": "contract INodePassive"
          },
          "t_contract(INodeActive)6607": {
            "label": "contract INodeActive"
          },
          "t_array(t_contract(INodeActive)6607)dyn_storage": {
            "label": "contract INodeActive[]"
          },
          "t_contract(IMemberController)2269": {
            "label": "contract IMemberController"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          }
        }
      }
    },
    "56968bb80a3e18aca6f64feff6142420c99e227a1951f3c400bb571bf6f7095f": {
      "address": "0xed3f337Cfd335d9756309EC78eeA67346359A98c",
      "txHash": "0x1823c280867f8c4baa382657faf540da9aeba5e6ae3c90d3cc67b9d2aa6832dc",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "StackingController",
            "label": "ant3Token",
            "type": "t_contract(IAnt3)13978",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:29"
          },
          {
            "contract": "StackingController",
            "label": "lpToken",
            "type": "t_contract(IERC20Upgradeable)971",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:30"
          },
          {
            "contract": "StackingController",
            "label": "stackingPassive",
            "type": "t_contract(IStackingPassive)10972",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:31"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL1",
            "type": "t_contract(IStackingActive)10838",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:32"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL2",
            "type": "t_contract(IStackingActive)10838",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:33"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL3",
            "type": "t_contract(IStackingActive)10838",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:34"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL4",
            "type": "t_contract(IStackingActive)10838",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:35"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL5",
            "type": "t_contract(IStackingActive)10838",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:36"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL6",
            "type": "t_contract(IStackingActive)10838",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:37"
          },
          {
            "contract": "StackingController",
            "label": "memberController",
            "type": "t_contract(IMemberController)2269",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:39"
          },
          {
            "contract": "StackingController",
            "label": "packagePrices",
            "type": "t_struct(PackagePrice)7785_storage",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:40"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveArray",
            "type": "t_array(t_contract(IStackingActive)10838)dyn_storage",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:42"
          },
          {
            "contract": "StackingController",
            "label": "alphaAccmQty",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:43"
          },
          {
            "contract": "StackingController",
            "label": "betaAccmQty",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:44"
          },
          {
            "contract": "StackingController",
            "label": "gammaAccmQty",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:45"
          },
          {
            "contract": "StackingController",
            "label": "referralRank",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:46"
          },
          {
            "contract": "StackingController",
            "label": "today",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:49"
          },
          {
            "contract": "StackingController",
            "label": "minStackForReferral",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:50"
          },
          {
            "contract": "StackingController",
            "label": "defaultSystemQuota",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:51"
          },
          {
            "contract": "StackingController",
            "label": "systemQuota",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:52"
          },
          {
            "contract": "StackingController",
            "label": "defaultUserQuota",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:53"
          },
          {
            "contract": "StackingController",
            "label": "userQuota",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:54"
          },
          {
            "contract": "StackingController",
            "label": "userToday",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:55"
          },
          {
            "contract": "StackingController",
            "label": "maxClaimRound",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:56"
          },
          {
            "contract": "StackingController",
            "label": "minStackAmt",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:57"
          },
          {
            "contract": "StackingController",
            "label": "shareMultiplier",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:58"
          }
        ],
        "types": {
          "t_contract(IAnt3)13978": {
            "label": "contract IAnt3"
          },
          "t_contract(IERC20Upgradeable)971": {
            "label": "contract IERC20Upgradeable"
          },
          "t_contract(IStackingPassive)10972": {
            "label": "contract IStackingPassive"
          },
          "t_contract(IStackingActive)10838": {
            "label": "contract IStackingActive"
          },
          "t_contract(IMemberController)2269": {
            "label": "contract IMemberController"
          },
          "t_struct(PackagePrice)7785_storage": {
            "label": "struct StackingController.PackagePrice",
            "members": [
              {
                "label": "alphaLockPeriod",
                "type": "t_uint256"
              },
              {
                "label": "alphaShareRate",
                "type": "t_uint256"
              },
              {
                "label": "betaLockPeriod",
                "type": "t_uint256"
              },
              {
                "label": "betaShareRate",
                "type": "t_uint256"
              },
              {
                "label": "gammaLockPeriod",
                "type": "t_uint256"
              },
              {
                "label": "gammaShareRate",
                "type": "t_uint256"
              },
              {
                "label": "packageId",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_contract(IStackingActive)10838)dyn_storage": {
            "label": "contract IStackingActive[]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "59e96222f33f9d5f185fac84d1fa4a4ff3d9fc6551ed345e59a95439520a8408": {
      "address": "0x317fE477a55b88A7BC7F352685DFbb5DAf607795",
      "txHash": "0x5684322967983cfc3b4cacd60b95b755f7d3461fd14f5edd4a447d2845290c5d",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "StackingPassive",
            "label": "ant3Token",
            "type": "t_contract(IAnt3)13978",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:17"
          },
          {
            "contract": "StackingPassive",
            "label": "stackingControllerContract",
            "type": "t_contract(IStackingController)10851",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:18"
          },
          {
            "contract": "StackingPassive",
            "label": "dividingValue",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:19"
          },
          {
            "contract": "StackingPassive",
            "label": "lastRound",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:20"
          },
          {
            "contract": "StackingPassive",
            "label": "lastMoId",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:21"
          },
          {
            "contract": "StackingPassive",
            "label": "sortedRoundForDeductShare",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:22"
          },
          {
            "contract": "StackingPassive",
            "label": "roundDeductShare",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:23"
          },
          {
            "contract": "StackingPassive",
            "label": "rounds",
            "type": "t_mapping(t_uint256,t_struct(Round)10862_storage)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:24"
          },
          {
            "contract": "StackingPassive",
            "label": "allOrders",
            "type": "t_mapping(t_uint256,t_struct(Order)10903_storage)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:25"
          },
          {
            "contract": "StackingPassive",
            "label": "allUsers",
            "type": "t_mapping(t_address,t_struct(User)10886_storage)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:26"
          },
          {
            "contract": "StackingPassive",
            "label": "roundTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:27"
          },
          {
            "contract": "StackingPassive",
            "label": "userClockActive",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:28"
          }
        ],
        "types": {
          "t_contract(IAnt3)13978": {
            "label": "contract IAnt3"
          },
          "t_contract(IStackingController)10851": {
            "label": "contract IStackingController"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_struct(Round)10862_storage)": {
            "label": "mapping(uint256 => struct Round)"
          },
          "t_struct(Round)10862_storage": {
            "label": "struct Round",
            "members": [
              {
                "label": "toDistribute",
                "type": "t_uint256"
              },
              {
                "label": "toCarryForward",
                "type": "t_uint256"
              },
              {
                "label": "accmStakedShare",
                "type": "t_uint256"
              },
              {
                "label": "startTime",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(Order)10903_storage)": {
            "label": "mapping(uint256 => struct Order)"
          },
          "t_struct(Order)10903_storage": {
            "label": "struct Order",
            "members": [
              {
                "label": "startRound",
                "type": "t_uint256"
              },
              {
                "label": "endRound",
                "type": "t_uint256"
              },
              {
                "label": "shareReward",
                "type": "t_uint256"
              },
              {
                "label": "oriClock",
                "type": "t_uint256"
              },
              {
                "label": "endClock",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "packageId",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(User)10886_storage)": {
            "label": "mapping(address => struct User)"
          },
          "t_struct(User)10886_storage": {
            "label": "struct User",
            "members": [
              {
                "label": "startingIndexForAddShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForAddShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundAddShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "startingIndexForDeductShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForDeductShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundDeductShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "userOrders",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "lastClaimRound",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "899a40a80db84887ba3b82b9f5e2d665b99f606017a4900f725330535ea9a065": {
      "address": "0x6b460B53DCA68bae3a4C1EF7e280838d016a5119",
      "txHash": "0xfdaead10c459577981ddc8422d77adb90662e7fa5b70791016a8af9a05acf6a7",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "NodeController",
            "label": "deAnt3Token",
            "type": "t_contract(IDeAnt3)13988",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:30"
          },
          {
            "contract": "NodeController",
            "label": "ant3Token",
            "type": "t_contract(IAnt3)13978",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:31"
          },
          {
            "contract": "NodeController",
            "label": "guardianToken",
            "type": "t_contract(IERC20Upgradeable)971",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:32"
          },
          {
            "contract": "NodeController",
            "label": "packagePrices",
            "type": "t_struct(PackagePrice)3662_storage",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:33"
          },
          {
            "contract": "NodeController",
            "label": "nodePassive",
            "type": "t_contract(INodePassive)6782",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:34"
          },
          {
            "contract": "NodeController",
            "label": "nodeActiveL1",
            "type": "t_contract(INodeActive)6674",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:35"
          },
          {
            "contract": "NodeController",
            "label": "nodeActiveL2",
            "type": "t_contract(INodeActive)6674",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:36"
          },
          {
            "contract": "NodeController",
            "label": "nodeActiveL3",
            "type": "t_contract(INodeActive)6674",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:37"
          },
          {
            "contract": "NodeController",
            "label": "nodeActiveL4",
            "type": "t_contract(INodeActive)6674",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:38"
          },
          {
            "contract": "NodeController",
            "label": "nodeActiveL5",
            "type": "t_contract(INodeActive)6674",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:39"
          },
          {
            "contract": "NodeController",
            "label": "nodeActiveL6",
            "type": "t_contract(INodeActive)6674",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:40"
          },
          {
            "contract": "NodeController",
            "label": "nodeActiveArray",
            "type": "t_array(t_contract(INodeActive)6674)dyn_storage",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:41"
          },
          {
            "contract": "NodeController",
            "label": "memberController",
            "type": "t_contract(IMemberController)2269",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:42"
          },
          {
            "contract": "NodeController",
            "label": "alphaAccmQty",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:43"
          },
          {
            "contract": "NodeController",
            "label": "betaAccmQty",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:44"
          },
          {
            "contract": "NodeController",
            "label": "gammaAccmQty",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:45"
          },
          {
            "contract": "NodeController",
            "label": "referralRank",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:46"
          },
          {
            "contract": "NodeController",
            "label": "validCaller",
            "type": "t_mapping(t_address,t_bool)",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:47"
          },
          {
            "contract": "NodeController",
            "label": "today",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:50"
          },
          {
            "contract": "NodeController",
            "label": "defaultQuota",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:51"
          },
          {
            "contract": "NodeController",
            "label": "allQuota",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:52"
          },
          {
            "contract": "NodeController",
            "label": "lastPromoCode",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:53"
          },
          {
            "contract": "NodeController",
            "label": "maxClaimRound",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:54"
          },
          {
            "contract": "NodeController",
            "label": "allPromoCode",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:55"
          },
          {
            "contract": "NodeController",
            "label": "deAnt3Decimals",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:76"
          },
          {
            "contract": "NodeController",
            "label": "guardianDecimals",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:77"
          },
          {
            "contract": "NodeController",
            "label": "_guardianCollectAddress",
            "type": "t_address",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:78"
          }
        ],
        "types": {
          "t_contract(IDeAnt3)13988": {
            "label": "contract IDeAnt3"
          },
          "t_contract(IAnt3)13978": {
            "label": "contract IAnt3"
          },
          "t_contract(IERC20Upgradeable)971": {
            "label": "contract IERC20Upgradeable"
          },
          "t_struct(PackagePrice)3662_storage": {
            "label": "struct NodeController.PackagePrice",
            "members": [
              {
                "label": "alphaDeAntPrice",
                "type": "t_uint256"
              },
              {
                "label": "alphaGuardianPrice",
                "type": "t_uint256"
              },
              {
                "label": "betaDeAntPrice",
                "type": "t_uint256"
              },
              {
                "label": "betaGuardianPrice",
                "type": "t_uint256"
              },
              {
                "label": "gammaDeAntPrice",
                "type": "t_uint256"
              },
              {
                "label": "gammaGuardianPrice",
                "type": "t_uint256"
              },
              {
                "label": "packageId",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(INodePassive)6782": {
            "label": "contract INodePassive"
          },
          "t_contract(INodeActive)6674": {
            "label": "contract INodeActive"
          },
          "t_array(t_contract(INodeActive)6674)dyn_storage": {
            "label": "contract INodeActive[]"
          },
          "t_contract(IMemberController)2269": {
            "label": "contract IMemberController"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          }
        }
      }
    },
    "22c1effa7bbccde6785e16f5ae30c9dcc994890d9082460219989ed4d38cace9": {
      "address": "0xFD0cD35d17dD95d31Cd810a614619cF9A6E51fAd",
      "txHash": "0x0484b29e7dd7fb68a7833e63256479e01562bcfed4a0a3fb65b2a445296dfa27",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "NodePassive",
            "label": "ant3Token",
            "type": "t_contract(IAnt3)13978",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:17"
          },
          {
            "contract": "NodePassive",
            "label": "nodeControllerContract",
            "type": "t_contract(INodeController)6682",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:18"
          },
          {
            "contract": "NodePassive",
            "label": "dividingValue",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:19"
          },
          {
            "contract": "NodePassive",
            "label": "lastRound",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:20"
          },
          {
            "contract": "NodePassive",
            "label": "lastMoId",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:21"
          },
          {
            "contract": "NodePassive",
            "label": "sortedRoundForDeductShare",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:22"
          },
          {
            "contract": "NodePassive",
            "label": "roundDeductShare",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:23"
          },
          {
            "contract": "NodePassive",
            "label": "rounds",
            "type": "t_mapping(t_uint256,t_struct(Round)6693_storage)",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:24"
          },
          {
            "contract": "NodePassive",
            "label": "allOrders",
            "type": "t_mapping(t_uint256,t_struct(Order)6728_storage)",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:25"
          },
          {
            "contract": "NodePassive",
            "label": "allUsers",
            "type": "t_mapping(t_address,t_struct(User)6717_storage)",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:26"
          },
          {
            "contract": "NodePassive",
            "label": "roundTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:27"
          },
          {
            "contract": "NodePassive",
            "label": "userClockActive",
            "type": "t_mapping(t_address,t_bool)",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:28"
          },
          {
            "contract": "NodePassive",
            "label": "userValidOrderCount",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:29"
          }
        ],
        "types": {
          "t_contract(IAnt3)13978": {
            "label": "contract IAnt3"
          },
          "t_contract(INodeController)6682": {
            "label": "contract INodeController"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_struct(Round)6693_storage)": {
            "label": "mapping(uint256 => struct Round)"
          },
          "t_struct(Round)6693_storage": {
            "label": "struct Round",
            "members": [
              {
                "label": "toDistribute",
                "type": "t_uint256"
              },
              {
                "label": "toCarryForward",
                "type": "t_uint256"
              },
              {
                "label": "accmStakedShare",
                "type": "t_uint256"
              },
              {
                "label": "startTime",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(Order)6728_storage)": {
            "label": "mapping(uint256 => struct Order)"
          },
          "t_struct(Order)6728_storage": {
            "label": "struct Order",
            "members": [
              {
                "label": "startRound",
                "type": "t_uint256"
              },
              {
                "label": "endRound",
                "type": "t_uint256"
              },
              {
                "label": "shareReward",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "packageId",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(User)6717_storage)": {
            "label": "mapping(address => struct User)"
          },
          "t_struct(User)6717_storage": {
            "label": "struct User",
            "members": [
              {
                "label": "startingIndexForAddShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForAddShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundAddShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "startingIndexForDeductShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForDeductShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundDeductShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "userOrders",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "lastClaimRound",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          }
        }
      }
    },
    "0c0e8bade8740ad36f79fa58b13f71fc9b8746d4c9c9da81d6b5655259dfb5b2": {
      "address": "0xa228ed513Af75b8D91ABe6232acD3D725c88Ee18",
      "txHash": "0xb3b1b7dcbc012f5cb07c88f30988d68aea0f69c1e5ea7a174775e91b430c1a9f",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "StackingActiveL1",
            "label": "ant3Token",
            "type": "t_contract(IAnt3)13978",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:18"
          },
          {
            "contract": "StackingActiveL1",
            "label": "stackingControllerContract",
            "type": "t_contract(IStackingController)10851",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:19"
          },
          {
            "contract": "StackingActiveL1",
            "label": "dividingValue",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:20"
          },
          {
            "contract": "StackingActiveL1",
            "label": "lastRound",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:21"
          },
          {
            "contract": "StackingActiveL1",
            "label": "lastMoId",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:22"
          },
          {
            "contract": "StackingActiveL1",
            "label": "sortedRoundForDeductShare",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:23"
          },
          {
            "contract": "StackingActiveL1",
            "label": "roundDeductShare",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:24"
          },
          {
            "contract": "StackingActiveL1",
            "label": "rounds",
            "type": "t_mapping(t_uint256,t_struct(Round)10862_storage)",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:25"
          },
          {
            "contract": "StackingActiveL1",
            "label": "allOrders",
            "type": "t_mapping(t_uint256,t_struct(Order)10903_storage)",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:26"
          },
          {
            "contract": "StackingActiveL1",
            "label": "allUsers",
            "type": "t_mapping(t_address,t_struct(User)10886_storage)",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:27"
          },
          {
            "contract": "StackingActiveL1",
            "label": "roundTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:28"
          }
        ],
        "types": {
          "t_contract(IAnt3)13978": {
            "label": "contract IAnt3"
          },
          "t_contract(IStackingController)10851": {
            "label": "contract IStackingController"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_struct(Round)10862_storage)": {
            "label": "mapping(uint256 => struct Round)"
          },
          "t_struct(Round)10862_storage": {
            "label": "struct Round",
            "members": [
              {
                "label": "toDistribute",
                "type": "t_uint256"
              },
              {
                "label": "toCarryForward",
                "type": "t_uint256"
              },
              {
                "label": "accmStakedShare",
                "type": "t_uint256"
              },
              {
                "label": "startTime",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(Order)10903_storage)": {
            "label": "mapping(uint256 => struct Order)"
          },
          "t_struct(Order)10903_storage": {
            "label": "struct Order",
            "members": [
              {
                "label": "startRound",
                "type": "t_uint256"
              },
              {
                "label": "endRound",
                "type": "t_uint256"
              },
              {
                "label": "shareReward",
                "type": "t_uint256"
              },
              {
                "label": "oriClock",
                "type": "t_uint256"
              },
              {
                "label": "endClock",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "packageId",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(User)10886_storage)": {
            "label": "mapping(address => struct User)"
          },
          "t_struct(User)10886_storage": {
            "label": "struct User",
            "members": [
              {
                "label": "startingIndexForAddShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForAddShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundAddShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "startingIndexForDeductShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForDeductShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundDeductShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "userOrders",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "lastClaimRound",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "1d4ceb20d26616cea7ac22614eac682b13b116a48430f74c24d694f61c201501": {
      "address": "0xA31e6547774970DBe67243C01Ef78Ea6F1ad941F",
      "txHash": "0xc5c3b54fa79c941a32e6089ce1c2b59bb93f10aacfa78a17136c46a9a18168d1",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "NodeActiveL1",
            "label": "ant3Token",
            "type": "t_contract(IAnt3)13978",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:18"
          },
          {
            "contract": "NodeActiveL1",
            "label": "nodeControllerContract",
            "type": "t_contract(INodeController)6682",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:20"
          },
          {
            "contract": "NodeActiveL1",
            "label": "dividingValue",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:21"
          },
          {
            "contract": "NodeActiveL1",
            "label": "lastRound",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:22"
          },
          {
            "contract": "NodeActiveL1",
            "label": "lastMoId",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:23"
          },
          {
            "contract": "NodeActiveL1",
            "label": "sortedRoundForDeductShare",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:24"
          },
          {
            "contract": "NodeActiveL1",
            "label": "roundDeductShare",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:25"
          },
          {
            "contract": "NodeActiveL1",
            "label": "rounds",
            "type": "t_mapping(t_uint256,t_struct(Round)6693_storage)",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:26"
          },
          {
            "contract": "NodeActiveL1",
            "label": "allOrders",
            "type": "t_mapping(t_uint256,t_struct(Order)6728_storage)",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:27"
          },
          {
            "contract": "NodeActiveL1",
            "label": "allUsers",
            "type": "t_mapping(t_address,t_struct(User)6717_storage)",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:28"
          },
          {
            "contract": "NodeActiveL1",
            "label": "roundTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:29"
          }
        ],
        "types": {
          "t_contract(IAnt3)13978": {
            "label": "contract IAnt3"
          },
          "t_contract(INodeController)6682": {
            "label": "contract INodeController"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_struct(Round)6693_storage)": {
            "label": "mapping(uint256 => struct Round)"
          },
          "t_struct(Round)6693_storage": {
            "label": "struct Round",
            "members": [
              {
                "label": "toDistribute",
                "type": "t_uint256"
              },
              {
                "label": "toCarryForward",
                "type": "t_uint256"
              },
              {
                "label": "accmStakedShare",
                "type": "t_uint256"
              },
              {
                "label": "startTime",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(Order)6728_storage)": {
            "label": "mapping(uint256 => struct Order)"
          },
          "t_struct(Order)6728_storage": {
            "label": "struct Order",
            "members": [
              {
                "label": "startRound",
                "type": "t_uint256"
              },
              {
                "label": "endRound",
                "type": "t_uint256"
              },
              {
                "label": "shareReward",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "packageId",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(User)6717_storage)": {
            "label": "mapping(address => struct User)"
          },
          "t_struct(User)6717_storage": {
            "label": "struct User",
            "members": [
              {
                "label": "startingIndexForAddShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForAddShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundAddShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "startingIndexForDeductShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForDeductShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundDeductShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "userOrders",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "lastClaimRound",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "4b0e78cdda7d8da7d184ee8b335d52d0973d4d2de62a50ab742ad68b9c20a084": {
      "address": "0x01c315DE7ec684d5E153BF12905cD70758C58408",
      "txHash": "0x5cda008a6b548698556aac54547e6db51ca8bfeb922c27246693a3ba1706d698",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "NodeController",
            "label": "deAnt3Token",
            "type": "t_contract(IDeAnt3)14425",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:30"
          },
          {
            "contract": "NodeController",
            "label": "ant3Token",
            "type": "t_contract(IAnt3)14415",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:31"
          },
          {
            "contract": "NodeController",
            "label": "guardianToken",
            "type": "t_contract(IERC20Upgradeable)971",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:32"
          },
          {
            "contract": "NodeController",
            "label": "packagePrices",
            "type": "t_struct(PackagePrice)4105_storage",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:33"
          },
          {
            "contract": "NodeController",
            "label": "nodePassive",
            "type": "t_contract(INodePassive)7228",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:34"
          },
          {
            "contract": "NodeController",
            "label": "nodeActiveL1",
            "type": "t_contract(INodeActive)7120",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:35"
          },
          {
            "contract": "NodeController",
            "label": "nodeActiveL2",
            "type": "t_contract(INodeActive)7120",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:36"
          },
          {
            "contract": "NodeController",
            "label": "nodeActiveL3",
            "type": "t_contract(INodeActive)7120",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:37"
          },
          {
            "contract": "NodeController",
            "label": "nodeActiveL4",
            "type": "t_contract(INodeActive)7120",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:38"
          },
          {
            "contract": "NodeController",
            "label": "nodeActiveL5",
            "type": "t_contract(INodeActive)7120",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:39"
          },
          {
            "contract": "NodeController",
            "label": "nodeActiveL6",
            "type": "t_contract(INodeActive)7120",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:40"
          },
          {
            "contract": "NodeController",
            "label": "nodeActiveArray",
            "type": "t_array(t_contract(INodeActive)7120)dyn_storage",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:41"
          },
          {
            "contract": "NodeController",
            "label": "memberController",
            "type": "t_contract(IMemberController)2269",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:42"
          },
          {
            "contract": "NodeController",
            "label": "alphaAccmQty",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:43"
          },
          {
            "contract": "NodeController",
            "label": "betaAccmQty",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:44"
          },
          {
            "contract": "NodeController",
            "label": "gammaAccmQty",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:45"
          },
          {
            "contract": "NodeController",
            "label": "referralRank",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:46"
          },
          {
            "contract": "NodeController",
            "label": "validCaller",
            "type": "t_mapping(t_address,t_bool)",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:47"
          },
          {
            "contract": "NodeController",
            "label": "today",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:50"
          },
          {
            "contract": "NodeController",
            "label": "defaultQuota",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:51"
          },
          {
            "contract": "NodeController",
            "label": "allQuota",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:52"
          },
          {
            "contract": "NodeController",
            "label": "lastPromoCode",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:53"
          },
          {
            "contract": "NodeController",
            "label": "maxClaimRound",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:54"
          },
          {
            "contract": "NodeController",
            "label": "allPromoCode",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:55"
          },
          {
            "contract": "NodeController",
            "label": "deAnt3Decimals",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:76"
          },
          {
            "contract": "NodeController",
            "label": "guardianDecimals",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:77"
          },
          {
            "contract": "NodeController",
            "label": "_guardianCollectAddress",
            "type": "t_address",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:78"
          }
        ],
        "types": {
          "t_contract(IDeAnt3)14425": {
            "label": "contract IDeAnt3"
          },
          "t_contract(IAnt3)14415": {
            "label": "contract IAnt3"
          },
          "t_contract(IERC20Upgradeable)971": {
            "label": "contract IERC20Upgradeable"
          },
          "t_struct(PackagePrice)4105_storage": {
            "label": "struct NodeController.PackagePrice",
            "members": [
              {
                "label": "alphaDeAntPrice",
                "type": "t_uint256"
              },
              {
                "label": "alphaGuardianPrice",
                "type": "t_uint256"
              },
              {
                "label": "betaDeAntPrice",
                "type": "t_uint256"
              },
              {
                "label": "betaGuardianPrice",
                "type": "t_uint256"
              },
              {
                "label": "gammaDeAntPrice",
                "type": "t_uint256"
              },
              {
                "label": "gammaGuardianPrice",
                "type": "t_uint256"
              },
              {
                "label": "packageId",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(INodePassive)7228": {
            "label": "contract INodePassive"
          },
          "t_contract(INodeActive)7120": {
            "label": "contract INodeActive"
          },
          "t_array(t_contract(INodeActive)7120)dyn_storage": {
            "label": "contract INodeActive[]"
          },
          "t_contract(IMemberController)2269": {
            "label": "contract IMemberController"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          }
        }
      }
    },
    "2755b4c626c119bc4d317cefc305e8ae03f9684ab3de4c0534f2edd3b8ae76f4": {
      "address": "0xa58F0991A2c2E9608D9b7056fE3b54A9Da2bb380",
      "txHash": "0xfbf89594202447679327d4f58a560c165f4e84f9cb4619c45d7ac6b12a1353df",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "StackingController",
            "label": "ant3Token",
            "type": "t_contract(IAnt3)14415",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:29"
          },
          {
            "contract": "StackingController",
            "label": "lpToken",
            "type": "t_contract(IERC20Upgradeable)971",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:30"
          },
          {
            "contract": "StackingController",
            "label": "stackingPassive",
            "type": "t_contract(IStackingPassive)11409",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:31"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL1",
            "type": "t_contract(IStackingActive)11275",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:32"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL2",
            "type": "t_contract(IStackingActive)11275",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:33"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL3",
            "type": "t_contract(IStackingActive)11275",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:34"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL4",
            "type": "t_contract(IStackingActive)11275",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:35"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL5",
            "type": "t_contract(IStackingActive)11275",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:36"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL6",
            "type": "t_contract(IStackingActive)11275",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:37"
          },
          {
            "contract": "StackingController",
            "label": "memberController",
            "type": "t_contract(IMemberController)2269",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:38"
          },
          {
            "contract": "StackingController",
            "label": "packagePrices",
            "type": "t_struct(PackagePrice)8231_storage",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:39"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveArray",
            "type": "t_array(t_contract(IStackingActive)11275)dyn_storage",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:41"
          },
          {
            "contract": "StackingController",
            "label": "alphaAccmQty",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:42"
          },
          {
            "contract": "StackingController",
            "label": "betaAccmQty",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:43"
          },
          {
            "contract": "StackingController",
            "label": "gammaAccmQty",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:44"
          },
          {
            "contract": "StackingController",
            "label": "referralRank",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:45"
          },
          {
            "contract": "StackingController",
            "label": "today",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:48"
          },
          {
            "contract": "StackingController",
            "label": "minStackForReferral",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:49"
          },
          {
            "contract": "StackingController",
            "label": "defaultSystemQuota",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:50"
          },
          {
            "contract": "StackingController",
            "label": "systemQuota",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:51"
          },
          {
            "contract": "StackingController",
            "label": "defaultUserQuota",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:52"
          },
          {
            "contract": "StackingController",
            "label": "userQuota",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:53"
          },
          {
            "contract": "StackingController",
            "label": "userToday",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:54"
          },
          {
            "contract": "StackingController",
            "label": "maxClaimRound",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:55"
          },
          {
            "contract": "StackingController",
            "label": "minStackAmt",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:56"
          },
          {
            "contract": "StackingController",
            "label": "shareMultiplier",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:57"
          }
        ],
        "types": {
          "t_contract(IAnt3)14415": {
            "label": "contract IAnt3"
          },
          "t_contract(IERC20Upgradeable)971": {
            "label": "contract IERC20Upgradeable"
          },
          "t_contract(IStackingPassive)11409": {
            "label": "contract IStackingPassive"
          },
          "t_contract(IStackingActive)11275": {
            "label": "contract IStackingActive"
          },
          "t_contract(IMemberController)2269": {
            "label": "contract IMemberController"
          },
          "t_struct(PackagePrice)8231_storage": {
            "label": "struct StackingController.PackagePrice",
            "members": [
              {
                "label": "alphaLockPeriod",
                "type": "t_uint256"
              },
              {
                "label": "alphaShareRate",
                "type": "t_uint256"
              },
              {
                "label": "betaLockPeriod",
                "type": "t_uint256"
              },
              {
                "label": "betaShareRate",
                "type": "t_uint256"
              },
              {
                "label": "gammaLockPeriod",
                "type": "t_uint256"
              },
              {
                "label": "gammaShareRate",
                "type": "t_uint256"
              },
              {
                "label": "packageId",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_contract(IStackingActive)11275)dyn_storage": {
            "label": "contract IStackingActive[]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "476fd69a0ade217a761a01f926837de41446bd07dbf90f219330d52d86b0cfde": {
      "address": "0x1B62FC1606C2Ec6aAcB5B2C2B658A7cbed2120Bf",
      "txHash": "0xbcd85c087cb42d1e732bf466fb8077eb7e61b14ea369b5cda15657488a4088bc",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "StackingPassive",
            "label": "ant3Token",
            "type": "t_contract(IAnt3)14299",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:17"
          },
          {
            "contract": "StackingPassive",
            "label": "stackingControllerContract",
            "type": "t_contract(IStackingController)11172",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:18"
          },
          {
            "contract": "StackingPassive",
            "label": "dividingValue",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:19"
          },
          {
            "contract": "StackingPassive",
            "label": "lastRound",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:20"
          },
          {
            "contract": "StackingPassive",
            "label": "lastMoId",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:21"
          },
          {
            "contract": "StackingPassive",
            "label": "sortedRoundForDeductShare",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:22"
          },
          {
            "contract": "StackingPassive",
            "label": "roundDeductShare",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:23"
          },
          {
            "contract": "StackingPassive",
            "label": "rounds",
            "type": "t_mapping(t_uint256,t_struct(Round)11183_storage)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:24"
          },
          {
            "contract": "StackingPassive",
            "label": "allOrders",
            "type": "t_mapping(t_uint256,t_struct(Order)11224_storage)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:25"
          },
          {
            "contract": "StackingPassive",
            "label": "allUsers",
            "type": "t_mapping(t_address,t_struct(User)11207_storage)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:26"
          },
          {
            "contract": "StackingPassive",
            "label": "roundTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:27"
          },
          {
            "contract": "StackingPassive",
            "label": "userClockActive",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:28"
          }
        ],
        "types": {
          "t_contract(IAnt3)14299": {
            "label": "contract IAnt3"
          },
          "t_contract(IStackingController)11172": {
            "label": "contract IStackingController"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_struct(Round)11183_storage)": {
            "label": "mapping(uint256 => struct Round)"
          },
          "t_struct(Round)11183_storage": {
            "label": "struct Round",
            "members": [
              {
                "label": "toDistribute",
                "type": "t_uint256"
              },
              {
                "label": "toCarryForward",
                "type": "t_uint256"
              },
              {
                "label": "accmStakedShare",
                "type": "t_uint256"
              },
              {
                "label": "startTime",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(Order)11224_storage)": {
            "label": "mapping(uint256 => struct Order)"
          },
          "t_struct(Order)11224_storage": {
            "label": "struct Order",
            "members": [
              {
                "label": "startRound",
                "type": "t_uint256"
              },
              {
                "label": "endRound",
                "type": "t_uint256"
              },
              {
                "label": "shareReward",
                "type": "t_uint256"
              },
              {
                "label": "oriClock",
                "type": "t_uint256"
              },
              {
                "label": "endClock",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "packageId",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(User)11207_storage)": {
            "label": "mapping(address => struct User)"
          },
          "t_struct(User)11207_storage": {
            "label": "struct User",
            "members": [
              {
                "label": "startingIndexForAddShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForAddShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundAddShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "startingIndexForDeductShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForDeductShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundDeductShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "userOrders",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "lastClaimRound",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "aadfc7ac6b22c769b427d00d4f2e7cfc50330bc6f79abc0b233c81d8ad1423cb": {
      "address": "0xf60Da48eeb95b3d42A0C71cd137051f435b7aDe4",
      "txHash": "0x7f49ab1a5dfc1e18807c81a7e50e06b9ac597a891410299c0a7637e7819a071b",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "NodePassive",
            "label": "ant3Token",
            "type": "t_contract(IAnt3)14299",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:17"
          },
          {
            "contract": "NodePassive",
            "label": "nodeControllerContract",
            "type": "t_contract(INodeController)6993",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:18"
          },
          {
            "contract": "NodePassive",
            "label": "dividingValue",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:19"
          },
          {
            "contract": "NodePassive",
            "label": "lastRound",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:20"
          },
          {
            "contract": "NodePassive",
            "label": "lastMoId",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:21"
          },
          {
            "contract": "NodePassive",
            "label": "sortedRoundForDeductShare",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:22"
          },
          {
            "contract": "NodePassive",
            "label": "roundDeductShare",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:23"
          },
          {
            "contract": "NodePassive",
            "label": "rounds",
            "type": "t_mapping(t_uint256,t_struct(Round)7004_storage)",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:24"
          },
          {
            "contract": "NodePassive",
            "label": "allOrders",
            "type": "t_mapping(t_uint256,t_struct(Order)7039_storage)",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:25"
          },
          {
            "contract": "NodePassive",
            "label": "allUsers",
            "type": "t_mapping(t_address,t_struct(User)7028_storage)",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:26"
          },
          {
            "contract": "NodePassive",
            "label": "roundTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:27"
          },
          {
            "contract": "NodePassive",
            "label": "userClockActive",
            "type": "t_mapping(t_address,t_bool)",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:28"
          },
          {
            "contract": "NodePassive",
            "label": "userValidOrderCount",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:29"
          }
        ],
        "types": {
          "t_contract(IAnt3)14299": {
            "label": "contract IAnt3"
          },
          "t_contract(INodeController)6993": {
            "label": "contract INodeController"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_struct(Round)7004_storage)": {
            "label": "mapping(uint256 => struct Round)"
          },
          "t_struct(Round)7004_storage": {
            "label": "struct Round",
            "members": [
              {
                "label": "toDistribute",
                "type": "t_uint256"
              },
              {
                "label": "toCarryForward",
                "type": "t_uint256"
              },
              {
                "label": "accmStakedShare",
                "type": "t_uint256"
              },
              {
                "label": "startTime",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(Order)7039_storage)": {
            "label": "mapping(uint256 => struct Order)"
          },
          "t_struct(Order)7039_storage": {
            "label": "struct Order",
            "members": [
              {
                "label": "startRound",
                "type": "t_uint256"
              },
              {
                "label": "endRound",
                "type": "t_uint256"
              },
              {
                "label": "shareReward",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "packageId",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(User)7028_storage)": {
            "label": "mapping(address => struct User)"
          },
          "t_struct(User)7028_storage": {
            "label": "struct User",
            "members": [
              {
                "label": "startingIndexForAddShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForAddShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundAddShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "startingIndexForDeductShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForDeductShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundDeductShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "userOrders",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "lastClaimRound",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          }
        }
      }
    },
    "63734066a2dec1f8199873711380eca0ec0c34410da4519d7dc91b30355da641": {
      "address": "0x4B394c78349f16d92aB028f0FBA2C027b72373B6",
      "txHash": "0x3169a6b23f5aebde59d062b4b7bda23349f6d417b59747d7b041bbe0a8231201",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "NodeActiveL1",
            "label": "ant3Token",
            "type": "t_contract(IAnt3)14299",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:18"
          },
          {
            "contract": "NodeActiveL1",
            "label": "nodeControllerContract",
            "type": "t_contract(INodeController)6993",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:20"
          },
          {
            "contract": "NodeActiveL1",
            "label": "dividingValue",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:21"
          },
          {
            "contract": "NodeActiveL1",
            "label": "lastRound",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:22"
          },
          {
            "contract": "NodeActiveL1",
            "label": "lastMoId",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:23"
          },
          {
            "contract": "NodeActiveL1",
            "label": "sortedRoundForDeductShare",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:24"
          },
          {
            "contract": "NodeActiveL1",
            "label": "roundDeductShare",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:25"
          },
          {
            "contract": "NodeActiveL1",
            "label": "rounds",
            "type": "t_mapping(t_uint256,t_struct(Round)7004_storage)",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:26"
          },
          {
            "contract": "NodeActiveL1",
            "label": "allOrders",
            "type": "t_mapping(t_uint256,t_struct(Order)7039_storage)",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:27"
          },
          {
            "contract": "NodeActiveL1",
            "label": "allUsers",
            "type": "t_mapping(t_address,t_struct(User)7028_storage)",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:28"
          },
          {
            "contract": "NodeActiveL1",
            "label": "roundTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:29"
          }
        ],
        "types": {
          "t_contract(IAnt3)14299": {
            "label": "contract IAnt3"
          },
          "t_contract(INodeController)6993": {
            "label": "contract INodeController"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_struct(Round)7004_storage)": {
            "label": "mapping(uint256 => struct Round)"
          },
          "t_struct(Round)7004_storage": {
            "label": "struct Round",
            "members": [
              {
                "label": "toDistribute",
                "type": "t_uint256"
              },
              {
                "label": "toCarryForward",
                "type": "t_uint256"
              },
              {
                "label": "accmStakedShare",
                "type": "t_uint256"
              },
              {
                "label": "startTime",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(Order)7039_storage)": {
            "label": "mapping(uint256 => struct Order)"
          },
          "t_struct(Order)7039_storage": {
            "label": "struct Order",
            "members": [
              {
                "label": "startRound",
                "type": "t_uint256"
              },
              {
                "label": "endRound",
                "type": "t_uint256"
              },
              {
                "label": "shareReward",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "packageId",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(User)7028_storage)": {
            "label": "mapping(address => struct User)"
          },
          "t_struct(User)7028_storage": {
            "label": "struct User",
            "members": [
              {
                "label": "startingIndexForAddShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForAddShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundAddShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "startingIndexForDeductShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForDeductShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundDeductShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "userOrders",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "lastClaimRound",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "f4dbd33915d41540f3fe9bbe366b5db749f7f3933f55765f468f9f597efe14d4": {
      "address": "0xFd760f0D9ea00c4f09E65FB4b7F737022B26fC01",
      "txHash": "0x9d875e11ef2379a3a97595c36937544569ee9a5968297aca83da082d06dda038",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "StackingActiveL1",
            "label": "ant3Token",
            "type": "t_contract(IAnt3)14299",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:18"
          },
          {
            "contract": "StackingActiveL1",
            "label": "stackingControllerContract",
            "type": "t_contract(IStackingController)11172",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:19"
          },
          {
            "contract": "StackingActiveL1",
            "label": "dividingValue",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:20"
          },
          {
            "contract": "StackingActiveL1",
            "label": "lastRound",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:21"
          },
          {
            "contract": "StackingActiveL1",
            "label": "lastMoId",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:22"
          },
          {
            "contract": "StackingActiveL1",
            "label": "sortedRoundForDeductShare",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:23"
          },
          {
            "contract": "StackingActiveL1",
            "label": "roundDeductShare",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:24"
          },
          {
            "contract": "StackingActiveL1",
            "label": "rounds",
            "type": "t_mapping(t_uint256,t_struct(Round)11183_storage)",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:25"
          },
          {
            "contract": "StackingActiveL1",
            "label": "allOrders",
            "type": "t_mapping(t_uint256,t_struct(Order)11224_storage)",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:26"
          },
          {
            "contract": "StackingActiveL1",
            "label": "allUsers",
            "type": "t_mapping(t_address,t_struct(User)11207_storage)",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:27"
          },
          {
            "contract": "StackingActiveL1",
            "label": "roundTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:28"
          }
        ],
        "types": {
          "t_contract(IAnt3)14299": {
            "label": "contract IAnt3"
          },
          "t_contract(IStackingController)11172": {
            "label": "contract IStackingController"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_struct(Round)11183_storage)": {
            "label": "mapping(uint256 => struct Round)"
          },
          "t_struct(Round)11183_storage": {
            "label": "struct Round",
            "members": [
              {
                "label": "toDistribute",
                "type": "t_uint256"
              },
              {
                "label": "toCarryForward",
                "type": "t_uint256"
              },
              {
                "label": "accmStakedShare",
                "type": "t_uint256"
              },
              {
                "label": "startTime",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(Order)11224_storage)": {
            "label": "mapping(uint256 => struct Order)"
          },
          "t_struct(Order)11224_storage": {
            "label": "struct Order",
            "members": [
              {
                "label": "startRound",
                "type": "t_uint256"
              },
              {
                "label": "endRound",
                "type": "t_uint256"
              },
              {
                "label": "shareReward",
                "type": "t_uint256"
              },
              {
                "label": "oriClock",
                "type": "t_uint256"
              },
              {
                "label": "endClock",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "packageId",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(User)11207_storage)": {
            "label": "mapping(address => struct User)"
          },
          "t_struct(User)11207_storage": {
            "label": "struct User",
            "members": [
              {
                "label": "startingIndexForAddShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForAddShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundAddShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "startingIndexForDeductShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForDeductShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundDeductShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "userOrders",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "lastClaimRound",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "ead1347bb023297cf6bf132310642fc106b774d403b81700702b17acde117ffd": {
      "address": "0x7F75405B6c163F7Bb9b6E40F52D3d2B2aE784B44",
      "txHash": "0xdca6f96a662cda7e6bba3f63214a766d4911759c8966094dbd68ac1d17439154",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "StackingPassive",
            "label": "ant3Token",
            "type": "t_contract(IAnt3)14298",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:17"
          },
          {
            "contract": "StackingPassive",
            "label": "stackingControllerContract",
            "type": "t_contract(IStackingController)11171",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:18"
          },
          {
            "contract": "StackingPassive",
            "label": "dividingValue",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:19"
          },
          {
            "contract": "StackingPassive",
            "label": "lastRound",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:20"
          },
          {
            "contract": "StackingPassive",
            "label": "lastMoId",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:21"
          },
          {
            "contract": "StackingPassive",
            "label": "sortedRoundForDeductShare",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:22"
          },
          {
            "contract": "StackingPassive",
            "label": "roundDeductShare",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:23"
          },
          {
            "contract": "StackingPassive",
            "label": "rounds",
            "type": "t_mapping(t_uint256,t_struct(Round)11182_storage)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:24"
          },
          {
            "contract": "StackingPassive",
            "label": "allOrders",
            "type": "t_mapping(t_uint256,t_struct(Order)11223_storage)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:25"
          },
          {
            "contract": "StackingPassive",
            "label": "allUsers",
            "type": "t_mapping(t_address,t_struct(User)11206_storage)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:26"
          },
          {
            "contract": "StackingPassive",
            "label": "roundTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:27"
          },
          {
            "contract": "StackingPassive",
            "label": "userClockActive",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:28"
          }
        ],
        "types": {
          "t_contract(IAnt3)14298": {
            "label": "contract IAnt3"
          },
          "t_contract(IStackingController)11171": {
            "label": "contract IStackingController"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_struct(Round)11182_storage)": {
            "label": "mapping(uint256 => struct Round)"
          },
          "t_struct(Round)11182_storage": {
            "label": "struct Round",
            "members": [
              {
                "label": "toDistribute",
                "type": "t_uint256"
              },
              {
                "label": "toCarryForward",
                "type": "t_uint256"
              },
              {
                "label": "accmStakedShare",
                "type": "t_uint256"
              },
              {
                "label": "startTime",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(Order)11223_storage)": {
            "label": "mapping(uint256 => struct Order)"
          },
          "t_struct(Order)11223_storage": {
            "label": "struct Order",
            "members": [
              {
                "label": "startRound",
                "type": "t_uint256"
              },
              {
                "label": "endRound",
                "type": "t_uint256"
              },
              {
                "label": "shareReward",
                "type": "t_uint256"
              },
              {
                "label": "oriClock",
                "type": "t_uint256"
              },
              {
                "label": "endClock",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "packageId",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(User)11206_storage)": {
            "label": "mapping(address => struct User)"
          },
          "t_struct(User)11206_storage": {
            "label": "struct User",
            "members": [
              {
                "label": "startingIndexForAddShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForAddShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundAddShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "startingIndexForDeductShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForDeductShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundDeductShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "userOrders",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "lastClaimRound",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "b45af17dd44a9617c15217517c32a3c613c9ab05edd2287e81e94065eb47d7b2": {
      "address": "0xB11fb346aA644434d59C152750DC04b9C99eD694",
      "txHash": "0xba9136ed1767a77caaec8e072c3008a930c2e4709866c2abe06b25949b07ddcf",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "NodePassive",
            "label": "ant3Token",
            "type": "t_contract(IAnt3)14298",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:17"
          },
          {
            "contract": "NodePassive",
            "label": "nodeControllerContract",
            "type": "t_contract(INodeController)6996",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:18"
          },
          {
            "contract": "NodePassive",
            "label": "dividingValue",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:19"
          },
          {
            "contract": "NodePassive",
            "label": "lastRound",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:20"
          },
          {
            "contract": "NodePassive",
            "label": "lastMoId",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:21"
          },
          {
            "contract": "NodePassive",
            "label": "sortedRoundForDeductShare",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:22"
          },
          {
            "contract": "NodePassive",
            "label": "roundDeductShare",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:23"
          },
          {
            "contract": "NodePassive",
            "label": "rounds",
            "type": "t_mapping(t_uint256,t_struct(Round)7007_storage)",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:24"
          },
          {
            "contract": "NodePassive",
            "label": "allOrders",
            "type": "t_mapping(t_uint256,t_struct(Order)7042_storage)",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:25"
          },
          {
            "contract": "NodePassive",
            "label": "allUsers",
            "type": "t_mapping(t_address,t_struct(User)7031_storage)",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:26"
          },
          {
            "contract": "NodePassive",
            "label": "roundTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:27"
          },
          {
            "contract": "NodePassive",
            "label": "userClockActive",
            "type": "t_mapping(t_address,t_bool)",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:28"
          },
          {
            "contract": "NodePassive",
            "label": "userValidOrderCount",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:29"
          }
        ],
        "types": {
          "t_contract(IAnt3)14298": {
            "label": "contract IAnt3"
          },
          "t_contract(INodeController)6996": {
            "label": "contract INodeController"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_struct(Round)7007_storage)": {
            "label": "mapping(uint256 => struct Round)"
          },
          "t_struct(Round)7007_storage": {
            "label": "struct Round",
            "members": [
              {
                "label": "toDistribute",
                "type": "t_uint256"
              },
              {
                "label": "toCarryForward",
                "type": "t_uint256"
              },
              {
                "label": "accmStakedShare",
                "type": "t_uint256"
              },
              {
                "label": "startTime",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(Order)7042_storage)": {
            "label": "mapping(uint256 => struct Order)"
          },
          "t_struct(Order)7042_storage": {
            "label": "struct Order",
            "members": [
              {
                "label": "startRound",
                "type": "t_uint256"
              },
              {
                "label": "endRound",
                "type": "t_uint256"
              },
              {
                "label": "shareReward",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "packageId",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(User)7031_storage)": {
            "label": "mapping(address => struct User)"
          },
          "t_struct(User)7031_storage": {
            "label": "struct User",
            "members": [
              {
                "label": "startingIndexForAddShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForAddShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundAddShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "startingIndexForDeductShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForDeductShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundDeductShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "userOrders",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "lastClaimRound",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          }
        }
      }
    },
    "abeb6db498efc2fc322b421566588ab4f5435addff9fded291307a68b3de6608": {
      "address": "0x1bbFFD866781Eb95A19824cE8F54A1a38EE78b23",
      "txHash": "0x2ba056012254bbcf2fad8dcf329b0a2704121a91153e3011a7c2b0edf916363f",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "NodeActiveL1",
            "label": "ant3Token",
            "type": "t_contract(IAnt3)14298",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:18"
          },
          {
            "contract": "NodeActiveL1",
            "label": "nodeControllerContract",
            "type": "t_contract(INodeController)6996",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:20"
          },
          {
            "contract": "NodeActiveL1",
            "label": "dividingValue",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:21"
          },
          {
            "contract": "NodeActiveL1",
            "label": "lastRound",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:22"
          },
          {
            "contract": "NodeActiveL1",
            "label": "lastMoId",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:23"
          },
          {
            "contract": "NodeActiveL1",
            "label": "sortedRoundForDeductShare",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:24"
          },
          {
            "contract": "NodeActiveL1",
            "label": "roundDeductShare",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:25"
          },
          {
            "contract": "NodeActiveL1",
            "label": "rounds",
            "type": "t_mapping(t_uint256,t_struct(Round)7007_storage)",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:26"
          },
          {
            "contract": "NodeActiveL1",
            "label": "allOrders",
            "type": "t_mapping(t_uint256,t_struct(Order)7042_storage)",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:27"
          },
          {
            "contract": "NodeActiveL1",
            "label": "allUsers",
            "type": "t_mapping(t_address,t_struct(User)7031_storage)",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:28"
          },
          {
            "contract": "NodeActiveL1",
            "label": "roundTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:29"
          }
        ],
        "types": {
          "t_contract(IAnt3)14298": {
            "label": "contract IAnt3"
          },
          "t_contract(INodeController)6996": {
            "label": "contract INodeController"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_struct(Round)7007_storage)": {
            "label": "mapping(uint256 => struct Round)"
          },
          "t_struct(Round)7007_storage": {
            "label": "struct Round",
            "members": [
              {
                "label": "toDistribute",
                "type": "t_uint256"
              },
              {
                "label": "toCarryForward",
                "type": "t_uint256"
              },
              {
                "label": "accmStakedShare",
                "type": "t_uint256"
              },
              {
                "label": "startTime",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(Order)7042_storage)": {
            "label": "mapping(uint256 => struct Order)"
          },
          "t_struct(Order)7042_storage": {
            "label": "struct Order",
            "members": [
              {
                "label": "startRound",
                "type": "t_uint256"
              },
              {
                "label": "endRound",
                "type": "t_uint256"
              },
              {
                "label": "shareReward",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "packageId",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(User)7031_storage)": {
            "label": "mapping(address => struct User)"
          },
          "t_struct(User)7031_storage": {
            "label": "struct User",
            "members": [
              {
                "label": "startingIndexForAddShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForAddShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundAddShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "startingIndexForDeductShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForDeductShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundDeductShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "userOrders",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "lastClaimRound",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "1c9a0ed21ceffd41ee97044354cf0e4b7fc8b5e7664836b2a5f082c6561ef22a": {
      "address": "0xfD3B6A9A061C9872CbB554Bc5C60B6978435Ed29",
      "txHash": "0x0124143ef3506a4384909dc4a22797f41cf19a54aa6a431818c01fe7845882c0",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "StackingActiveL1",
            "label": "ant3Token",
            "type": "t_contract(IAnt3)14298",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:18"
          },
          {
            "contract": "StackingActiveL1",
            "label": "stackingControllerContract",
            "type": "t_contract(IStackingController)11171",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:19"
          },
          {
            "contract": "StackingActiveL1",
            "label": "dividingValue",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:20"
          },
          {
            "contract": "StackingActiveL1",
            "label": "lastRound",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:21"
          },
          {
            "contract": "StackingActiveL1",
            "label": "lastMoId",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:22"
          },
          {
            "contract": "StackingActiveL1",
            "label": "sortedRoundForDeductShare",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:23"
          },
          {
            "contract": "StackingActiveL1",
            "label": "roundDeductShare",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:24"
          },
          {
            "contract": "StackingActiveL1",
            "label": "rounds",
            "type": "t_mapping(t_uint256,t_struct(Round)11182_storage)",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:25"
          },
          {
            "contract": "StackingActiveL1",
            "label": "allOrders",
            "type": "t_mapping(t_uint256,t_struct(Order)11223_storage)",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:26"
          },
          {
            "contract": "StackingActiveL1",
            "label": "allUsers",
            "type": "t_mapping(t_address,t_struct(User)11206_storage)",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:27"
          },
          {
            "contract": "StackingActiveL1",
            "label": "roundTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:28"
          }
        ],
        "types": {
          "t_contract(IAnt3)14298": {
            "label": "contract IAnt3"
          },
          "t_contract(IStackingController)11171": {
            "label": "contract IStackingController"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_struct(Round)11182_storage)": {
            "label": "mapping(uint256 => struct Round)"
          },
          "t_struct(Round)11182_storage": {
            "label": "struct Round",
            "members": [
              {
                "label": "toDistribute",
                "type": "t_uint256"
              },
              {
                "label": "toCarryForward",
                "type": "t_uint256"
              },
              {
                "label": "accmStakedShare",
                "type": "t_uint256"
              },
              {
                "label": "startTime",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(Order)11223_storage)": {
            "label": "mapping(uint256 => struct Order)"
          },
          "t_struct(Order)11223_storage": {
            "label": "struct Order",
            "members": [
              {
                "label": "startRound",
                "type": "t_uint256"
              },
              {
                "label": "endRound",
                "type": "t_uint256"
              },
              {
                "label": "shareReward",
                "type": "t_uint256"
              },
              {
                "label": "oriClock",
                "type": "t_uint256"
              },
              {
                "label": "endClock",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "packageId",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(User)11206_storage)": {
            "label": "mapping(address => struct User)"
          },
          "t_struct(User)11206_storage": {
            "label": "struct User",
            "members": [
              {
                "label": "startingIndexForAddShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForAddShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundAddShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "startingIndexForDeductShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForDeductShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundDeductShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "userOrders",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "lastClaimRound",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "54f438f1bbb150cc23eb900530da4277bfad9cafb8326d35c959a5fba65c9d4e": {
      "address": "0x13B36496845E34fEfaB17618655EaC74373181D0",
      "txHash": "0x92ed3a78d8f5993936131cb63a8d53c55408c957fa19046da87c8c3a41288b51",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "StackingPassive",
            "label": "ant3Token",
            "type": "t_contract(IAnt3)14863",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:17"
          },
          {
            "contract": "StackingPassive",
            "label": "stackingControllerContract",
            "type": "t_contract(IStackingController)11736",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:18"
          },
          {
            "contract": "StackingPassive",
            "label": "dividingValue",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:19"
          },
          {
            "contract": "StackingPassive",
            "label": "lastRound",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:20"
          },
          {
            "contract": "StackingPassive",
            "label": "lastMoId",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:21"
          },
          {
            "contract": "StackingPassive",
            "label": "sortedRoundForDeductShare",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:22"
          },
          {
            "contract": "StackingPassive",
            "label": "roundDeductShare",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:23"
          },
          {
            "contract": "StackingPassive",
            "label": "rounds",
            "type": "t_mapping(t_uint256,t_struct(Round)11747_storage)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:24"
          },
          {
            "contract": "StackingPassive",
            "label": "allOrders",
            "type": "t_mapping(t_uint256,t_struct(Order)11788_storage)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:25"
          },
          {
            "contract": "StackingPassive",
            "label": "allUsers",
            "type": "t_mapping(t_address,t_struct(User)11771_storage)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:26"
          },
          {
            "contract": "StackingPassive",
            "label": "roundTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:27"
          },
          {
            "contract": "StackingPassive",
            "label": "userClockActive",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:28"
          }
        ],
        "types": {
          "t_contract(IAnt3)14863": {
            "label": "contract IAnt3"
          },
          "t_contract(IStackingController)11736": {
            "label": "contract IStackingController"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_struct(Round)11747_storage)": {
            "label": "mapping(uint256 => struct Round)"
          },
          "t_struct(Round)11747_storage": {
            "label": "struct Round",
            "members": [
              {
                "label": "toDistribute",
                "type": "t_uint256"
              },
              {
                "label": "toCarryForward",
                "type": "t_uint256"
              },
              {
                "label": "accmStakedShare",
                "type": "t_uint256"
              },
              {
                "label": "startTime",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(Order)11788_storage)": {
            "label": "mapping(uint256 => struct Order)"
          },
          "t_struct(Order)11788_storage": {
            "label": "struct Order",
            "members": [
              {
                "label": "startRound",
                "type": "t_uint256"
              },
              {
                "label": "endRound",
                "type": "t_uint256"
              },
              {
                "label": "shareReward",
                "type": "t_uint256"
              },
              {
                "label": "oriClock",
                "type": "t_uint256"
              },
              {
                "label": "endClock",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "packageId",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(User)11771_storage)": {
            "label": "mapping(address => struct User)"
          },
          "t_struct(User)11771_storage": {
            "label": "struct User",
            "members": [
              {
                "label": "startingIndexForAddShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForAddShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundAddShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "startingIndexForDeductShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForDeductShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundDeductShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "userOrders",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "lastClaimRound",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "defb9b14338abe10e19938b32f10ed001495b2f588294177adaf373ee71bdfb3": {
      "address": "0xE8E4f8D20aD4e85b9d329720f4055754f6F62be1",
      "txHash": "0xd1c5627c8ab707f2a5787693d51499b60166413d3e750639741cde51341f242f",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "NodePassive",
            "label": "ant3Token",
            "type": "t_contract(IAnt3)14863",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:17"
          },
          {
            "contract": "NodePassive",
            "label": "nodeControllerContract",
            "type": "t_contract(INodeController)7280",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:18"
          },
          {
            "contract": "NodePassive",
            "label": "dividingValue",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:19"
          },
          {
            "contract": "NodePassive",
            "label": "lastRound",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:20"
          },
          {
            "contract": "NodePassive",
            "label": "lastMoId",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:21"
          },
          {
            "contract": "NodePassive",
            "label": "sortedRoundForDeductShare",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:22"
          },
          {
            "contract": "NodePassive",
            "label": "roundDeductShare",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:23"
          },
          {
            "contract": "NodePassive",
            "label": "rounds",
            "type": "t_mapping(t_uint256,t_struct(Round)7291_storage)",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:24"
          },
          {
            "contract": "NodePassive",
            "label": "allOrders",
            "type": "t_mapping(t_uint256,t_struct(Order)7326_storage)",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:25"
          },
          {
            "contract": "NodePassive",
            "label": "allUsers",
            "type": "t_mapping(t_address,t_struct(User)7315_storage)",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:26"
          },
          {
            "contract": "NodePassive",
            "label": "roundTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:27"
          },
          {
            "contract": "NodePassive",
            "label": "userClockActive",
            "type": "t_mapping(t_address,t_bool)",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:28"
          },
          {
            "contract": "NodePassive",
            "label": "userValidOrderCount",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:29"
          }
        ],
        "types": {
          "t_contract(IAnt3)14863": {
            "label": "contract IAnt3"
          },
          "t_contract(INodeController)7280": {
            "label": "contract INodeController"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_struct(Round)7291_storage)": {
            "label": "mapping(uint256 => struct Round)"
          },
          "t_struct(Round)7291_storage": {
            "label": "struct Round",
            "members": [
              {
                "label": "toDistribute",
                "type": "t_uint256"
              },
              {
                "label": "toCarryForward",
                "type": "t_uint256"
              },
              {
                "label": "accmStakedShare",
                "type": "t_uint256"
              },
              {
                "label": "startTime",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(Order)7326_storage)": {
            "label": "mapping(uint256 => struct Order)"
          },
          "t_struct(Order)7326_storage": {
            "label": "struct Order",
            "members": [
              {
                "label": "startRound",
                "type": "t_uint256"
              },
              {
                "label": "endRound",
                "type": "t_uint256"
              },
              {
                "label": "shareReward",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "packageId",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(User)7315_storage)": {
            "label": "mapping(address => struct User)"
          },
          "t_struct(User)7315_storage": {
            "label": "struct User",
            "members": [
              {
                "label": "startingIndexForAddShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForAddShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundAddShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "startingIndexForDeductShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForDeductShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundDeductShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "userOrders",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "lastClaimRound",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          }
        }
      }
    },
    "8d8cf789810509a66e16a573021d381e02e17e45da8498457f3ca42778674c70": {
      "address": "0xaeDA8c7396675bFc8341Aa26674757E0732eE734",
      "txHash": "0x83645f86f14c3334404c7694d8e0c49c4c01d397a00081d8be61d5fa29905493",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "NodeActiveL1",
            "label": "ant3Token",
            "type": "t_contract(IAnt3)14863",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:18"
          },
          {
            "contract": "NodeActiveL1",
            "label": "nodeControllerContract",
            "type": "t_contract(INodeController)7280",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:20"
          },
          {
            "contract": "NodeActiveL1",
            "label": "dividingValue",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:21"
          },
          {
            "contract": "NodeActiveL1",
            "label": "lastRound",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:22"
          },
          {
            "contract": "NodeActiveL1",
            "label": "lastMoId",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:23"
          },
          {
            "contract": "NodeActiveL1",
            "label": "sortedRoundForDeductShare",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:24"
          },
          {
            "contract": "NodeActiveL1",
            "label": "roundDeductShare",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:25"
          },
          {
            "contract": "NodeActiveL1",
            "label": "rounds",
            "type": "t_mapping(t_uint256,t_struct(Round)7291_storage)",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:26"
          },
          {
            "contract": "NodeActiveL1",
            "label": "allOrders",
            "type": "t_mapping(t_uint256,t_struct(Order)7326_storage)",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:27"
          },
          {
            "contract": "NodeActiveL1",
            "label": "allUsers",
            "type": "t_mapping(t_address,t_struct(User)7315_storage)",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:28"
          },
          {
            "contract": "NodeActiveL1",
            "label": "roundTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:29"
          }
        ],
        "types": {
          "t_contract(IAnt3)14863": {
            "label": "contract IAnt3"
          },
          "t_contract(INodeController)7280": {
            "label": "contract INodeController"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_struct(Round)7291_storage)": {
            "label": "mapping(uint256 => struct Round)"
          },
          "t_struct(Round)7291_storage": {
            "label": "struct Round",
            "members": [
              {
                "label": "toDistribute",
                "type": "t_uint256"
              },
              {
                "label": "toCarryForward",
                "type": "t_uint256"
              },
              {
                "label": "accmStakedShare",
                "type": "t_uint256"
              },
              {
                "label": "startTime",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(Order)7326_storage)": {
            "label": "mapping(uint256 => struct Order)"
          },
          "t_struct(Order)7326_storage": {
            "label": "struct Order",
            "members": [
              {
                "label": "startRound",
                "type": "t_uint256"
              },
              {
                "label": "endRound",
                "type": "t_uint256"
              },
              {
                "label": "shareReward",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "packageId",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(User)7315_storage)": {
            "label": "mapping(address => struct User)"
          },
          "t_struct(User)7315_storage": {
            "label": "struct User",
            "members": [
              {
                "label": "startingIndexForAddShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForAddShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundAddShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "startingIndexForDeductShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForDeductShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundDeductShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "userOrders",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "lastClaimRound",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "62b4631a5c76705e589d060fbf2e94a4c7140e14703d4a62fd22bc627ffe0125": {
      "address": "0x70D28cd66d79B2e3497B46eB11a93340A53230D6",
      "txHash": "0x301962192ceb36ead2e9e4994c12ec2bdb32ac81c9f5b179cb03997822fcefb9",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "StackingActiveL1",
            "label": "ant3Token",
            "type": "t_contract(IAnt3)14863",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:18"
          },
          {
            "contract": "StackingActiveL1",
            "label": "stackingControllerContract",
            "type": "t_contract(IStackingController)11736",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:19"
          },
          {
            "contract": "StackingActiveL1",
            "label": "dividingValue",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:20"
          },
          {
            "contract": "StackingActiveL1",
            "label": "lastRound",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:21"
          },
          {
            "contract": "StackingActiveL1",
            "label": "lastMoId",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:22"
          },
          {
            "contract": "StackingActiveL1",
            "label": "sortedRoundForDeductShare",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:23"
          },
          {
            "contract": "StackingActiveL1",
            "label": "roundDeductShare",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:24"
          },
          {
            "contract": "StackingActiveL1",
            "label": "rounds",
            "type": "t_mapping(t_uint256,t_struct(Round)11747_storage)",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:25"
          },
          {
            "contract": "StackingActiveL1",
            "label": "allOrders",
            "type": "t_mapping(t_uint256,t_struct(Order)11788_storage)",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:26"
          },
          {
            "contract": "StackingActiveL1",
            "label": "allUsers",
            "type": "t_mapping(t_address,t_struct(User)11771_storage)",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:27"
          },
          {
            "contract": "StackingActiveL1",
            "label": "roundTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:28"
          }
        ],
        "types": {
          "t_contract(IAnt3)14863": {
            "label": "contract IAnt3"
          },
          "t_contract(IStackingController)11736": {
            "label": "contract IStackingController"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_struct(Round)11747_storage)": {
            "label": "mapping(uint256 => struct Round)"
          },
          "t_struct(Round)11747_storage": {
            "label": "struct Round",
            "members": [
              {
                "label": "toDistribute",
                "type": "t_uint256"
              },
              {
                "label": "toCarryForward",
                "type": "t_uint256"
              },
              {
                "label": "accmStakedShare",
                "type": "t_uint256"
              },
              {
                "label": "startTime",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(Order)11788_storage)": {
            "label": "mapping(uint256 => struct Order)"
          },
          "t_struct(Order)11788_storage": {
            "label": "struct Order",
            "members": [
              {
                "label": "startRound",
                "type": "t_uint256"
              },
              {
                "label": "endRound",
                "type": "t_uint256"
              },
              {
                "label": "shareReward",
                "type": "t_uint256"
              },
              {
                "label": "oriClock",
                "type": "t_uint256"
              },
              {
                "label": "endClock",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "packageId",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(User)11771_storage)": {
            "label": "mapping(address => struct User)"
          },
          "t_struct(User)11771_storage": {
            "label": "struct User",
            "members": [
              {
                "label": "startingIndexForAddShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForAddShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundAddShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "startingIndexForDeductShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForDeductShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundDeductShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "userOrders",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "lastClaimRound",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "ffe13714fc62d73bc8dc22427e2c061ae0016b957fb29cf7c9f579a54eb98d32": {
      "address": "0xCf0116ac4c57683E3010D304FF08CC9E8cEb07C1",
      "txHash": "0xa94c86ec23783b4a78cd439422053863713079a1ed8d74711fb0ef65dbe4ed42",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "StackingPassive",
            "label": "ant3Token",
            "type": "t_contract(IAnt3)14275",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:17"
          },
          {
            "contract": "StackingPassive",
            "label": "stackingControllerContract",
            "type": "t_contract(IStackingController)11148",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:18"
          },
          {
            "contract": "StackingPassive",
            "label": "dividingValue",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:19"
          },
          {
            "contract": "StackingPassive",
            "label": "lastRound",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:20"
          },
          {
            "contract": "StackingPassive",
            "label": "lastMoId",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:21"
          },
          {
            "contract": "StackingPassive",
            "label": "sortedRoundForDeductShare",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:22"
          },
          {
            "contract": "StackingPassive",
            "label": "roundDeductShare",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:23"
          },
          {
            "contract": "StackingPassive",
            "label": "rounds",
            "type": "t_mapping(t_uint256,t_struct(Round)11159_storage)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:24"
          },
          {
            "contract": "StackingPassive",
            "label": "allOrders",
            "type": "t_mapping(t_uint256,t_struct(Order)11200_storage)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:25"
          },
          {
            "contract": "StackingPassive",
            "label": "allUsers",
            "type": "t_mapping(t_address,t_struct(User)11183_storage)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:26"
          },
          {
            "contract": "StackingPassive",
            "label": "roundTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:27"
          },
          {
            "contract": "StackingPassive",
            "label": "userClockActive",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:28"
          }
        ],
        "types": {
          "t_contract(IAnt3)14275": {
            "label": "contract IAnt3"
          },
          "t_contract(IStackingController)11148": {
            "label": "contract IStackingController"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_struct(Round)11159_storage)": {
            "label": "mapping(uint256 => struct Round)"
          },
          "t_struct(Round)11159_storage": {
            "label": "struct Round",
            "members": [
              {
                "label": "toDistribute",
                "type": "t_uint256"
              },
              {
                "label": "toCarryForward",
                "type": "t_uint256"
              },
              {
                "label": "accmStakedShare",
                "type": "t_uint256"
              },
              {
                "label": "startTime",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(Order)11200_storage)": {
            "label": "mapping(uint256 => struct Order)"
          },
          "t_struct(Order)11200_storage": {
            "label": "struct Order",
            "members": [
              {
                "label": "startRound",
                "type": "t_uint256"
              },
              {
                "label": "endRound",
                "type": "t_uint256"
              },
              {
                "label": "shareReward",
                "type": "t_uint256"
              },
              {
                "label": "oriClock",
                "type": "t_uint256"
              },
              {
                "label": "endClock",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "packageId",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(User)11183_storage)": {
            "label": "mapping(address => struct User)"
          },
          "t_struct(User)11183_storage": {
            "label": "struct User",
            "members": [
              {
                "label": "startingIndexForAddShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForAddShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundAddShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "startingIndexForDeductShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForDeductShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundDeductShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "userOrders",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "lastClaimRound",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "4b497c19463f8825be8772ab2efce607ebdfe7a22ae1a7c2df312d74ac8b9031": {
      "address": "0x2c1e983794a67F3cFEE9deE85E7acE4655c9773c",
      "txHash": "0x8384deb8ac51fbc0bb569922e08cda00c432697d5e367c88671f6820c6a0d096",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "NodePassive",
            "label": "ant3Token",
            "type": "t_contract(IAnt3)14275",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:17"
          },
          {
            "contract": "NodePassive",
            "label": "nodeControllerContract",
            "type": "t_contract(INodeController)6996",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:18"
          },
          {
            "contract": "NodePassive",
            "label": "dividingValue",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:19"
          },
          {
            "contract": "NodePassive",
            "label": "lastRound",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:20"
          },
          {
            "contract": "NodePassive",
            "label": "lastMoId",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:21"
          },
          {
            "contract": "NodePassive",
            "label": "sortedRoundForDeductShare",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:22"
          },
          {
            "contract": "NodePassive",
            "label": "roundDeductShare",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:23"
          },
          {
            "contract": "NodePassive",
            "label": "rounds",
            "type": "t_mapping(t_uint256,t_struct(Round)7007_storage)",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:24"
          },
          {
            "contract": "NodePassive",
            "label": "allOrders",
            "type": "t_mapping(t_uint256,t_struct(Order)7042_storage)",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:25"
          },
          {
            "contract": "NodePassive",
            "label": "allUsers",
            "type": "t_mapping(t_address,t_struct(User)7031_storage)",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:26"
          },
          {
            "contract": "NodePassive",
            "label": "roundTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:27"
          },
          {
            "contract": "NodePassive",
            "label": "userClockActive",
            "type": "t_mapping(t_address,t_bool)",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:28"
          },
          {
            "contract": "NodePassive",
            "label": "userValidOrderCount",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:29"
          }
        ],
        "types": {
          "t_contract(IAnt3)14275": {
            "label": "contract IAnt3"
          },
          "t_contract(INodeController)6996": {
            "label": "contract INodeController"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_struct(Round)7007_storage)": {
            "label": "mapping(uint256 => struct Round)"
          },
          "t_struct(Round)7007_storage": {
            "label": "struct Round",
            "members": [
              {
                "label": "toDistribute",
                "type": "t_uint256"
              },
              {
                "label": "toCarryForward",
                "type": "t_uint256"
              },
              {
                "label": "accmStakedShare",
                "type": "t_uint256"
              },
              {
                "label": "startTime",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(Order)7042_storage)": {
            "label": "mapping(uint256 => struct Order)"
          },
          "t_struct(Order)7042_storage": {
            "label": "struct Order",
            "members": [
              {
                "label": "startRound",
                "type": "t_uint256"
              },
              {
                "label": "endRound",
                "type": "t_uint256"
              },
              {
                "label": "shareReward",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "packageId",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(User)7031_storage)": {
            "label": "mapping(address => struct User)"
          },
          "t_struct(User)7031_storage": {
            "label": "struct User",
            "members": [
              {
                "label": "startingIndexForAddShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForAddShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundAddShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "startingIndexForDeductShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForDeductShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundDeductShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "userOrders",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "lastClaimRound",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          }
        }
      }
    },
    "70795524da57c2dc96ccac16e7c37206f63622424a5bba61f250e9697d2424b5": {
      "address": "0x6b6306232E3a27674a408ADf41aC19285CD98E55",
      "txHash": "0x01f4f9cf997bd509adbc41abaaf9d225f3e6f132fa3ea99627a305f482badb18",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "NodeActiveL1",
            "label": "ant3Token",
            "type": "t_contract(IAnt3)14275",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:18"
          },
          {
            "contract": "NodeActiveL1",
            "label": "nodeControllerContract",
            "type": "t_contract(INodeController)6996",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:20"
          },
          {
            "contract": "NodeActiveL1",
            "label": "dividingValue",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:21"
          },
          {
            "contract": "NodeActiveL1",
            "label": "lastRound",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:22"
          },
          {
            "contract": "NodeActiveL1",
            "label": "lastMoId",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:23"
          },
          {
            "contract": "NodeActiveL1",
            "label": "sortedRoundForDeductShare",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:24"
          },
          {
            "contract": "NodeActiveL1",
            "label": "roundDeductShare",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:25"
          },
          {
            "contract": "NodeActiveL1",
            "label": "rounds",
            "type": "t_mapping(t_uint256,t_struct(Round)7007_storage)",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:26"
          },
          {
            "contract": "NodeActiveL1",
            "label": "allOrders",
            "type": "t_mapping(t_uint256,t_struct(Order)7042_storage)",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:27"
          },
          {
            "contract": "NodeActiveL1",
            "label": "allUsers",
            "type": "t_mapping(t_address,t_struct(User)7031_storage)",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:28"
          },
          {
            "contract": "NodeActiveL1",
            "label": "roundTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:29"
          }
        ],
        "types": {
          "t_contract(IAnt3)14275": {
            "label": "contract IAnt3"
          },
          "t_contract(INodeController)6996": {
            "label": "contract INodeController"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_struct(Round)7007_storage)": {
            "label": "mapping(uint256 => struct Round)"
          },
          "t_struct(Round)7007_storage": {
            "label": "struct Round",
            "members": [
              {
                "label": "toDistribute",
                "type": "t_uint256"
              },
              {
                "label": "toCarryForward",
                "type": "t_uint256"
              },
              {
                "label": "accmStakedShare",
                "type": "t_uint256"
              },
              {
                "label": "startTime",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(Order)7042_storage)": {
            "label": "mapping(uint256 => struct Order)"
          },
          "t_struct(Order)7042_storage": {
            "label": "struct Order",
            "members": [
              {
                "label": "startRound",
                "type": "t_uint256"
              },
              {
                "label": "endRound",
                "type": "t_uint256"
              },
              {
                "label": "shareReward",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "packageId",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(User)7031_storage)": {
            "label": "mapping(address => struct User)"
          },
          "t_struct(User)7031_storage": {
            "label": "struct User",
            "members": [
              {
                "label": "startingIndexForAddShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForAddShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundAddShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "startingIndexForDeductShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForDeductShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundDeductShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "userOrders",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "lastClaimRound",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "1f7d4988da2ab27cbcf3dec6d295b9f9bb71e2f0834fb9632553f0a5612e9eac": {
      "address": "0x273D7D7FD12d391d8fE8b3b0F65020BfF1BB4aB1",
      "txHash": "0x6b71a9dc1aa359cd8f66eabebfc9068ea634ed84f42a5f624f1b9ebe0fbf7606",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "StackingActiveL1",
            "label": "ant3Token",
            "type": "t_contract(IAnt3)14275",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:18"
          },
          {
            "contract": "StackingActiveL1",
            "label": "stackingControllerContract",
            "type": "t_contract(IStackingController)11148",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:19"
          },
          {
            "contract": "StackingActiveL1",
            "label": "dividingValue",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:20"
          },
          {
            "contract": "StackingActiveL1",
            "label": "lastRound",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:21"
          },
          {
            "contract": "StackingActiveL1",
            "label": "lastMoId",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:22"
          },
          {
            "contract": "StackingActiveL1",
            "label": "sortedRoundForDeductShare",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:23"
          },
          {
            "contract": "StackingActiveL1",
            "label": "roundDeductShare",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:24"
          },
          {
            "contract": "StackingActiveL1",
            "label": "rounds",
            "type": "t_mapping(t_uint256,t_struct(Round)11159_storage)",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:25"
          },
          {
            "contract": "StackingActiveL1",
            "label": "allOrders",
            "type": "t_mapping(t_uint256,t_struct(Order)11200_storage)",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:26"
          },
          {
            "contract": "StackingActiveL1",
            "label": "allUsers",
            "type": "t_mapping(t_address,t_struct(User)11183_storage)",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:27"
          },
          {
            "contract": "StackingActiveL1",
            "label": "roundTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:28"
          }
        ],
        "types": {
          "t_contract(IAnt3)14275": {
            "label": "contract IAnt3"
          },
          "t_contract(IStackingController)11148": {
            "label": "contract IStackingController"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_struct(Round)11159_storage)": {
            "label": "mapping(uint256 => struct Round)"
          },
          "t_struct(Round)11159_storage": {
            "label": "struct Round",
            "members": [
              {
                "label": "toDistribute",
                "type": "t_uint256"
              },
              {
                "label": "toCarryForward",
                "type": "t_uint256"
              },
              {
                "label": "accmStakedShare",
                "type": "t_uint256"
              },
              {
                "label": "startTime",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(Order)11200_storage)": {
            "label": "mapping(uint256 => struct Order)"
          },
          "t_struct(Order)11200_storage": {
            "label": "struct Order",
            "members": [
              {
                "label": "startRound",
                "type": "t_uint256"
              },
              {
                "label": "endRound",
                "type": "t_uint256"
              },
              {
                "label": "shareReward",
                "type": "t_uint256"
              },
              {
                "label": "oriClock",
                "type": "t_uint256"
              },
              {
                "label": "endClock",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "packageId",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(User)11183_storage)": {
            "label": "mapping(address => struct User)"
          },
          "t_struct(User)11183_storage": {
            "label": "struct User",
            "members": [
              {
                "label": "startingIndexForAddShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForAddShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundAddShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "startingIndexForDeductShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForDeductShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundDeductShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "userOrders",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "lastClaimRound",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "67f04c100838dabf13ff30e35b960311722cead9d54eebd5c586b63a7b2871ea": {
      "address": "0xfEAAb71BB8D84eb2Ad3131ECa1F1Fe361fE503F4",
      "txHash": "0xcfd6225237d21adf8b7c3fbd374fdac0f15672677ec2a45412e943e3fc54fd6b",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "StackingController",
            "label": "ant3Token",
            "type": "t_contract(IAnt3)14597",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:29"
          },
          {
            "contract": "StackingController",
            "label": "lpToken",
            "type": "t_contract(IERC20Upgradeable)971",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:30"
          },
          {
            "contract": "StackingController",
            "label": "stackingPassive",
            "type": "t_contract(IStackingPassive)11591",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:31"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL1",
            "type": "t_contract(IStackingActive)11443",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:32"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL2",
            "type": "t_contract(IStackingActive)11443",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:33"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL3",
            "type": "t_contract(IStackingActive)11443",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:34"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL4",
            "type": "t_contract(IStackingActive)11443",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:35"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL5",
            "type": "t_contract(IStackingActive)11443",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:36"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL6",
            "type": "t_contract(IStackingActive)11443",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:37"
          },
          {
            "contract": "StackingController",
            "label": "memberController",
            "type": "t_contract(IMemberController)2269",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:38"
          },
          {
            "contract": "StackingController",
            "label": "packagePrices",
            "type": "t_struct(PackagePrice)8095_storage",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:39"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveArray",
            "type": "t_array(t_contract(IStackingActive)11443)dyn_storage",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:41"
          },
          {
            "contract": "StackingController",
            "label": "alphaAccmQty",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:42"
          },
          {
            "contract": "StackingController",
            "label": "betaAccmQty",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:43"
          },
          {
            "contract": "StackingController",
            "label": "gammaAccmQty",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:44"
          },
          {
            "contract": "StackingController",
            "label": "referralRank",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:45"
          },
          {
            "contract": "StackingController",
            "label": "today",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:48"
          },
          {
            "contract": "StackingController",
            "label": "minStackForReferral",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:49"
          },
          {
            "contract": "StackingController",
            "label": "defaultSystemQuota",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:50"
          },
          {
            "contract": "StackingController",
            "label": "systemQuota",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:51"
          },
          {
            "contract": "StackingController",
            "label": "defaultUserQuota",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:52"
          },
          {
            "contract": "StackingController",
            "label": "userQuota",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:53"
          },
          {
            "contract": "StackingController",
            "label": "userToday",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:54"
          },
          {
            "contract": "StackingController",
            "label": "maxClaimRound",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:55"
          },
          {
            "contract": "StackingController",
            "label": "minStackAmt",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:56"
          },
          {
            "contract": "StackingController",
            "label": "shareMultiplier",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:57"
          }
        ],
        "types": {
          "t_contract(IAnt3)14597": {
            "label": "contract IAnt3"
          },
          "t_contract(IERC20Upgradeable)971": {
            "label": "contract IERC20Upgradeable"
          },
          "t_contract(IStackingPassive)11591": {
            "label": "contract IStackingPassive"
          },
          "t_contract(IStackingActive)11443": {
            "label": "contract IStackingActive"
          },
          "t_contract(IMemberController)2269": {
            "label": "contract IMemberController"
          },
          "t_struct(PackagePrice)8095_storage": {
            "label": "struct StackingController.PackagePrice",
            "members": [
              {
                "label": "alphaLockPeriod",
                "type": "t_uint256"
              },
              {
                "label": "alphaShareRate",
                "type": "t_uint256"
              },
              {
                "label": "betaLockPeriod",
                "type": "t_uint256"
              },
              {
                "label": "betaShareRate",
                "type": "t_uint256"
              },
              {
                "label": "gammaLockPeriod",
                "type": "t_uint256"
              },
              {
                "label": "gammaShareRate",
                "type": "t_uint256"
              },
              {
                "label": "packageId",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_contract(IStackingActive)11443)dyn_storage": {
            "label": "contract IStackingActive[]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "f36335ac8845b720580f41c72c28217f5b5bc0b526f5f52527bdf85de9d53f0e": {
      "address": "0xCbCa5a6Cb9489fb3Df24d6dFE2402e86f98202F6",
      "txHash": "0x06f9ce45a25466229c8a9c2cd9593b2af5e9d9bf542cad2aebb4803a5e8c7f42",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "StackingPassive",
            "label": "ant3Token",
            "type": "t_contract(IAnt3)14597",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:17"
          },
          {
            "contract": "StackingPassive",
            "label": "stackingControllerContract",
            "type": "t_contract(IStackingController)11456",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:18"
          },
          {
            "contract": "StackingPassive",
            "label": "dividingValue",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:19"
          },
          {
            "contract": "StackingPassive",
            "label": "lastRound",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:20"
          },
          {
            "contract": "StackingPassive",
            "label": "lastMoId",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:21"
          },
          {
            "contract": "StackingPassive",
            "label": "sortedRoundForDeductShare",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:22"
          },
          {
            "contract": "StackingPassive",
            "label": "roundDeductShare",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:23"
          },
          {
            "contract": "StackingPassive",
            "label": "rounds",
            "type": "t_mapping(t_uint256,t_struct(Round)11467_storage)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:24"
          },
          {
            "contract": "StackingPassive",
            "label": "allOrders",
            "type": "t_mapping(t_uint256,t_struct(Order)11508_storage)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:25"
          },
          {
            "contract": "StackingPassive",
            "label": "allUsers",
            "type": "t_mapping(t_address,t_struct(User)11491_storage)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:26"
          },
          {
            "contract": "StackingPassive",
            "label": "roundTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:27"
          },
          {
            "contract": "StackingPassive",
            "label": "userClockActive",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:28"
          }
        ],
        "types": {
          "t_contract(IAnt3)14597": {
            "label": "contract IAnt3"
          },
          "t_contract(IStackingController)11456": {
            "label": "contract IStackingController"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_struct(Round)11467_storage)": {
            "label": "mapping(uint256 => struct Round)"
          },
          "t_struct(Round)11467_storage": {
            "label": "struct Round",
            "members": [
              {
                "label": "toDistribute",
                "type": "t_uint256"
              },
              {
                "label": "toCarryForward",
                "type": "t_uint256"
              },
              {
                "label": "accmStakedShare",
                "type": "t_uint256"
              },
              {
                "label": "startTime",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(Order)11508_storage)": {
            "label": "mapping(uint256 => struct Order)"
          },
          "t_struct(Order)11508_storage": {
            "label": "struct Order",
            "members": [
              {
                "label": "startRound",
                "type": "t_uint256"
              },
              {
                "label": "endRound",
                "type": "t_uint256"
              },
              {
                "label": "shareReward",
                "type": "t_uint256"
              },
              {
                "label": "oriClock",
                "type": "t_uint256"
              },
              {
                "label": "endClock",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "packageId",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(User)11491_storage)": {
            "label": "mapping(address => struct User)"
          },
          "t_struct(User)11491_storage": {
            "label": "struct User",
            "members": [
              {
                "label": "startingIndexForAddShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForAddShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundAddShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "startingIndexForDeductShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForDeductShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundDeductShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "userOrders",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "lastClaimRound",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "ae6c87c89c1ad5a0674fa9bd858b2346cca5b6066eec32cc8cb322a67bdca052": {
      "address": "0x27543A199F2BD0C00fEA685923b599e8c4d44F7B",
      "txHash": "0xc5025e521f5948848b6a147c349fefb5fc8ef811bca18cf13bdd9951d9493356",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "StackingActiveL1",
            "label": "ant3Token",
            "type": "t_contract(IAnt3)14967",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:18"
          },
          {
            "contract": "StackingActiveL1",
            "label": "stackingControllerContract",
            "type": "t_contract(IStackingController)11826",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:19"
          },
          {
            "contract": "StackingActiveL1",
            "label": "dividingValue",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:20"
          },
          {
            "contract": "StackingActiveL1",
            "label": "lastRound",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:21"
          },
          {
            "contract": "StackingActiveL1",
            "label": "lastMoId",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:22"
          },
          {
            "contract": "StackingActiveL1",
            "label": "sortedRoundForDeductShare",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:23"
          },
          {
            "contract": "StackingActiveL1",
            "label": "roundDeductShare",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:24"
          },
          {
            "contract": "StackingActiveL1",
            "label": "rounds",
            "type": "t_mapping(t_uint256,t_struct(Round)11837_storage)",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:25"
          },
          {
            "contract": "StackingActiveL1",
            "label": "allOrders",
            "type": "t_mapping(t_uint256,t_struct(Order)11878_storage)",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:26"
          },
          {
            "contract": "StackingActiveL1",
            "label": "allUsers",
            "type": "t_mapping(t_address,t_struct(User)11861_storage)",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:27"
          },
          {
            "contract": "StackingActiveL1",
            "label": "roundTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:28"
          }
        ],
        "types": {
          "t_contract(IAnt3)14967": {
            "label": "contract IAnt3"
          },
          "t_contract(IStackingController)11826": {
            "label": "contract IStackingController"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_struct(Round)11837_storage)": {
            "label": "mapping(uint256 => struct Round)"
          },
          "t_struct(Round)11837_storage": {
            "label": "struct Round",
            "members": [
              {
                "label": "toDistribute",
                "type": "t_uint256"
              },
              {
                "label": "toCarryForward",
                "type": "t_uint256"
              },
              {
                "label": "accmStakedShare",
                "type": "t_uint256"
              },
              {
                "label": "startTime",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(Order)11878_storage)": {
            "label": "mapping(uint256 => struct Order)"
          },
          "t_struct(Order)11878_storage": {
            "label": "struct Order",
            "members": [
              {
                "label": "startRound",
                "type": "t_uint256"
              },
              {
                "label": "endRound",
                "type": "t_uint256"
              },
              {
                "label": "shareReward",
                "type": "t_uint256"
              },
              {
                "label": "oriClock",
                "type": "t_uint256"
              },
              {
                "label": "endClock",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "packageId",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(User)11861_storage)": {
            "label": "mapping(address => struct User)"
          },
          "t_struct(User)11861_storage": {
            "label": "struct User",
            "members": [
              {
                "label": "startingIndexForAddShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForAddShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundAddShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "startingIndexForDeductShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForDeductShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundDeductShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "userOrders",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "lastClaimRound",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "e9422579b9c33ffa6dd946a63ed47c4baf6007f1f664eb21af401b03fcd75d09": {
      "address": "0x800316A1014bA70b886b1254538e3E6B60651f9a",
      "txHash": "0xa360663724a94bce4ce2960f84fafb4e03c3a977769f9fc987386a496da8f2cf",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "StackingController",
            "label": "ant3Token",
            "type": "t_contract(IAnt3)14967",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:29"
          },
          {
            "contract": "StackingController",
            "label": "lpToken",
            "type": "t_contract(IERC20Upgradeable)971",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:30"
          },
          {
            "contract": "StackingController",
            "label": "stackingPassive",
            "type": "t_contract(IStackingPassive)11961",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:31"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL1",
            "type": "t_contract(IStackingActive)11813",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:32"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL2",
            "type": "t_contract(IStackingActive)11813",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:33"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL3",
            "type": "t_contract(IStackingActive)11813",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:34"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL4",
            "type": "t_contract(IStackingActive)11813",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:35"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL5",
            "type": "t_contract(IStackingActive)11813",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:36"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL6",
            "type": "t_contract(IStackingActive)11813",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:37"
          },
          {
            "contract": "StackingController",
            "label": "memberController",
            "type": "t_contract(IMemberController)2269",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:38"
          },
          {
            "contract": "StackingController",
            "label": "packagePrices",
            "type": "t_struct(PackagePrice)8377_storage",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:39"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveArray",
            "type": "t_array(t_contract(IStackingActive)11813)dyn_storage",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:41"
          },
          {
            "contract": "StackingController",
            "label": "alphaAccmQty",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:42"
          },
          {
            "contract": "StackingController",
            "label": "betaAccmQty",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:43"
          },
          {
            "contract": "StackingController",
            "label": "gammaAccmQty",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:44"
          },
          {
            "contract": "StackingController",
            "label": "referralRank",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:45"
          },
          {
            "contract": "StackingController",
            "label": "today",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:48"
          },
          {
            "contract": "StackingController",
            "label": "minStackForReferral",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:49"
          },
          {
            "contract": "StackingController",
            "label": "defaultSystemQuota",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:50"
          },
          {
            "contract": "StackingController",
            "label": "systemQuota",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:51"
          },
          {
            "contract": "StackingController",
            "label": "defaultUserQuota",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:52"
          },
          {
            "contract": "StackingController",
            "label": "userQuota",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:53"
          },
          {
            "contract": "StackingController",
            "label": "userToday",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:54"
          },
          {
            "contract": "StackingController",
            "label": "maxClaimRound",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:55"
          },
          {
            "contract": "StackingController",
            "label": "minStackAmt",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:56"
          },
          {
            "contract": "StackingController",
            "label": "shareMultiplier",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:57"
          }
        ],
        "types": {
          "t_contract(IAnt3)14967": {
            "label": "contract IAnt3"
          },
          "t_contract(IERC20Upgradeable)971": {
            "label": "contract IERC20Upgradeable"
          },
          "t_contract(IStackingPassive)11961": {
            "label": "contract IStackingPassive"
          },
          "t_contract(IStackingActive)11813": {
            "label": "contract IStackingActive"
          },
          "t_contract(IMemberController)2269": {
            "label": "contract IMemberController"
          },
          "t_struct(PackagePrice)8377_storage": {
            "label": "struct StackingController.PackagePrice",
            "members": [
              {
                "label": "alphaLockPeriod",
                "type": "t_uint256"
              },
              {
                "label": "alphaShareRate",
                "type": "t_uint256"
              },
              {
                "label": "betaLockPeriod",
                "type": "t_uint256"
              },
              {
                "label": "betaShareRate",
                "type": "t_uint256"
              },
              {
                "label": "gammaLockPeriod",
                "type": "t_uint256"
              },
              {
                "label": "gammaShareRate",
                "type": "t_uint256"
              },
              {
                "label": "packageId",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_contract(IStackingActive)11813)dyn_storage": {
            "label": "contract IStackingActive[]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "4d62ceed45f6edeabea339d1145d84908fcc7df0b75d18757d628b41769a26b9": {
      "address": "0x312F51bC186E28b3C33a9D746F7177f3ad6b5a22",
      "txHash": "0xe0c21e1224a8e59c5f93713b2f4a48776b8fde8bb2d83962856e3295b26cc374",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "NodeController",
            "label": "deAnt3Token",
            "type": "t_contract(IDeAnt3)15631",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:30"
          },
          {
            "contract": "NodeController",
            "label": "ant3Token",
            "type": "t_contract(IAnt3)15621",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:31"
          },
          {
            "contract": "NodeController",
            "label": "guardianToken",
            "type": "t_contract(IERC20Upgradeable)971",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:32"
          },
          {
            "contract": "NodeController",
            "label": "packagePrices",
            "type": "t_struct(PackagePrice)4241_storage",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:33"
          },
          {
            "contract": "NodeController",
            "label": "nodePassive",
            "type": "t_contract(INodePassive)7750",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:34"
          },
          {
            "contract": "NodeController",
            "label": "nodeActiveL1",
            "type": "t_contract(INodeActive)7628",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:35"
          },
          {
            "contract": "NodeController",
            "label": "nodeActiveL2",
            "type": "t_contract(INodeActive)7628",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:36"
          },
          {
            "contract": "NodeController",
            "label": "nodeActiveL3",
            "type": "t_contract(INodeActive)7628",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:37"
          },
          {
            "contract": "NodeController",
            "label": "nodeActiveL4",
            "type": "t_contract(INodeActive)7628",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:38"
          },
          {
            "contract": "NodeController",
            "label": "nodeActiveL5",
            "type": "t_contract(INodeActive)7628",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:39"
          },
          {
            "contract": "NodeController",
            "label": "nodeActiveL6",
            "type": "t_contract(INodeActive)7628",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:40"
          },
          {
            "contract": "NodeController",
            "label": "nodeActiveArray",
            "type": "t_array(t_contract(INodeActive)7628)dyn_storage",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:41"
          },
          {
            "contract": "NodeController",
            "label": "memberController",
            "type": "t_contract(IMemberController)2269",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:42"
          },
          {
            "contract": "NodeController",
            "label": "alphaAccmQty",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:43"
          },
          {
            "contract": "NodeController",
            "label": "betaAccmQty",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:44"
          },
          {
            "contract": "NodeController",
            "label": "gammaAccmQty",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:45"
          },
          {
            "contract": "NodeController",
            "label": "referralRank",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:46"
          },
          {
            "contract": "NodeController",
            "label": "validCaller",
            "type": "t_mapping(t_address,t_bool)",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:47"
          },
          {
            "contract": "NodeController",
            "label": "today",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:50"
          },
          {
            "contract": "NodeController",
            "label": "defaultQuota",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:51"
          },
          {
            "contract": "NodeController",
            "label": "allQuota",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:52"
          },
          {
            "contract": "NodeController",
            "label": "lastPromoCode",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:53"
          },
          {
            "contract": "NodeController",
            "label": "maxClaimRound",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:54"
          },
          {
            "contract": "NodeController",
            "label": "allPromoCode",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:55"
          },
          {
            "contract": "NodeController",
            "label": "deAnt3Decimals",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:76"
          },
          {
            "contract": "NodeController",
            "label": "guardianDecimals",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:77"
          },
          {
            "contract": "NodeController",
            "label": "_guardianCollectAddress",
            "type": "t_address",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:78"
          }
        ],
        "types": {
          "t_contract(IDeAnt3)15631": {
            "label": "contract IDeAnt3"
          },
          "t_contract(IAnt3)15621": {
            "label": "contract IAnt3"
          },
          "t_contract(IERC20Upgradeable)971": {
            "label": "contract IERC20Upgradeable"
          },
          "t_struct(PackagePrice)4241_storage": {
            "label": "struct NodeController.PackagePrice",
            "members": [
              {
                "label": "alphaDeAntPrice",
                "type": "t_uint256"
              },
              {
                "label": "alphaGuardianPrice",
                "type": "t_uint256"
              },
              {
                "label": "betaDeAntPrice",
                "type": "t_uint256"
              },
              {
                "label": "betaGuardianPrice",
                "type": "t_uint256"
              },
              {
                "label": "gammaDeAntPrice",
                "type": "t_uint256"
              },
              {
                "label": "gammaGuardianPrice",
                "type": "t_uint256"
              },
              {
                "label": "packageId",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(INodePassive)7750": {
            "label": "contract INodePassive"
          },
          "t_contract(INodeActive)7628": {
            "label": "contract INodeActive"
          },
          "t_array(t_contract(INodeActive)7628)dyn_storage": {
            "label": "contract INodeActive[]"
          },
          "t_contract(IMemberController)2269": {
            "label": "contract IMemberController"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          }
        }
      }
    },
    "754e6334ee9aa1529597a66deb2feb0c17057bf9b5ae5a4e2dcd7792ca3b0b46": {
      "address": "0xE07Bd2C8083f7C71d0cC75E15f6D1E412070c0b5",
      "txHash": "0x94da5541031d1a752fcd8b3e478a1f6a5a865c0741063e92c9eed3fcb82e5658",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "NodePassive",
            "label": "ant3Token",
            "type": "t_contract(IAnt3)15621",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:17"
          },
          {
            "contract": "NodePassive",
            "label": "nodeControllerContract",
            "type": "t_contract(INodeController)7636",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:18"
          },
          {
            "contract": "NodePassive",
            "label": "dividingValue",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:19"
          },
          {
            "contract": "NodePassive",
            "label": "lastRound",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:20"
          },
          {
            "contract": "NodePassive",
            "label": "lastMoId",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:21"
          },
          {
            "contract": "NodePassive",
            "label": "sortedRoundForDeductShare",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:22"
          },
          {
            "contract": "NodePassive",
            "label": "roundDeductShare",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:23"
          },
          {
            "contract": "NodePassive",
            "label": "rounds",
            "type": "t_mapping(t_uint256,t_struct(Round)7647_storage)",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:24"
          },
          {
            "contract": "NodePassive",
            "label": "allOrders",
            "type": "t_mapping(t_uint256,t_struct(Order)7682_storage)",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:25"
          },
          {
            "contract": "NodePassive",
            "label": "allUsers",
            "type": "t_mapping(t_address,t_struct(User)7671_storage)",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:26"
          },
          {
            "contract": "NodePassive",
            "label": "roundTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:27"
          },
          {
            "contract": "NodePassive",
            "label": "userClockActive",
            "type": "t_mapping(t_address,t_bool)",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:28"
          },
          {
            "contract": "NodePassive",
            "label": "userValidOrderCount",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:29"
          }
        ],
        "types": {
          "t_contract(IAnt3)15621": {
            "label": "contract IAnt3"
          },
          "t_contract(INodeController)7636": {
            "label": "contract INodeController"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_struct(Round)7647_storage)": {
            "label": "mapping(uint256 => struct Round)"
          },
          "t_struct(Round)7647_storage": {
            "label": "struct Round",
            "members": [
              {
                "label": "toDistribute",
                "type": "t_uint256"
              },
              {
                "label": "toCarryForward",
                "type": "t_uint256"
              },
              {
                "label": "accmStakedShare",
                "type": "t_uint256"
              },
              {
                "label": "startTime",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(Order)7682_storage)": {
            "label": "mapping(uint256 => struct Order)"
          },
          "t_struct(Order)7682_storage": {
            "label": "struct Order",
            "members": [
              {
                "label": "startRound",
                "type": "t_uint256"
              },
              {
                "label": "endRound",
                "type": "t_uint256"
              },
              {
                "label": "shareReward",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "packageId",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(User)7671_storage)": {
            "label": "mapping(address => struct User)"
          },
          "t_struct(User)7671_storage": {
            "label": "struct User",
            "members": [
              {
                "label": "startingIndexForAddShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForAddShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundAddShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "startingIndexForDeductShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForDeductShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundDeductShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "userOrders",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "lastClaimRound",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          }
        }
      }
    },
    "05b7d2e0ace6702fefadd7fe5fc932bda6a4ea8499e35960758c97cfd3aab2e6": {
      "address": "0x3Ee28B8c366Ad9cD1d8D384525b267124aF33ECb",
      "txHash": "0x635de4ad36b05ae65b68f56998e752aac4571e9f21091b8698d6f26b21c7e43b",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "NodeActiveL1",
            "label": "ant3Token",
            "type": "t_contract(IAnt3)15621",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:18"
          },
          {
            "contract": "NodeActiveL1",
            "label": "nodeControllerContract",
            "type": "t_contract(INodeController)7636",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:20"
          },
          {
            "contract": "NodeActiveL1",
            "label": "dividingValue",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:21"
          },
          {
            "contract": "NodeActiveL1",
            "label": "lastRound",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:22"
          },
          {
            "contract": "NodeActiveL1",
            "label": "lastMoId",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:23"
          },
          {
            "contract": "NodeActiveL1",
            "label": "sortedRoundForDeductShare",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:24"
          },
          {
            "contract": "NodeActiveL1",
            "label": "roundDeductShare",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:25"
          },
          {
            "contract": "NodeActiveL1",
            "label": "rounds",
            "type": "t_mapping(t_uint256,t_struct(Round)7647_storage)",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:26"
          },
          {
            "contract": "NodeActiveL1",
            "label": "allOrders",
            "type": "t_mapping(t_uint256,t_struct(Order)7682_storage)",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:27"
          },
          {
            "contract": "NodeActiveL1",
            "label": "allUsers",
            "type": "t_mapping(t_address,t_struct(User)7671_storage)",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:28"
          },
          {
            "contract": "NodeActiveL1",
            "label": "roundTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:29"
          }
        ],
        "types": {
          "t_contract(IAnt3)15621": {
            "label": "contract IAnt3"
          },
          "t_contract(INodeController)7636": {
            "label": "contract INodeController"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_struct(Round)7647_storage)": {
            "label": "mapping(uint256 => struct Round)"
          },
          "t_struct(Round)7647_storage": {
            "label": "struct Round",
            "members": [
              {
                "label": "toDistribute",
                "type": "t_uint256"
              },
              {
                "label": "toCarryForward",
                "type": "t_uint256"
              },
              {
                "label": "accmStakedShare",
                "type": "t_uint256"
              },
              {
                "label": "startTime",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(Order)7682_storage)": {
            "label": "mapping(uint256 => struct Order)"
          },
          "t_struct(Order)7682_storage": {
            "label": "struct Order",
            "members": [
              {
                "label": "startRound",
                "type": "t_uint256"
              },
              {
                "label": "endRound",
                "type": "t_uint256"
              },
              {
                "label": "shareReward",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "packageId",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(User)7671_storage)": {
            "label": "mapping(address => struct User)"
          },
          "t_struct(User)7671_storage": {
            "label": "struct User",
            "members": [
              {
                "label": "startingIndexForAddShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForAddShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundAddShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "startingIndexForDeductShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForDeductShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundDeductShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "userOrders",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "lastClaimRound",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "fe97c5cde62d227bd52357c1275ca43738400b015631e8a12867b2130ba3240b": {
      "address": "0xC68CC2Af766C709a128F79D930aaDeDF7B00746F",
      "txHash": "0x9dda91d10ec4c8f4c256daacddf88e6b86dfdfe2aee57bef509e99c2a6e74476",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "StackingController",
            "label": "ant3Token",
            "type": "t_contract(IAnt3)15609",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:29"
          },
          {
            "contract": "StackingController",
            "label": "lpToken",
            "type": "t_contract(IERC20Upgradeable)971",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:30"
          },
          {
            "contract": "StackingController",
            "label": "stackingPassive",
            "type": "t_contract(IStackingPassive)12603",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:31"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL1",
            "type": "t_contract(IStackingActive)12455",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:32"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL2",
            "type": "t_contract(IStackingActive)12455",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:33"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL3",
            "type": "t_contract(IStackingActive)12455",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:34"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL4",
            "type": "t_contract(IStackingActive)12455",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:35"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL5",
            "type": "t_contract(IStackingActive)12455",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:36"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL6",
            "type": "t_contract(IStackingActive)12455",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:37"
          },
          {
            "contract": "StackingController",
            "label": "memberController",
            "type": "t_contract(IMemberController)2269",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:38"
          },
          {
            "contract": "StackingController",
            "label": "packagePrices",
            "type": "t_struct(PackagePrice)9031_storage",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:39"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveArray",
            "type": "t_array(t_contract(IStackingActive)12455)dyn_storage",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:41"
          },
          {
            "contract": "StackingController",
            "label": "alphaAccmQty",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:42"
          },
          {
            "contract": "StackingController",
            "label": "betaAccmQty",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:43"
          },
          {
            "contract": "StackingController",
            "label": "gammaAccmQty",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:44"
          },
          {
            "contract": "StackingController",
            "label": "referralRank",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:45"
          },
          {
            "contract": "StackingController",
            "label": "today",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:48"
          },
          {
            "contract": "StackingController",
            "label": "minStackForReferral",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:49"
          },
          {
            "contract": "StackingController",
            "label": "defaultSystemQuota",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:50"
          },
          {
            "contract": "StackingController",
            "label": "systemQuota",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:51"
          },
          {
            "contract": "StackingController",
            "label": "defaultUserQuota",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:52"
          },
          {
            "contract": "StackingController",
            "label": "userQuota",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:53"
          },
          {
            "contract": "StackingController",
            "label": "userToday",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:54"
          },
          {
            "contract": "StackingController",
            "label": "maxClaimRound",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:55"
          },
          {
            "contract": "StackingController",
            "label": "minStackAmt",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:56"
          },
          {
            "contract": "StackingController",
            "label": "shareMultiplier",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:57"
          }
        ],
        "types": {
          "t_contract(IAnt3)15609": {
            "label": "contract IAnt3"
          },
          "t_contract(IERC20Upgradeable)971": {
            "label": "contract IERC20Upgradeable"
          },
          "t_contract(IStackingPassive)12603": {
            "label": "contract IStackingPassive"
          },
          "t_contract(IStackingActive)12455": {
            "label": "contract IStackingActive"
          },
          "t_contract(IMemberController)2269": {
            "label": "contract IMemberController"
          },
          "t_struct(PackagePrice)9031_storage": {
            "label": "struct StackingController.PackagePrice",
            "members": [
              {
                "label": "alphaLockPeriod",
                "type": "t_uint256"
              },
              {
                "label": "alphaShareRate",
                "type": "t_uint256"
              },
              {
                "label": "betaLockPeriod",
                "type": "t_uint256"
              },
              {
                "label": "betaShareRate",
                "type": "t_uint256"
              },
              {
                "label": "gammaLockPeriod",
                "type": "t_uint256"
              },
              {
                "label": "gammaShareRate",
                "type": "t_uint256"
              },
              {
                "label": "packageId",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_contract(IStackingActive)12455)dyn_storage": {
            "label": "contract IStackingActive[]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "01d94b02fad21e1dddfe2720927b80211125021ac46e30b66bf0e7379023828c": {
      "address": "0x189CE431063CD4d53Ef3C37Da59A0853A66c7299",
      "txHash": "0x90abf9cccbcc2dc42ea439259b8abff8d9eb5a4a569c04249b0bfc820d10f6e8",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "StackingController",
            "label": "ant3Token",
            "type": "t_contract(IAnt3)15591",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:29"
          },
          {
            "contract": "StackingController",
            "label": "lpToken",
            "type": "t_contract(IERC20Upgradeable)971",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:30"
          },
          {
            "contract": "StackingController",
            "label": "stackingPassive",
            "type": "t_contract(IStackingPassive)12585",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:31"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL1",
            "type": "t_contract(IStackingActive)12437",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:32"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL2",
            "type": "t_contract(IStackingActive)12437",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:33"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL3",
            "type": "t_contract(IStackingActive)12437",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:34"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL4",
            "type": "t_contract(IStackingActive)12437",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:35"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL5",
            "type": "t_contract(IStackingActive)12437",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:36"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL6",
            "type": "t_contract(IStackingActive)12437",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:37"
          },
          {
            "contract": "StackingController",
            "label": "memberController",
            "type": "t_contract(IMemberController)2269",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:38"
          },
          {
            "contract": "StackingController",
            "label": "packagePrices",
            "type": "t_struct(PackagePrice)9031_storage",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:39"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveArray",
            "type": "t_array(t_contract(IStackingActive)12437)dyn_storage",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:41"
          },
          {
            "contract": "StackingController",
            "label": "alphaAccmQty",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:42"
          },
          {
            "contract": "StackingController",
            "label": "betaAccmQty",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:43"
          },
          {
            "contract": "StackingController",
            "label": "gammaAccmQty",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:44"
          },
          {
            "contract": "StackingController",
            "label": "referralRank",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:45"
          },
          {
            "contract": "StackingController",
            "label": "today",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:48"
          },
          {
            "contract": "StackingController",
            "label": "minStackForReferral",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:49"
          },
          {
            "contract": "StackingController",
            "label": "defaultSystemQuota",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:50"
          },
          {
            "contract": "StackingController",
            "label": "systemQuota",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:51"
          },
          {
            "contract": "StackingController",
            "label": "defaultUserQuota",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:52"
          },
          {
            "contract": "StackingController",
            "label": "userQuota",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:53"
          },
          {
            "contract": "StackingController",
            "label": "userToday",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:54"
          },
          {
            "contract": "StackingController",
            "label": "maxClaimRound",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:55"
          },
          {
            "contract": "StackingController",
            "label": "minStackAmt",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:56"
          },
          {
            "contract": "StackingController",
            "label": "shareMultiplier",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:57"
          }
        ],
        "types": {
          "t_contract(IAnt3)15591": {
            "label": "contract IAnt3"
          },
          "t_contract(IERC20Upgradeable)971": {
            "label": "contract IERC20Upgradeable"
          },
          "t_contract(IStackingPassive)12585": {
            "label": "contract IStackingPassive"
          },
          "t_contract(IStackingActive)12437": {
            "label": "contract IStackingActive"
          },
          "t_contract(IMemberController)2269": {
            "label": "contract IMemberController"
          },
          "t_struct(PackagePrice)9031_storage": {
            "label": "struct StackingController.PackagePrice",
            "members": [
              {
                "label": "alphaLockPeriod",
                "type": "t_uint256"
              },
              {
                "label": "alphaShareRate",
                "type": "t_uint256"
              },
              {
                "label": "betaLockPeriod",
                "type": "t_uint256"
              },
              {
                "label": "betaShareRate",
                "type": "t_uint256"
              },
              {
                "label": "gammaLockPeriod",
                "type": "t_uint256"
              },
              {
                "label": "gammaShareRate",
                "type": "t_uint256"
              },
              {
                "label": "packageId",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_contract(IStackingActive)12437)dyn_storage": {
            "label": "contract IStackingActive[]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "3260fdae2b46ba4165009977043d7150ad1973e5c144a27172ad961af12b1bf8": {
      "address": "0x160eBBD2bF057a17F2e5F890FC2A019C24aD3B3d",
      "txHash": "0x12d867a9024c8256a642e593bece6d96cc76a0beacc9038226f5e1495015c961",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "StackingController",
            "label": "ant3Token",
            "type": "t_contract(IAnt3)15579",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:29"
          },
          {
            "contract": "StackingController",
            "label": "lpToken",
            "type": "t_contract(IERC20Upgradeable)971",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:30"
          },
          {
            "contract": "StackingController",
            "label": "stackingPassive",
            "type": "t_contract(IStackingPassive)12573",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:31"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL1",
            "type": "t_contract(IStackingActive)12425",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:32"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL2",
            "type": "t_contract(IStackingActive)12425",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:33"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL3",
            "type": "t_contract(IStackingActive)12425",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:34"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL4",
            "type": "t_contract(IStackingActive)12425",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:35"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL5",
            "type": "t_contract(IStackingActive)12425",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:36"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL6",
            "type": "t_contract(IStackingActive)12425",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:37"
          },
          {
            "contract": "StackingController",
            "label": "memberController",
            "type": "t_contract(IMemberController)2269",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:38"
          },
          {
            "contract": "StackingController",
            "label": "packagePrices",
            "type": "t_struct(PackagePrice)9031_storage",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:39"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveArray",
            "type": "t_array(t_contract(IStackingActive)12425)dyn_storage",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:41"
          },
          {
            "contract": "StackingController",
            "label": "alphaAccmQty",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:42"
          },
          {
            "contract": "StackingController",
            "label": "betaAccmQty",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:43"
          },
          {
            "contract": "StackingController",
            "label": "gammaAccmQty",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:44"
          },
          {
            "contract": "StackingController",
            "label": "referralRank",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:45"
          },
          {
            "contract": "StackingController",
            "label": "today",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:48"
          },
          {
            "contract": "StackingController",
            "label": "minStackForReferral",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:49"
          },
          {
            "contract": "StackingController",
            "label": "defaultSystemQuota",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:50"
          },
          {
            "contract": "StackingController",
            "label": "systemQuota",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:51"
          },
          {
            "contract": "StackingController",
            "label": "defaultUserQuota",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:52"
          },
          {
            "contract": "StackingController",
            "label": "userQuota",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:53"
          },
          {
            "contract": "StackingController",
            "label": "userToday",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:54"
          },
          {
            "contract": "StackingController",
            "label": "maxClaimRound",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:55"
          },
          {
            "contract": "StackingController",
            "label": "minStackAmt",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:56"
          },
          {
            "contract": "StackingController",
            "label": "shareMultiplier",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:57"
          }
        ],
        "types": {
          "t_contract(IAnt3)15579": {
            "label": "contract IAnt3"
          },
          "t_contract(IERC20Upgradeable)971": {
            "label": "contract IERC20Upgradeable"
          },
          "t_contract(IStackingPassive)12573": {
            "label": "contract IStackingPassive"
          },
          "t_contract(IStackingActive)12425": {
            "label": "contract IStackingActive"
          },
          "t_contract(IMemberController)2269": {
            "label": "contract IMemberController"
          },
          "t_struct(PackagePrice)9031_storage": {
            "label": "struct StackingController.PackagePrice",
            "members": [
              {
                "label": "alphaLockPeriod",
                "type": "t_uint256"
              },
              {
                "label": "alphaShareRate",
                "type": "t_uint256"
              },
              {
                "label": "betaLockPeriod",
                "type": "t_uint256"
              },
              {
                "label": "betaShareRate",
                "type": "t_uint256"
              },
              {
                "label": "gammaLockPeriod",
                "type": "t_uint256"
              },
              {
                "label": "gammaShareRate",
                "type": "t_uint256"
              },
              {
                "label": "packageId",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_contract(IStackingActive)12425)dyn_storage": {
            "label": "contract IStackingActive[]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "28e1bfd20b5c03740464e7f2408db6fe4ae5fb61176d8f54e53dcfdec49c4ffb": {
      "address": "0x9e4405135C457fA602936F4CA02c0E42aaA2A100",
      "txHash": "0x965a630e1ea4f292c39154e186217bbc84984e2b0adee72ff1e9fea6cb82f81b",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "StackingController",
            "label": "ant3Token",
            "type": "t_contract(IAnt3)15579",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:29"
          },
          {
            "contract": "StackingController",
            "label": "lpToken",
            "type": "t_contract(IERC20Upgradeable)971",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:30"
          },
          {
            "contract": "StackingController",
            "label": "stackingPassive",
            "type": "t_contract(IStackingPassive)12573",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:31"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL1",
            "type": "t_contract(IStackingActive)12425",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:32"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL2",
            "type": "t_contract(IStackingActive)12425",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:33"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL3",
            "type": "t_contract(IStackingActive)12425",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:34"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL4",
            "type": "t_contract(IStackingActive)12425",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:35"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL5",
            "type": "t_contract(IStackingActive)12425",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:36"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL6",
            "type": "t_contract(IStackingActive)12425",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:37"
          },
          {
            "contract": "StackingController",
            "label": "memberController",
            "type": "t_contract(IMemberController)2269",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:38"
          },
          {
            "contract": "StackingController",
            "label": "packagePrices",
            "type": "t_struct(PackagePrice)9031_storage",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:39"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveArray",
            "type": "t_array(t_contract(IStackingActive)12425)dyn_storage",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:41"
          },
          {
            "contract": "StackingController",
            "label": "alphaAccmQty",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:42"
          },
          {
            "contract": "StackingController",
            "label": "betaAccmQty",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:43"
          },
          {
            "contract": "StackingController",
            "label": "gammaAccmQty",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:44"
          },
          {
            "contract": "StackingController",
            "label": "referralRank",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:45"
          },
          {
            "contract": "StackingController",
            "label": "today",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:48"
          },
          {
            "contract": "StackingController",
            "label": "minStackForReferral",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:49"
          },
          {
            "contract": "StackingController",
            "label": "defaultSystemQuota",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:50"
          },
          {
            "contract": "StackingController",
            "label": "systemQuota",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:51"
          },
          {
            "contract": "StackingController",
            "label": "defaultUserQuota",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:52"
          },
          {
            "contract": "StackingController",
            "label": "userQuota",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:53"
          },
          {
            "contract": "StackingController",
            "label": "userToday",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:54"
          },
          {
            "contract": "StackingController",
            "label": "maxClaimRound",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:55"
          },
          {
            "contract": "StackingController",
            "label": "minStackAmt",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:56"
          },
          {
            "contract": "StackingController",
            "label": "shareMultiplier",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:57"
          }
        ],
        "types": {
          "t_contract(IAnt3)15579": {
            "label": "contract IAnt3"
          },
          "t_contract(IERC20Upgradeable)971": {
            "label": "contract IERC20Upgradeable"
          },
          "t_contract(IStackingPassive)12573": {
            "label": "contract IStackingPassive"
          },
          "t_contract(IStackingActive)12425": {
            "label": "contract IStackingActive"
          },
          "t_contract(IMemberController)2269": {
            "label": "contract IMemberController"
          },
          "t_struct(PackagePrice)9031_storage": {
            "label": "struct StackingController.PackagePrice",
            "members": [
              {
                "label": "alphaLockPeriod",
                "type": "t_uint256"
              },
              {
                "label": "alphaShareRate",
                "type": "t_uint256"
              },
              {
                "label": "betaLockPeriod",
                "type": "t_uint256"
              },
              {
                "label": "betaShareRate",
                "type": "t_uint256"
              },
              {
                "label": "gammaLockPeriod",
                "type": "t_uint256"
              },
              {
                "label": "gammaShareRate",
                "type": "t_uint256"
              },
              {
                "label": "packageId",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_contract(IStackingActive)12425)dyn_storage": {
            "label": "contract IStackingActive[]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "79653e8bcda46adfe990ca63c4ff1974018e8ef88a1cd49e08ba3a2a34fa680d": {
      "address": "0x51b654931E40d4F1422048d0D59e4A972D9431Eb",
      "txHash": "0x7fa88703b9669bcfefd723d38756f097f6a7871e5599a147ae7bdccb5dd6b6d9",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "StackingController",
            "label": "ant3Token",
            "type": "t_contract(IAnt3)15583",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:29"
          },
          {
            "contract": "StackingController",
            "label": "lpToken",
            "type": "t_contract(IERC20Upgradeable)971",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:30"
          },
          {
            "contract": "StackingController",
            "label": "stackingPassive",
            "type": "t_contract(IStackingPassive)12577",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:31"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL1",
            "type": "t_contract(IStackingActive)12429",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:32"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL2",
            "type": "t_contract(IStackingActive)12429",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:33"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL3",
            "type": "t_contract(IStackingActive)12429",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:34"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL4",
            "type": "t_contract(IStackingActive)12429",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:35"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL5",
            "type": "t_contract(IStackingActive)12429",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:36"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL6",
            "type": "t_contract(IStackingActive)12429",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:37"
          },
          {
            "contract": "StackingController",
            "label": "memberController",
            "type": "t_contract(IMemberController)2269",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:38"
          },
          {
            "contract": "StackingController",
            "label": "packagePrices",
            "type": "t_struct(PackagePrice)9031_storage",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:39"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveArray",
            "type": "t_array(t_contract(IStackingActive)12429)dyn_storage",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:41"
          },
          {
            "contract": "StackingController",
            "label": "alphaAccmQty",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:42"
          },
          {
            "contract": "StackingController",
            "label": "betaAccmQty",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:43"
          },
          {
            "contract": "StackingController",
            "label": "gammaAccmQty",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:44"
          },
          {
            "contract": "StackingController",
            "label": "referralRank",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:45"
          },
          {
            "contract": "StackingController",
            "label": "today",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:48"
          },
          {
            "contract": "StackingController",
            "label": "minStackForReferral",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:49"
          },
          {
            "contract": "StackingController",
            "label": "defaultSystemQuota",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:50"
          },
          {
            "contract": "StackingController",
            "label": "systemQuota",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:51"
          },
          {
            "contract": "StackingController",
            "label": "defaultUserQuota",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:52"
          },
          {
            "contract": "StackingController",
            "label": "userQuota",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:53"
          },
          {
            "contract": "StackingController",
            "label": "userToday",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:54"
          },
          {
            "contract": "StackingController",
            "label": "maxClaimRound",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:55"
          },
          {
            "contract": "StackingController",
            "label": "minStackAmt",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:56"
          },
          {
            "contract": "StackingController",
            "label": "shareMultiplier",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:57"
          }
        ],
        "types": {
          "t_contract(IAnt3)15583": {
            "label": "contract IAnt3"
          },
          "t_contract(IERC20Upgradeable)971": {
            "label": "contract IERC20Upgradeable"
          },
          "t_contract(IStackingPassive)12577": {
            "label": "contract IStackingPassive"
          },
          "t_contract(IStackingActive)12429": {
            "label": "contract IStackingActive"
          },
          "t_contract(IMemberController)2269": {
            "label": "contract IMemberController"
          },
          "t_struct(PackagePrice)9031_storage": {
            "label": "struct StackingController.PackagePrice",
            "members": [
              {
                "label": "alphaLockPeriod",
                "type": "t_uint256"
              },
              {
                "label": "alphaShareRate",
                "type": "t_uint256"
              },
              {
                "label": "betaLockPeriod",
                "type": "t_uint256"
              },
              {
                "label": "betaShareRate",
                "type": "t_uint256"
              },
              {
                "label": "gammaLockPeriod",
                "type": "t_uint256"
              },
              {
                "label": "gammaShareRate",
                "type": "t_uint256"
              },
              {
                "label": "packageId",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_contract(IStackingActive)12429)dyn_storage": {
            "label": "contract IStackingActive[]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "52642cbaadd6f72541fc5a93ad330328c2c47a706baa4d6998901085ea6e0158": {
      "address": "0xd0Dc448b6ee5918D671E78d181B125dE64ecCe19",
      "txHash": "0xbb995ed2ce2051d03fd0e4d64bbfb2be2b46d2332a57abf085a231ab45a237e1",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "StackingController",
            "label": "ant3Token",
            "type": "t_contract(IAnt3)15585",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:29"
          },
          {
            "contract": "StackingController",
            "label": "lpToken",
            "type": "t_contract(IERC20Upgradeable)971",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:30"
          },
          {
            "contract": "StackingController",
            "label": "stackingPassive",
            "type": "t_contract(IStackingPassive)12579",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:31"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL1",
            "type": "t_contract(IStackingActive)12431",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:32"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL2",
            "type": "t_contract(IStackingActive)12431",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:33"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL3",
            "type": "t_contract(IStackingActive)12431",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:34"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL4",
            "type": "t_contract(IStackingActive)12431",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:35"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL5",
            "type": "t_contract(IStackingActive)12431",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:36"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL6",
            "type": "t_contract(IStackingActive)12431",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:37"
          },
          {
            "contract": "StackingController",
            "label": "memberController",
            "type": "t_contract(IMemberController)2269",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:38"
          },
          {
            "contract": "StackingController",
            "label": "packagePrices",
            "type": "t_struct(PackagePrice)9031_storage",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:39"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveArray",
            "type": "t_array(t_contract(IStackingActive)12431)dyn_storage",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:41"
          },
          {
            "contract": "StackingController",
            "label": "alphaAccmQty",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:42"
          },
          {
            "contract": "StackingController",
            "label": "betaAccmQty",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:43"
          },
          {
            "contract": "StackingController",
            "label": "gammaAccmQty",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:44"
          },
          {
            "contract": "StackingController",
            "label": "referralRank",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:45"
          },
          {
            "contract": "StackingController",
            "label": "today",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:48"
          },
          {
            "contract": "StackingController",
            "label": "minStackForReferral",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:49"
          },
          {
            "contract": "StackingController",
            "label": "defaultSystemQuota",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:50"
          },
          {
            "contract": "StackingController",
            "label": "systemQuota",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:51"
          },
          {
            "contract": "StackingController",
            "label": "defaultUserQuota",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:52"
          },
          {
            "contract": "StackingController",
            "label": "userQuota",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:53"
          },
          {
            "contract": "StackingController",
            "label": "userToday",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:54"
          },
          {
            "contract": "StackingController",
            "label": "maxClaimRound",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:55"
          },
          {
            "contract": "StackingController",
            "label": "minStackAmt",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:56"
          },
          {
            "contract": "StackingController",
            "label": "shareMultiplier",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:57"
          }
        ],
        "types": {
          "t_contract(IAnt3)15585": {
            "label": "contract IAnt3"
          },
          "t_contract(IERC20Upgradeable)971": {
            "label": "contract IERC20Upgradeable"
          },
          "t_contract(IStackingPassive)12579": {
            "label": "contract IStackingPassive"
          },
          "t_contract(IStackingActive)12431": {
            "label": "contract IStackingActive"
          },
          "t_contract(IMemberController)2269": {
            "label": "contract IMemberController"
          },
          "t_struct(PackagePrice)9031_storage": {
            "label": "struct StackingController.PackagePrice",
            "members": [
              {
                "label": "alphaLockPeriod",
                "type": "t_uint256"
              },
              {
                "label": "alphaShareRate",
                "type": "t_uint256"
              },
              {
                "label": "betaLockPeriod",
                "type": "t_uint256"
              },
              {
                "label": "betaShareRate",
                "type": "t_uint256"
              },
              {
                "label": "gammaLockPeriod",
                "type": "t_uint256"
              },
              {
                "label": "gammaShareRate",
                "type": "t_uint256"
              },
              {
                "label": "packageId",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_contract(IStackingActive)12431)dyn_storage": {
            "label": "contract IStackingActive[]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "a01ffe8cc7ccfec85ced060161470a84a49271e8de87923b89a601cdfd1c0cb0": {
      "address": "0x9074D6335cC6C1F6E94A1c49D15d906d014AD137",
      "txHash": "0x641db493141ef0ecce4da86900d5d453c72f9c071969ae858f271aa2b7b2178a",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "StackingController",
            "label": "ant3Token",
            "type": "t_contract(IAnt3)15579",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:29"
          },
          {
            "contract": "StackingController",
            "label": "lpToken",
            "type": "t_contract(IERC20Upgradeable)971",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:30"
          },
          {
            "contract": "StackingController",
            "label": "stackingPassive",
            "type": "t_contract(IStackingPassive)12573",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:31"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL1",
            "type": "t_contract(IStackingActive)12425",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:32"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL2",
            "type": "t_contract(IStackingActive)12425",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:33"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL3",
            "type": "t_contract(IStackingActive)12425",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:34"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL4",
            "type": "t_contract(IStackingActive)12425",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:35"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL5",
            "type": "t_contract(IStackingActive)12425",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:36"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL6",
            "type": "t_contract(IStackingActive)12425",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:37"
          },
          {
            "contract": "StackingController",
            "label": "memberController",
            "type": "t_contract(IMemberController)2269",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:38"
          },
          {
            "contract": "StackingController",
            "label": "packagePrices",
            "type": "t_struct(PackagePrice)9031_storage",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:39"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveArray",
            "type": "t_array(t_contract(IStackingActive)12425)dyn_storage",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:41"
          },
          {
            "contract": "StackingController",
            "label": "alphaAccmQty",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:42"
          },
          {
            "contract": "StackingController",
            "label": "betaAccmQty",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:43"
          },
          {
            "contract": "StackingController",
            "label": "gammaAccmQty",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:44"
          },
          {
            "contract": "StackingController",
            "label": "referralRank",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:45"
          },
          {
            "contract": "StackingController",
            "label": "today",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:48"
          },
          {
            "contract": "StackingController",
            "label": "minStackForReferral",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:49"
          },
          {
            "contract": "StackingController",
            "label": "defaultSystemQuota",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:50"
          },
          {
            "contract": "StackingController",
            "label": "systemQuota",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:51"
          },
          {
            "contract": "StackingController",
            "label": "defaultUserQuota",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:52"
          },
          {
            "contract": "StackingController",
            "label": "userQuota",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:53"
          },
          {
            "contract": "StackingController",
            "label": "userToday",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:54"
          },
          {
            "contract": "StackingController",
            "label": "maxClaimRound",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:55"
          },
          {
            "contract": "StackingController",
            "label": "minStackAmt",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:56"
          },
          {
            "contract": "StackingController",
            "label": "shareMultiplier",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:57"
          }
        ],
        "types": {
          "t_contract(IAnt3)15579": {
            "label": "contract IAnt3"
          },
          "t_contract(IERC20Upgradeable)971": {
            "label": "contract IERC20Upgradeable"
          },
          "t_contract(IStackingPassive)12573": {
            "label": "contract IStackingPassive"
          },
          "t_contract(IStackingActive)12425": {
            "label": "contract IStackingActive"
          },
          "t_contract(IMemberController)2269": {
            "label": "contract IMemberController"
          },
          "t_struct(PackagePrice)9031_storage": {
            "label": "struct StackingController.PackagePrice",
            "members": [
              {
                "label": "alphaLockPeriod",
                "type": "t_uint256"
              },
              {
                "label": "alphaShareRate",
                "type": "t_uint256"
              },
              {
                "label": "betaLockPeriod",
                "type": "t_uint256"
              },
              {
                "label": "betaShareRate",
                "type": "t_uint256"
              },
              {
                "label": "gammaLockPeriod",
                "type": "t_uint256"
              },
              {
                "label": "gammaShareRate",
                "type": "t_uint256"
              },
              {
                "label": "packageId",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_contract(IStackingActive)12425)dyn_storage": {
            "label": "contract IStackingActive[]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "41a694cf189196b1797e2b98802e57b42a126640086f3febf03f52472d298b3a": {
      "address": "0xff2e51C99C6f050F36f08eC984364cD508D45C14",
      "txHash": "0xee6fb0811fb7bd4a31a7c473d756bc324dfa12dffe93ed9c980b32ac3ab6e0f1",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "StackingController",
            "label": "ant3Token",
            "type": "t_contract(IAnt3)15597",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:29"
          },
          {
            "contract": "StackingController",
            "label": "lpToken",
            "type": "t_contract(IERC20Upgradeable)971",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:30"
          },
          {
            "contract": "StackingController",
            "label": "stackingPassive",
            "type": "t_contract(IStackingPassive)12591",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:31"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL1",
            "type": "t_contract(IStackingActive)12443",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:32"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL2",
            "type": "t_contract(IStackingActive)12443",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:33"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL3",
            "type": "t_contract(IStackingActive)12443",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:34"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL4",
            "type": "t_contract(IStackingActive)12443",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:35"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL5",
            "type": "t_contract(IStackingActive)12443",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:36"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL6",
            "type": "t_contract(IStackingActive)12443",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:37"
          },
          {
            "contract": "StackingController",
            "label": "memberController",
            "type": "t_contract(IMemberController)2269",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:38"
          },
          {
            "contract": "StackingController",
            "label": "packagePrices",
            "type": "t_struct(PackagePrice)9031_storage",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:39"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveArray",
            "type": "t_array(t_contract(IStackingActive)12443)dyn_storage",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:41"
          },
          {
            "contract": "StackingController",
            "label": "alphaAccmQty",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:42"
          },
          {
            "contract": "StackingController",
            "label": "betaAccmQty",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:43"
          },
          {
            "contract": "StackingController",
            "label": "gammaAccmQty",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:44"
          },
          {
            "contract": "StackingController",
            "label": "referralRank",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:45"
          },
          {
            "contract": "StackingController",
            "label": "today",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:48"
          },
          {
            "contract": "StackingController",
            "label": "minStackForReferral",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:49"
          },
          {
            "contract": "StackingController",
            "label": "defaultSystemQuota",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:50"
          },
          {
            "contract": "StackingController",
            "label": "systemQuota",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:51"
          },
          {
            "contract": "StackingController",
            "label": "defaultUserQuota",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:52"
          },
          {
            "contract": "StackingController",
            "label": "userQuota",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:53"
          },
          {
            "contract": "StackingController",
            "label": "userToday",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:54"
          },
          {
            "contract": "StackingController",
            "label": "maxClaimRound",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:55"
          },
          {
            "contract": "StackingController",
            "label": "minStackAmt",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:56"
          },
          {
            "contract": "StackingController",
            "label": "shareMultiplier",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:57"
          }
        ],
        "types": {
          "t_contract(IAnt3)15597": {
            "label": "contract IAnt3"
          },
          "t_contract(IERC20Upgradeable)971": {
            "label": "contract IERC20Upgradeable"
          },
          "t_contract(IStackingPassive)12591": {
            "label": "contract IStackingPassive"
          },
          "t_contract(IStackingActive)12443": {
            "label": "contract IStackingActive"
          },
          "t_contract(IMemberController)2269": {
            "label": "contract IMemberController"
          },
          "t_struct(PackagePrice)9031_storage": {
            "label": "struct StackingController.PackagePrice",
            "members": [
              {
                "label": "alphaLockPeriod",
                "type": "t_uint256"
              },
              {
                "label": "alphaShareRate",
                "type": "t_uint256"
              },
              {
                "label": "betaLockPeriod",
                "type": "t_uint256"
              },
              {
                "label": "betaShareRate",
                "type": "t_uint256"
              },
              {
                "label": "gammaLockPeriod",
                "type": "t_uint256"
              },
              {
                "label": "gammaShareRate",
                "type": "t_uint256"
              },
              {
                "label": "packageId",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_contract(IStackingActive)12443)dyn_storage": {
            "label": "contract IStackingActive[]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "3f84227fa23799de741d80b628220ed476cf38fbaa1c0c12265a4fef134cd02e": {
      "address": "0x7F6C0063653F1645b36100760F4d66799f6da315",
      "txHash": "0x1839fecb9f8e93a9d70756cce465adeab41b001e67d66cb35c50ac847338e3e3",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "StackingController",
            "label": "ant3Token",
            "type": "t_contract(IAnt3)15579",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:29"
          },
          {
            "contract": "StackingController",
            "label": "lpToken",
            "type": "t_contract(IERC20Upgradeable)971",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:30"
          },
          {
            "contract": "StackingController",
            "label": "stackingPassive",
            "type": "t_contract(IStackingPassive)12573",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:31"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL1",
            "type": "t_contract(IStackingActive)12425",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:32"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL2",
            "type": "t_contract(IStackingActive)12425",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:33"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL3",
            "type": "t_contract(IStackingActive)12425",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:34"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL4",
            "type": "t_contract(IStackingActive)12425",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:35"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL5",
            "type": "t_contract(IStackingActive)12425",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:36"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL6",
            "type": "t_contract(IStackingActive)12425",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:37"
          },
          {
            "contract": "StackingController",
            "label": "memberController",
            "type": "t_contract(IMemberController)2269",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:38"
          },
          {
            "contract": "StackingController",
            "label": "packagePrices",
            "type": "t_struct(PackagePrice)9031_storage",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:39"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveArray",
            "type": "t_array(t_contract(IStackingActive)12425)dyn_storage",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:41"
          },
          {
            "contract": "StackingController",
            "label": "alphaAccmQty",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:42"
          },
          {
            "contract": "StackingController",
            "label": "betaAccmQty",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:43"
          },
          {
            "contract": "StackingController",
            "label": "gammaAccmQty",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:44"
          },
          {
            "contract": "StackingController",
            "label": "referralRank",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:45"
          },
          {
            "contract": "StackingController",
            "label": "today",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:48"
          },
          {
            "contract": "StackingController",
            "label": "minStackForReferral",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:49"
          },
          {
            "contract": "StackingController",
            "label": "defaultSystemQuota",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:50"
          },
          {
            "contract": "StackingController",
            "label": "systemQuota",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:51"
          },
          {
            "contract": "StackingController",
            "label": "defaultUserQuota",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:52"
          },
          {
            "contract": "StackingController",
            "label": "userQuota",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:53"
          },
          {
            "contract": "StackingController",
            "label": "userToday",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:54"
          },
          {
            "contract": "StackingController",
            "label": "maxClaimRound",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:55"
          },
          {
            "contract": "StackingController",
            "label": "minStackAmt",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:56"
          },
          {
            "contract": "StackingController",
            "label": "shareMultiplier",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:57"
          }
        ],
        "types": {
          "t_contract(IAnt3)15579": {
            "label": "contract IAnt3"
          },
          "t_contract(IERC20Upgradeable)971": {
            "label": "contract IERC20Upgradeable"
          },
          "t_contract(IStackingPassive)12573": {
            "label": "contract IStackingPassive"
          },
          "t_contract(IStackingActive)12425": {
            "label": "contract IStackingActive"
          },
          "t_contract(IMemberController)2269": {
            "label": "contract IMemberController"
          },
          "t_struct(PackagePrice)9031_storage": {
            "label": "struct StackingController.PackagePrice",
            "members": [
              {
                "label": "alphaLockPeriod",
                "type": "t_uint256"
              },
              {
                "label": "alphaShareRate",
                "type": "t_uint256"
              },
              {
                "label": "betaLockPeriod",
                "type": "t_uint256"
              },
              {
                "label": "betaShareRate",
                "type": "t_uint256"
              },
              {
                "label": "gammaLockPeriod",
                "type": "t_uint256"
              },
              {
                "label": "gammaShareRate",
                "type": "t_uint256"
              },
              {
                "label": "packageId",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_contract(IStackingActive)12425)dyn_storage": {
            "label": "contract IStackingActive[]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "3f38482db9f93395fb9d56ea9b008e2f4e02f260d53c11ce76956b22c5ba487e": {
      "address": "0x045938B75bc11928E6d7FA6Ae2bc8c1Be144607E",
      "txHash": "0x22ccf8efe0d7c110f1645f6ffeda31806a42596f35ad1bc6ee96c5e5a07914f0",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "StackingController",
            "label": "ant3Token",
            "type": "t_contract(IAnt3)15664",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:29"
          },
          {
            "contract": "StackingController",
            "label": "lpToken",
            "type": "t_contract(IERC20Upgradeable)971",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:30"
          },
          {
            "contract": "StackingController",
            "label": "stackingPassive",
            "type": "t_contract(IStackingPassive)12658",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:31"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL1",
            "type": "t_contract(IStackingActive)12510",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:32"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL2",
            "type": "t_contract(IStackingActive)12510",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:33"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL3",
            "type": "t_contract(IStackingActive)12510",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:34"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL4",
            "type": "t_contract(IStackingActive)12510",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:35"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL5",
            "type": "t_contract(IStackingActive)12510",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:36"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL6",
            "type": "t_contract(IStackingActive)12510",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:37"
          },
          {
            "contract": "StackingController",
            "label": "memberController",
            "type": "t_contract(IMemberController)2269",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:38"
          },
          {
            "contract": "StackingController",
            "label": "packagePrices",
            "type": "t_struct(PackagePrice)9116_storage",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:39"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveArray",
            "type": "t_array(t_contract(IStackingActive)12510)dyn_storage",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:41"
          },
          {
            "contract": "StackingController",
            "label": "alphaAccmQty",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:42"
          },
          {
            "contract": "StackingController",
            "label": "betaAccmQty",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:43"
          },
          {
            "contract": "StackingController",
            "label": "gammaAccmQty",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:44"
          },
          {
            "contract": "StackingController",
            "label": "referralRank",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:45"
          },
          {
            "contract": "StackingController",
            "label": "today",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:48"
          },
          {
            "contract": "StackingController",
            "label": "minStackForReferral",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:49"
          },
          {
            "contract": "StackingController",
            "label": "defaultSystemQuota",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:50"
          },
          {
            "contract": "StackingController",
            "label": "systemQuota",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:51"
          },
          {
            "contract": "StackingController",
            "label": "defaultUserQuota",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:52"
          },
          {
            "contract": "StackingController",
            "label": "userQuota",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:53"
          },
          {
            "contract": "StackingController",
            "label": "userToday",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:54"
          },
          {
            "contract": "StackingController",
            "label": "maxClaimRound",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:55"
          },
          {
            "contract": "StackingController",
            "label": "minStackAmt",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:56"
          },
          {
            "contract": "StackingController",
            "label": "shareMultiplier",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:57"
          }
        ],
        "types": {
          "t_contract(IAnt3)15664": {
            "label": "contract IAnt3"
          },
          "t_contract(IERC20Upgradeable)971": {
            "label": "contract IERC20Upgradeable"
          },
          "t_contract(IStackingPassive)12658": {
            "label": "contract IStackingPassive"
          },
          "t_contract(IStackingActive)12510": {
            "label": "contract IStackingActive"
          },
          "t_contract(IMemberController)2269": {
            "label": "contract IMemberController"
          },
          "t_struct(PackagePrice)9116_storage": {
            "label": "struct StackingController.PackagePrice",
            "members": [
              {
                "label": "alphaLockPeriod",
                "type": "t_uint256"
              },
              {
                "label": "alphaShareRate",
                "type": "t_uint256"
              },
              {
                "label": "betaLockPeriod",
                "type": "t_uint256"
              },
              {
                "label": "betaShareRate",
                "type": "t_uint256"
              },
              {
                "label": "gammaLockPeriod",
                "type": "t_uint256"
              },
              {
                "label": "gammaShareRate",
                "type": "t_uint256"
              },
              {
                "label": "packageId",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_contract(IStackingActive)12510)dyn_storage": {
            "label": "contract IStackingActive[]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "40790ccbbaf3fca5ce6cb487e6b11aec5753e3f075983121ca88eefa43fdc7af": {
      "address": "0x3Bdb52F00EfdB8edfc9bCd8A0BF2821977B4ddc0",
      "txHash": "0x48e2e75ae036509204102091379da05861883dc00a4477111de0ba1133067e56",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "StackingActiveL1",
            "label": "ant3Token",
            "type": "t_contract(IAnt3)15664",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:18"
          },
          {
            "contract": "StackingActiveL1",
            "label": "stackingControllerContract",
            "type": "t_contract(IStackingController)12523",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:19"
          },
          {
            "contract": "StackingActiveL1",
            "label": "dividingValue",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:20"
          },
          {
            "contract": "StackingActiveL1",
            "label": "lastRound",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:21"
          },
          {
            "contract": "StackingActiveL1",
            "label": "lastMoId",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:22"
          },
          {
            "contract": "StackingActiveL1",
            "label": "sortedRoundForDeductShare",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:23"
          },
          {
            "contract": "StackingActiveL1",
            "label": "roundDeductShare",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:24"
          },
          {
            "contract": "StackingActiveL1",
            "label": "rounds",
            "type": "t_mapping(t_uint256,t_struct(Round)12534_storage)",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:25"
          },
          {
            "contract": "StackingActiveL1",
            "label": "allOrders",
            "type": "t_mapping(t_uint256,t_struct(Order)12575_storage)",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:26"
          },
          {
            "contract": "StackingActiveL1",
            "label": "allUsers",
            "type": "t_mapping(t_address,t_struct(User)12558_storage)",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:27"
          },
          {
            "contract": "StackingActiveL1",
            "label": "roundTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:28"
          }
        ],
        "types": {
          "t_contract(IAnt3)15664": {
            "label": "contract IAnt3"
          },
          "t_contract(IStackingController)12523": {
            "label": "contract IStackingController"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_struct(Round)12534_storage)": {
            "label": "mapping(uint256 => struct Round)"
          },
          "t_struct(Round)12534_storage": {
            "label": "struct Round",
            "members": [
              {
                "label": "toDistribute",
                "type": "t_uint256"
              },
              {
                "label": "toCarryForward",
                "type": "t_uint256"
              },
              {
                "label": "accmStakedShare",
                "type": "t_uint256"
              },
              {
                "label": "startTime",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(Order)12575_storage)": {
            "label": "mapping(uint256 => struct Order)"
          },
          "t_struct(Order)12575_storage": {
            "label": "struct Order",
            "members": [
              {
                "label": "startRound",
                "type": "t_uint256"
              },
              {
                "label": "endRound",
                "type": "t_uint256"
              },
              {
                "label": "shareReward",
                "type": "t_uint256"
              },
              {
                "label": "oriClock",
                "type": "t_uint256"
              },
              {
                "label": "endClock",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "packageId",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(User)12558_storage)": {
            "label": "mapping(address => struct User)"
          },
          "t_struct(User)12558_storage": {
            "label": "struct User",
            "members": [
              {
                "label": "startingIndexForAddShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForAddShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundAddShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "startingIndexForDeductShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForDeductShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundDeductShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "userOrders",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "lastClaimRound",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "b0b9bc211956671f3edc73454983d456f3e7a259f5ef26ddaecefc17656c0b7b": {
      "address": "0x69252bFc3E89488a5869FCB1D80fA30E9534d926",
      "txHash": "0x59efb7d29c6617a8a87b2c64e0604af74b5433c6e78168f4de61755011a9dc0b",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "StackingActiveL1",
            "label": "ant3Token",
            "type": "t_contract(IAnt3)15661",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:18"
          },
          {
            "contract": "StackingActiveL1",
            "label": "stackingControllerContract",
            "type": "t_contract(IStackingController)12520",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:19"
          },
          {
            "contract": "StackingActiveL1",
            "label": "dividingValue",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:20"
          },
          {
            "contract": "StackingActiveL1",
            "label": "lastRound",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:21"
          },
          {
            "contract": "StackingActiveL1",
            "label": "lastMoId",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:22"
          },
          {
            "contract": "StackingActiveL1",
            "label": "sortedRoundForDeductShare",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:23"
          },
          {
            "contract": "StackingActiveL1",
            "label": "roundDeductShare",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:24"
          },
          {
            "contract": "StackingActiveL1",
            "label": "rounds",
            "type": "t_mapping(t_uint256,t_struct(Round)12531_storage)",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:25"
          },
          {
            "contract": "StackingActiveL1",
            "label": "allOrders",
            "type": "t_mapping(t_uint256,t_struct(Order)12572_storage)",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:26"
          },
          {
            "contract": "StackingActiveL1",
            "label": "allUsers",
            "type": "t_mapping(t_address,t_struct(User)12555_storage)",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:27"
          },
          {
            "contract": "StackingActiveL1",
            "label": "roundTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:28"
          }
        ],
        "types": {
          "t_contract(IAnt3)15661": {
            "label": "contract IAnt3"
          },
          "t_contract(IStackingController)12520": {
            "label": "contract IStackingController"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_struct(Round)12531_storage)": {
            "label": "mapping(uint256 => struct Round)"
          },
          "t_struct(Round)12531_storage": {
            "label": "struct Round",
            "members": [
              {
                "label": "toDistribute",
                "type": "t_uint256"
              },
              {
                "label": "toCarryForward",
                "type": "t_uint256"
              },
              {
                "label": "accmStakedShare",
                "type": "t_uint256"
              },
              {
                "label": "startTime",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(Order)12572_storage)": {
            "label": "mapping(uint256 => struct Order)"
          },
          "t_struct(Order)12572_storage": {
            "label": "struct Order",
            "members": [
              {
                "label": "startRound",
                "type": "t_uint256"
              },
              {
                "label": "endRound",
                "type": "t_uint256"
              },
              {
                "label": "shareReward",
                "type": "t_uint256"
              },
              {
                "label": "oriClock",
                "type": "t_uint256"
              },
              {
                "label": "endClock",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "packageId",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(User)12555_storage)": {
            "label": "mapping(address => struct User)"
          },
          "t_struct(User)12555_storage": {
            "label": "struct User",
            "members": [
              {
                "label": "startingIndexForAddShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForAddShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundAddShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "startingIndexForDeductShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForDeductShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundDeductShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "userOrders",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "lastClaimRound",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "442411df49ea225628995ea573afb235c9fa93874ef95afce9d3e05d7380dce2": {
      "address": "0x82129891AC24F2688d6896381EE06e079a480D57",
      "txHash": "0xe98c6cbcc2917122719fbab71326beaf1734f16eae4753001d4013ddef6f4d82",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "StackingActiveL1",
            "label": "ant3Token",
            "type": "t_contract(IAnt3)15985",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:18"
          },
          {
            "contract": "StackingActiveL1",
            "label": "stackingControllerContract",
            "type": "t_contract(IStackingController)12844",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:19"
          },
          {
            "contract": "StackingActiveL1",
            "label": "dividingValue",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:20"
          },
          {
            "contract": "StackingActiveL1",
            "label": "lastRound",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:21"
          },
          {
            "contract": "StackingActiveL1",
            "label": "lastMoId",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:22"
          },
          {
            "contract": "StackingActiveL1",
            "label": "sortedRoundForDeductShare",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:23"
          },
          {
            "contract": "StackingActiveL1",
            "label": "roundDeductShare",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:24"
          },
          {
            "contract": "StackingActiveL1",
            "label": "rounds",
            "type": "t_mapping(t_uint256,t_struct(Round)12855_storage)",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:25"
          },
          {
            "contract": "StackingActiveL1",
            "label": "allOrders",
            "type": "t_mapping(t_uint256,t_struct(Order)12896_storage)",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:26"
          },
          {
            "contract": "StackingActiveL1",
            "label": "allUsers",
            "type": "t_mapping(t_address,t_struct(User)12879_storage)",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:27"
          },
          {
            "contract": "StackingActiveL1",
            "label": "roundTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingActive.sol:28"
          }
        ],
        "types": {
          "t_contract(IAnt3)15985": {
            "label": "contract IAnt3"
          },
          "t_contract(IStackingController)12844": {
            "label": "contract IStackingController"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_struct(Round)12855_storage)": {
            "label": "mapping(uint256 => struct Round)"
          },
          "t_struct(Round)12855_storage": {
            "label": "struct Round",
            "members": [
              {
                "label": "toDistribute",
                "type": "t_uint256"
              },
              {
                "label": "toCarryForward",
                "type": "t_uint256"
              },
              {
                "label": "accmStakedShare",
                "type": "t_uint256"
              },
              {
                "label": "startTime",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(Order)12896_storage)": {
            "label": "mapping(uint256 => struct Order)"
          },
          "t_struct(Order)12896_storage": {
            "label": "struct Order",
            "members": [
              {
                "label": "startRound",
                "type": "t_uint256"
              },
              {
                "label": "endRound",
                "type": "t_uint256"
              },
              {
                "label": "shareReward",
                "type": "t_uint256"
              },
              {
                "label": "oriClock",
                "type": "t_uint256"
              },
              {
                "label": "endClock",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "packageId",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(User)12879_storage)": {
            "label": "mapping(address => struct User)"
          },
          "t_struct(User)12879_storage": {
            "label": "struct User",
            "members": [
              {
                "label": "startingIndexForAddShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForAddShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundAddShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "startingIndexForDeductShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForDeductShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundDeductShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "userOrders",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "lastClaimRound",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "955e3ffad8f682842a598aa66666afd0fa9a40ee65c879a689c1861137ed34d2": {
      "address": "0xe3F66648bD02B1204A26E12e0C8804c6a74563E1",
      "txHash": "0xdf3f465c8b1af646d5d3c09d30f00947e618bf49454286ad150b82f9ff5d239c",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "StackingController",
            "label": "ant3Token",
            "type": "t_contract(IAnt3)15985",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:29"
          },
          {
            "contract": "StackingController",
            "label": "lpToken",
            "type": "t_contract(IERC20Upgradeable)971",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:30"
          },
          {
            "contract": "StackingController",
            "label": "stackingPassive",
            "type": "t_contract(IStackingPassive)12979",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:31"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL1",
            "type": "t_contract(IStackingActive)12831",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:32"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL2",
            "type": "t_contract(IStackingActive)12831",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:33"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL3",
            "type": "t_contract(IStackingActive)12831",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:34"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL4",
            "type": "t_contract(IStackingActive)12831",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:35"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL5",
            "type": "t_contract(IStackingActive)12831",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:36"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveL6",
            "type": "t_contract(IStackingActive)12831",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:37"
          },
          {
            "contract": "StackingController",
            "label": "memberController",
            "type": "t_contract(IMemberController)2269",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:38"
          },
          {
            "contract": "StackingController",
            "label": "packagePrices",
            "type": "t_struct(PackagePrice)9304_storage",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:39"
          },
          {
            "contract": "StackingController",
            "label": "stackingActiveArray",
            "type": "t_array(t_contract(IStackingActive)12831)dyn_storage",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:41"
          },
          {
            "contract": "StackingController",
            "label": "alphaAccmQty",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:42"
          },
          {
            "contract": "StackingController",
            "label": "betaAccmQty",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:43"
          },
          {
            "contract": "StackingController",
            "label": "gammaAccmQty",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:44"
          },
          {
            "contract": "StackingController",
            "label": "referralRank",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:45"
          },
          {
            "contract": "StackingController",
            "label": "today",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:48"
          },
          {
            "contract": "StackingController",
            "label": "minStackForReferral",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:49"
          },
          {
            "contract": "StackingController",
            "label": "defaultSystemQuota",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:50"
          },
          {
            "contract": "StackingController",
            "label": "systemQuota",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:51"
          },
          {
            "contract": "StackingController",
            "label": "defaultUserQuota",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:52"
          },
          {
            "contract": "StackingController",
            "label": "userQuota",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:53"
          },
          {
            "contract": "StackingController",
            "label": "userToday",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:54"
          },
          {
            "contract": "StackingController",
            "label": "maxClaimRound",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:55"
          },
          {
            "contract": "StackingController",
            "label": "minStackAmt",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:56"
          },
          {
            "contract": "StackingController",
            "label": "shareMultiplier",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingController.sol:57"
          }
        ],
        "types": {
          "t_contract(IAnt3)15985": {
            "label": "contract IAnt3"
          },
          "t_contract(IERC20Upgradeable)971": {
            "label": "contract IERC20Upgradeable"
          },
          "t_contract(IStackingPassive)12979": {
            "label": "contract IStackingPassive"
          },
          "t_contract(IStackingActive)12831": {
            "label": "contract IStackingActive"
          },
          "t_contract(IMemberController)2269": {
            "label": "contract IMemberController"
          },
          "t_struct(PackagePrice)9304_storage": {
            "label": "struct StackingController.PackagePrice",
            "members": [
              {
                "label": "alphaLockPeriod",
                "type": "t_uint256"
              },
              {
                "label": "alphaShareRate",
                "type": "t_uint256"
              },
              {
                "label": "betaLockPeriod",
                "type": "t_uint256"
              },
              {
                "label": "betaShareRate",
                "type": "t_uint256"
              },
              {
                "label": "gammaLockPeriod",
                "type": "t_uint256"
              },
              {
                "label": "gammaShareRate",
                "type": "t_uint256"
              },
              {
                "label": "packageId",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_contract(IStackingActive)12831)dyn_storage": {
            "label": "contract IStackingActive[]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "e44f1207b19d978ec602807d248dd38bd2974a376e230bc2c382da8713fe8356": {
      "address": "0xb864bbfb27bEB159ca8d800B4AB948575ea4FEB8",
      "txHash": "0xb0766d21f8f7c9439d9ac3113c993a8a13c57fe4530f2b59d56bfd5126f01d05",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "StackingPassive",
            "label": "ant3Token",
            "type": "t_contract(IAnt3)15985",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:17"
          },
          {
            "contract": "StackingPassive",
            "label": "stackingControllerContract",
            "type": "t_contract(IStackingController)12844",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:18"
          },
          {
            "contract": "StackingPassive",
            "label": "dividingValue",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:19"
          },
          {
            "contract": "StackingPassive",
            "label": "lastRound",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:20"
          },
          {
            "contract": "StackingPassive",
            "label": "lastMoId",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:21"
          },
          {
            "contract": "StackingPassive",
            "label": "sortedRoundForDeductShare",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:22"
          },
          {
            "contract": "StackingPassive",
            "label": "roundDeductShare",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:23"
          },
          {
            "contract": "StackingPassive",
            "label": "rounds",
            "type": "t_mapping(t_uint256,t_struct(Round)12855_storage)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:24"
          },
          {
            "contract": "StackingPassive",
            "label": "allOrders",
            "type": "t_mapping(t_uint256,t_struct(Order)12896_storage)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:25"
          },
          {
            "contract": "StackingPassive",
            "label": "allUsers",
            "type": "t_mapping(t_address,t_struct(User)12879_storage)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:26"
          },
          {
            "contract": "StackingPassive",
            "label": "roundTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:27"
          },
          {
            "contract": "StackingPassive",
            "label": "userClockActive",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\stacking\\StackingPassive.sol:28"
          }
        ],
        "types": {
          "t_contract(IAnt3)15985": {
            "label": "contract IAnt3"
          },
          "t_contract(IStackingController)12844": {
            "label": "contract IStackingController"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_struct(Round)12855_storage)": {
            "label": "mapping(uint256 => struct Round)"
          },
          "t_struct(Round)12855_storage": {
            "label": "struct Round",
            "members": [
              {
                "label": "toDistribute",
                "type": "t_uint256"
              },
              {
                "label": "toCarryForward",
                "type": "t_uint256"
              },
              {
                "label": "accmStakedShare",
                "type": "t_uint256"
              },
              {
                "label": "startTime",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(Order)12896_storage)": {
            "label": "mapping(uint256 => struct Order)"
          },
          "t_struct(Order)12896_storage": {
            "label": "struct Order",
            "members": [
              {
                "label": "startRound",
                "type": "t_uint256"
              },
              {
                "label": "endRound",
                "type": "t_uint256"
              },
              {
                "label": "shareReward",
                "type": "t_uint256"
              },
              {
                "label": "oriClock",
                "type": "t_uint256"
              },
              {
                "label": "endClock",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "packageId",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(User)12879_storage)": {
            "label": "mapping(address => struct User)"
          },
          "t_struct(User)12879_storage": {
            "label": "struct User",
            "members": [
              {
                "label": "startingIndexForAddShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForAddShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundAddShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "startingIndexForDeductShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForDeductShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundDeductShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "userOrders",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "lastClaimRound",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "5c5c6075ccd831b8fc1814fe9b6c194b3b2977c40dbe3a822752f88647faf642": {
      "address": "0x956cCeF0EE4f6d6Dd372784E5ad6b299a645c4eB",
      "txHash": "0xe3a49509cae775f79224a348d1b09c946f9e4539ff589f9febafcc6c2934856d",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "NodeController",
            "label": "deAnt3Token",
            "type": "t_contract(IDeAnt3)15995",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:30"
          },
          {
            "contract": "NodeController",
            "label": "ant3Token",
            "type": "t_contract(IAnt3)15985",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:31"
          },
          {
            "contract": "NodeController",
            "label": "guardianToken",
            "type": "t_contract(IERC20Upgradeable)971",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:32"
          },
          {
            "contract": "NodeController",
            "label": "packagePrices",
            "type": "t_struct(PackagePrice)4332_storage",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:33"
          },
          {
            "contract": "NodeController",
            "label": "nodePassive",
            "type": "t_contract(INodePassive)7932",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:34"
          },
          {
            "contract": "NodeController",
            "label": "nodeActiveL1",
            "type": "t_contract(INodeActive)7810",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:35"
          },
          {
            "contract": "NodeController",
            "label": "nodeActiveL2",
            "type": "t_contract(INodeActive)7810",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:36"
          },
          {
            "contract": "NodeController",
            "label": "nodeActiveL3",
            "type": "t_contract(INodeActive)7810",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:37"
          },
          {
            "contract": "NodeController",
            "label": "nodeActiveL4",
            "type": "t_contract(INodeActive)7810",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:38"
          },
          {
            "contract": "NodeController",
            "label": "nodeActiveL5",
            "type": "t_contract(INodeActive)7810",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:39"
          },
          {
            "contract": "NodeController",
            "label": "nodeActiveL6",
            "type": "t_contract(INodeActive)7810",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:40"
          },
          {
            "contract": "NodeController",
            "label": "nodeActiveArray",
            "type": "t_array(t_contract(INodeActive)7810)dyn_storage",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:41"
          },
          {
            "contract": "NodeController",
            "label": "memberController",
            "type": "t_contract(IMemberController)2269",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:42"
          },
          {
            "contract": "NodeController",
            "label": "alphaAccmQty",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:43"
          },
          {
            "contract": "NodeController",
            "label": "betaAccmQty",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:44"
          },
          {
            "contract": "NodeController",
            "label": "gammaAccmQty",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:45"
          },
          {
            "contract": "NodeController",
            "label": "referralRank",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:46"
          },
          {
            "contract": "NodeController",
            "label": "validCaller",
            "type": "t_mapping(t_address,t_bool)",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:47"
          },
          {
            "contract": "NodeController",
            "label": "today",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:50"
          },
          {
            "contract": "NodeController",
            "label": "defaultQuota",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:51"
          },
          {
            "contract": "NodeController",
            "label": "allQuota",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:52"
          },
          {
            "contract": "NodeController",
            "label": "lastPromoCode",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:53"
          },
          {
            "contract": "NodeController",
            "label": "maxClaimRound",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:54"
          },
          {
            "contract": "NodeController",
            "label": "allPromoCode",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:55"
          },
          {
            "contract": "NodeController",
            "label": "deAnt3Decimals",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:76"
          },
          {
            "contract": "NodeController",
            "label": "guardianDecimals",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:77"
          },
          {
            "contract": "NodeController",
            "label": "_guardianCollectAddress",
            "type": "t_address",
            "src": "..\\project:\\contracts\\nodes\\NodeController.sol:78"
          }
        ],
        "types": {
          "t_contract(IDeAnt3)15995": {
            "label": "contract IDeAnt3"
          },
          "t_contract(IAnt3)15985": {
            "label": "contract IAnt3"
          },
          "t_contract(IERC20Upgradeable)971": {
            "label": "contract IERC20Upgradeable"
          },
          "t_struct(PackagePrice)4332_storage": {
            "label": "struct NodeController.PackagePrice",
            "members": [
              {
                "label": "alphaDeAntPrice",
                "type": "t_uint256"
              },
              {
                "label": "alphaGuardianPrice",
                "type": "t_uint256"
              },
              {
                "label": "betaDeAntPrice",
                "type": "t_uint256"
              },
              {
                "label": "betaGuardianPrice",
                "type": "t_uint256"
              },
              {
                "label": "gammaDeAntPrice",
                "type": "t_uint256"
              },
              {
                "label": "gammaGuardianPrice",
                "type": "t_uint256"
              },
              {
                "label": "packageId",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(INodePassive)7932": {
            "label": "contract INodePassive"
          },
          "t_contract(INodeActive)7810": {
            "label": "contract INodeActive"
          },
          "t_array(t_contract(INodeActive)7810)dyn_storage": {
            "label": "contract INodeActive[]"
          },
          "t_contract(IMemberController)2269": {
            "label": "contract IMemberController"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          }
        }
      }
    },
    "2665a71e41c97e631aa7da908978fe1569eec6042d06e86607fa3ed1395ea1d9": {
      "address": "0x7DB2e1d60629a98580db8B980Ff1Dbe0f22543e7",
      "txHash": "0xbd6c7bc33c73aa9908ba5af3ba787dd18088bac442ae7c09e20c28fedd3153f2",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "NodePassive",
            "label": "ant3Token",
            "type": "t_contract(IAnt3)15985",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:17"
          },
          {
            "contract": "NodePassive",
            "label": "nodeControllerContract",
            "type": "t_contract(INodeController)7818",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:18"
          },
          {
            "contract": "NodePassive",
            "label": "dividingValue",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:19"
          },
          {
            "contract": "NodePassive",
            "label": "lastRound",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:20"
          },
          {
            "contract": "NodePassive",
            "label": "lastMoId",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:21"
          },
          {
            "contract": "NodePassive",
            "label": "sortedRoundForDeductShare",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:22"
          },
          {
            "contract": "NodePassive",
            "label": "roundDeductShare",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:23"
          },
          {
            "contract": "NodePassive",
            "label": "rounds",
            "type": "t_mapping(t_uint256,t_struct(Round)7829_storage)",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:24"
          },
          {
            "contract": "NodePassive",
            "label": "allOrders",
            "type": "t_mapping(t_uint256,t_struct(Order)7864_storage)",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:25"
          },
          {
            "contract": "NodePassive",
            "label": "allUsers",
            "type": "t_mapping(t_address,t_struct(User)7853_storage)",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:26"
          },
          {
            "contract": "NodePassive",
            "label": "roundTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:27"
          },
          {
            "contract": "NodePassive",
            "label": "userClockActive",
            "type": "t_mapping(t_address,t_bool)",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:28"
          },
          {
            "contract": "NodePassive",
            "label": "userValidOrderCount",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "..\\project:\\contracts\\nodes\\NodePassive.sol:29"
          }
        ],
        "types": {
          "t_contract(IAnt3)15985": {
            "label": "contract IAnt3"
          },
          "t_contract(INodeController)7818": {
            "label": "contract INodeController"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_struct(Round)7829_storage)": {
            "label": "mapping(uint256 => struct Round)"
          },
          "t_struct(Round)7829_storage": {
            "label": "struct Round",
            "members": [
              {
                "label": "toDistribute",
                "type": "t_uint256"
              },
              {
                "label": "toCarryForward",
                "type": "t_uint256"
              },
              {
                "label": "accmStakedShare",
                "type": "t_uint256"
              },
              {
                "label": "startTime",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(Order)7864_storage)": {
            "label": "mapping(uint256 => struct Order)"
          },
          "t_struct(Order)7864_storage": {
            "label": "struct Order",
            "members": [
              {
                "label": "startRound",
                "type": "t_uint256"
              },
              {
                "label": "endRound",
                "type": "t_uint256"
              },
              {
                "label": "shareReward",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "packageId",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(User)7853_storage)": {
            "label": "mapping(address => struct User)"
          },
          "t_struct(User)7853_storage": {
            "label": "struct User",
            "members": [
              {
                "label": "startingIndexForAddShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForAddShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundAddShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "startingIndexForDeductShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForDeductShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundDeductShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "userOrders",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "lastClaimRound",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          }
        }
      }
    },
    "e6d6d3bacfc7f68e6abd0ed4ec85cd4195fdc39a33d991c602f09ecd9d0d5948": {
      "address": "0x4AE085d1E0Aa7858dbAcFac5f6edC514dFa357c5",
      "txHash": "0xd315f177f116ac4d1484fe9a462e22386f3eb4ead2219c6a726cf91e3f44bbd0",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "NodeActiveL1",
            "label": "ant3Token",
            "type": "t_contract(IAnt3)15985",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:18"
          },
          {
            "contract": "NodeActiveL1",
            "label": "nodeControllerContract",
            "type": "t_contract(INodeController)7818",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:20"
          },
          {
            "contract": "NodeActiveL1",
            "label": "dividingValue",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:21"
          },
          {
            "contract": "NodeActiveL1",
            "label": "lastRound",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:22"
          },
          {
            "contract": "NodeActiveL1",
            "label": "lastMoId",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:23"
          },
          {
            "contract": "NodeActiveL1",
            "label": "sortedRoundForDeductShare",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:24"
          },
          {
            "contract": "NodeActiveL1",
            "label": "roundDeductShare",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:25"
          },
          {
            "contract": "NodeActiveL1",
            "label": "rounds",
            "type": "t_mapping(t_uint256,t_struct(Round)7829_storage)",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:26"
          },
          {
            "contract": "NodeActiveL1",
            "label": "allOrders",
            "type": "t_mapping(t_uint256,t_struct(Order)7864_storage)",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:27"
          },
          {
            "contract": "NodeActiveL1",
            "label": "allUsers",
            "type": "t_mapping(t_address,t_struct(User)7853_storage)",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:28"
          },
          {
            "contract": "NodeActiveL1",
            "label": "roundTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "..\\project:\\contracts\\nodes\\NodeActive.sol:29"
          }
        ],
        "types": {
          "t_contract(IAnt3)15985": {
            "label": "contract IAnt3"
          },
          "t_contract(INodeController)7818": {
            "label": "contract INodeController"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_struct(Round)7829_storage)": {
            "label": "mapping(uint256 => struct Round)"
          },
          "t_struct(Round)7829_storage": {
            "label": "struct Round",
            "members": [
              {
                "label": "toDistribute",
                "type": "t_uint256"
              },
              {
                "label": "toCarryForward",
                "type": "t_uint256"
              },
              {
                "label": "accmStakedShare",
                "type": "t_uint256"
              },
              {
                "label": "startTime",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(Order)7864_storage)": {
            "label": "mapping(uint256 => struct Order)"
          },
          "t_struct(Order)7864_storage": {
            "label": "struct Order",
            "members": [
              {
                "label": "startRound",
                "type": "t_uint256"
              },
              {
                "label": "endRound",
                "type": "t_uint256"
              },
              {
                "label": "shareReward",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "packageId",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(User)7853_storage)": {
            "label": "mapping(address => struct User)"
          },
          "t_struct(User)7853_storage": {
            "label": "struct User",
            "members": [
              {
                "label": "startingIndexForAddShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForAddShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundAddShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "startingIndexForDeductShare",
                "type": "t_uint256"
              },
              {
                "label": "sortedRoundForDeductShare",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "roundDeductShare",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "userOrders",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "lastClaimRound",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "93903a8921078d8b96b2472e9bd7eb3b99a9c6cc870ea4d95f04f48a24f763b8": {
      "address": "0xaE1D0b8D19CFF7159Eb7bcacA9eB46e8d51E7c55",
      "txHash": "0x80133b0849a5edafde30000262c47dbe222e9b9cf94a5a0566fa5eebab69e5c0",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "Ant3Token",
            "label": "_rOwned",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:17"
          },
          {
            "contract": "Ant3Token",
            "label": "_tOwned",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:18"
          },
          {
            "contract": "Ant3Token",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:19"
          },
          {
            "contract": "Ant3Token",
            "label": "_isExcludedFromFee",
            "type": "t_mapping(t_address,t_bool)",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:20"
          },
          {
            "contract": "Ant3Token",
            "label": "_isExcluded",
            "type": "t_mapping(t_address,t_bool)",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:21"
          },
          {
            "contract": "Ant3Token",
            "label": "_excluded",
            "type": "t_array(t_address)dyn_storage",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:22"
          },
          {
            "contract": "Ant3Token",
            "label": "_tTotal",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:24"
          },
          {
            "contract": "Ant3Token",
            "label": "_rTotal",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:25"
          },
          {
            "contract": "Ant3Token",
            "label": "_tFeeTotal",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:26"
          },
          {
            "contract": "Ant3Token",
            "label": "_name",
            "type": "t_string_storage",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:27"
          },
          {
            "contract": "Ant3Token",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:28"
          },
          {
            "contract": "Ant3Token",
            "label": "_decimals",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:29"
          },
          {
            "contract": "Ant3Token",
            "label": "_taxFee",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:30"
          },
          {
            "contract": "Ant3Token",
            "label": "_previousTaxFee",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:31"
          },
          {
            "contract": "Ant3Token",
            "label": "totalBurned",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:32"
          },
          {
            "contract": "Ant3Token",
            "label": "holderTaxFeePercentage",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:33"
          },
          {
            "contract": "Ant3Token",
            "label": "teamTaxFeePercentage",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:34"
          },
          {
            "contract": "Ant3Token",
            "label": "burnTaxFeePercentage",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:35"
          },
          {
            "contract": "Ant3Token",
            "label": "_teamAddress",
            "type": "t_address",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:36"
          },
          {
            "contract": "Ant3Token",
            "label": "_signers",
            "type": "t_array(t_address)dyn_storage",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:38"
          },
          {
            "contract": "Ant3Token",
            "label": "nodeControllerContract",
            "type": "t_address",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:39"
          },
          {
            "contract": "Ant3Token",
            "label": "stackingControllerContract",
            "type": "t_address",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:40"
          },
          {
            "contract": "Ant3Token",
            "label": "_mapSigners",
            "type": "t_mapping(t_address,t_bool)",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:42"
          },
          {
            "contract": "Ant3Token",
            "label": "uniqueIdExists",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:43"
          },
          {
            "contract": "Ant3Token",
            "label": "userTotalBurned",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:44"
          },
          {
            "contract": "Ant3Token",
            "label": "_team2Address",
            "type": "t_address",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:48"
          },
          {
            "contract": "Ant3Token",
            "label": "_gameChangerAddress",
            "type": "t_address",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:49"
          },
          {
            "contract": "Ant3Token",
            "label": "_farmingPoolAddress",
            "type": "t_address",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:50"
          }
        ],
        "types": {
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          }
        }
      }
    },
    "efce7d6fdf49836c9bf17f22d2a76b4492d1803554c74ae465cca4699654891a": {
      "address": "0x5136C7ED0cA19Df30782442BD40F405CC20FCF8F",
      "txHash": "0xf4048dbb2e4045af275008020576aa05f4487a5108b20ecbf9c94952d77b6cfa",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "Ant3Token",
            "label": "_rOwned",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:17"
          },
          {
            "contract": "Ant3Token",
            "label": "_tOwned",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:18"
          },
          {
            "contract": "Ant3Token",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:19"
          },
          {
            "contract": "Ant3Token",
            "label": "_isExcludedFromFee",
            "type": "t_mapping(t_address,t_bool)",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:20"
          },
          {
            "contract": "Ant3Token",
            "label": "_isExcluded",
            "type": "t_mapping(t_address,t_bool)",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:21"
          },
          {
            "contract": "Ant3Token",
            "label": "_excluded",
            "type": "t_array(t_address)dyn_storage",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:22"
          },
          {
            "contract": "Ant3Token",
            "label": "_tTotal",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:24"
          },
          {
            "contract": "Ant3Token",
            "label": "_rTotal",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:25"
          },
          {
            "contract": "Ant3Token",
            "label": "_tFeeTotal",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:26"
          },
          {
            "contract": "Ant3Token",
            "label": "_name",
            "type": "t_string_storage",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:27"
          },
          {
            "contract": "Ant3Token",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:28"
          },
          {
            "contract": "Ant3Token",
            "label": "_decimals",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:29"
          },
          {
            "contract": "Ant3Token",
            "label": "_taxFee",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:30"
          },
          {
            "contract": "Ant3Token",
            "label": "_previousTaxFee",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:31"
          },
          {
            "contract": "Ant3Token",
            "label": "totalBurned",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:32"
          },
          {
            "contract": "Ant3Token",
            "label": "holderTaxFeePercentage",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:33"
          },
          {
            "contract": "Ant3Token",
            "label": "teamTaxFeePercentage",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:34"
          },
          {
            "contract": "Ant3Token",
            "label": "burnTaxFeePercentage",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:35"
          },
          {
            "contract": "Ant3Token",
            "label": "_teamAddress",
            "type": "t_address",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:36"
          },
          {
            "contract": "Ant3Token",
            "label": "_signers",
            "type": "t_array(t_address)dyn_storage",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:38"
          },
          {
            "contract": "Ant3Token",
            "label": "nodeControllerContract",
            "type": "t_address",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:39"
          },
          {
            "contract": "Ant3Token",
            "label": "stackingControllerContract",
            "type": "t_address",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:40"
          },
          {
            "contract": "Ant3Token",
            "label": "_mapSigners",
            "type": "t_mapping(t_address,t_bool)",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:42"
          },
          {
            "contract": "Ant3Token",
            "label": "uniqueIdExists",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:43"
          },
          {
            "contract": "Ant3Token",
            "label": "userTotalBurned",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:44"
          },
          {
            "contract": "Ant3Token",
            "label": "_team2Address",
            "type": "t_address",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:48"
          },
          {
            "contract": "Ant3Token",
            "label": "_gameChangerAddress",
            "type": "t_address",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:49"
          },
          {
            "contract": "Ant3Token",
            "label": "_farmingPoolAddress",
            "type": "t_address",
            "src": "..\\project:\\contracts\\token\\Ant3Token.sol:50"
          }
        ],
        "types": {
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          }
        }
      }
    }
  }
}
